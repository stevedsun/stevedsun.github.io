<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 电波障害</title><link>https://sund.site/posts/</link><description>Recent content in Posts on 电波障害</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>© 2021, Steve Sun</copyright><lastBuildDate>Thu, 18 Mar 2021 15:32:57 +0800</lastBuildDate><atom:link href="https://sund.site/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>分布式缓存系统的设计</title><link>https://sund.site/posts/2021/03/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AE%BE%E8%AE%A1/</link><pubDate>Thu, 18 Mar 2021 15:32:57 +0800</pubDate><guid>https://sund.site/posts/2021/03/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AE%BE%E8%AE%A1/</guid><description>很久不写技术文章了。这是一篇关于Redis构建分布式缓存系统的总结，结合之前项目上的使用场景，做一个系统性的梳理。
下面就以我做过的商品预约平台项目作为引子，引出分布式缓存设计的一些要点。
该商品预约平台的背景如下：
该系统由多个微服务组成 预约的过程：用户可以选择指定门店，指定日期到店提领商品，如果对应门店和日期没有库存，则不能预约 因为“预约”的是未来时刻的库存，所以门店的未来某个时间剩余库存是通过一系列公式计算得出的。这个公式比较复杂，考虑到了用户指定的日期是否在配货周期内等因素，这里省略掉细节 每年节日高峰时期，用户会集中预约商品，导致服务压力骤增。又因为未来日期的库存需要动态计算的特点（比如A预约了1月1日的最后一件商品，B就会无法在该日预约），不同用户的预约操作会互相影响，严重时导致数据库死锁、数据不一致等问题 基于以上背景，这个预约系统的设计必须将性能作为主要优化目标，而缓存作为性能优化的不二选择，就承担了重要职责。
识别热点数据 并不是所有数据都有必要被缓存，往往缓存的数据具有以下几个特点：
读写比很高。如果写操作比读操作还多，缓存系统频繁更新会大大降低可用性 是热点数据。因为内存的价格昂贵，所以按照2-8原则，20%热点数据才值得被缓存 能够容忍短时间的不一致 结合项目需要，排除掉一些不适合缓存的数据：
对于那些只读的、配置相关的数据，只需要做进程缓存（使用Guava Cache），在服务启动时加载数据到内存就可以了 尽量用 CDN 和 Nginx 静态缓存来解决大部分不常更新的资源 对于该预约项目，用户最频繁查询的数据是不同门店在不同日期下的库存数量。这类数据是缓存设计的重点照顾对象：
用户选择了指定城市、指定门店后，系统会返回最近30天的库存信息，用户只可能修改其中一条信息。所以读写比很高 库存信息是预约订单流程的必备步骤，而且是跨服务调用（预约服务 -&amp;gt; 库存服务）的数据，所以涉及到大量网络请求、数据库查询。 指定性能优化的指标 在即将完成业务系统开发时，我们就根据 Google SRE Books 提到的四个黄金指标，制定了监控系统性能的四个维度：
请求率 错误数，非200返回结果数量 响应时间 资源利用率（CPU、内存） 我们使用 Prometheus + Grafana 的组合实现监控可视化，这样每次测试人员进行压力测试时，都可以通过这些指标对系统进行调整。缓存影响最大的指标是请求率（一般用TPS或者QPS）和响应时间。所以在设计缓存系统时，要不断参照这两个指标进行优化。
缓存的设计的实践 分级缓存 为了不让某一接口或者微服务的缓存失效导致其他接口或服务的并发量暴增，就要针对不同来源（数据库的表、接口等）的数据做分级缓存。比如用户在一次查询中涉及到“附近可预约门店”的查询、“活动期间不同日期剩余库存”的查询、“已预约数量“的查询，这三种查询逐层依赖后边的查询结果。
假设如果只针对库存数量做缓存，一旦这部分缓存失效，那么“附近可预约门店”的查询就会直接访问数据库查询全部门店的剩余库存来确定哪个门店可以预约。这样就导致查询库存的接口并发量骤增。所以分级缓存一定程度上缓解了缓存雪崩的问题。
自动化测试API参数合法性 我们的QA通常会写自动化脚本对后端API做定期的扫描，检查哪些接口的数据输入、输出有不合法的类型或是数值范围。除了巩固系统的健壮性，还能帮助缓存系统抵御缓存穿透的风险。
缓存和数据库双写问题 这是一个“先淘汰缓存&amp;quot;还是”先写数据库“的问题。通常没有明确的最佳方法。我们采用 Cache-Aside Pattern 的方式：
失效：应用程序先从cache取数据，没有得到，则从数据库中取数据，成功后，放到缓存中。 命中：应用程序从cache中取数据，取到后返回。 更新：先把数据存到数据库中，成功后，再让缓存失效。 缺点：可能有小概率脏数据。比如，一个是读操作，但是没有命中缓存，然后就到数据库中取数据，此时来了一个写操作，写完数据库后，让缓存失效，然后，之前的那个读操作再把老的数据放进去，所以，会造成脏数据。
考虑到写操作通常比读操作时间更长，所以 Cache-Aside Pattern 中的脏数据概率非常小，即便发生，用户在实际下单时系统仍然会去数据库里做数据校验，不会影响业务数据的正确性。</description></item><item><title>用 Notion 实践卡片盒笔记法</title><link>https://sund.site/posts/2020/12/%E7%94%A8-notion-%E5%AE%9E%E8%B7%B5%E5%8D%A1%E7%89%87%E7%9B%92%E7%AC%94%E8%AE%B0%E6%B3%95/</link><pubDate>Sat, 12 Dec 2020 22:42:53 +0800</pubDate><guid>https://sund.site/posts/2020/12/%E7%94%A8-notion-%E5%AE%9E%E8%B7%B5%E5%8D%A1%E7%89%87%E7%9B%92%E7%AC%94%E8%AE%B0%E6%B3%95/</guid><description>今天给大家介绍一种整理和回顾碎片知识的方法——卡片盒笔记法。
应该不少人都读过少数派作者玉树芝兰老师写的关于卡片盒笔记法的文章。产品沉思录的主理人少楠也写过很多相关的内容，最近他们还出了一个工具（Flomo - 浮墨笔记）也是基于这套方法论的。
在这篇文章中，我会结合自己用 Notion 的经验，分享一下我如何用 Notion 做卡片笔记。
本文参考了 Youtube 频道 Mukul Khanna 关于 Notion 的一系列使用方法。
什么是卡片盒笔记法 卡片盒笔记法（Zettelkasten）是一种将零散的想法、笔记和文献，通过编号、引用、索引等方式彼此关联起来，形成知识网络并提取有效信息的方法。其著名使用者——社会学家 Niklas Luhmann 一生创建了9万多张索引卡片，发布了70多本专著和400多篇学术论文。
卡片盒笔记法可以类比为人类大脑记忆和归纳知识的回路。
人类大脑有两种思维模式——专注和发散。
我门通常学习某一学科知识时使用的是专注模式——从一个知识点引申到相关的知识点，像串糖葫芦一样把一系列知识点串联起来形成一套知识体系。
在另一些情况下，如艺术创作、技术创新等，我们的大脑会切换为发散模式——大脑在在一些关联但不同领域的知识间来回跳跃，形成一种全新的思考路径。
此时此刻，我为了将分散在不同笔记中零散的知识点关联起来形成这篇大家看到的文章，就需要同时借助两种模式，找到不同网站、文献间相关的内容，把他们组织起来。
相对应的，卡片盒笔记法有两种关联笔记的方式，「顺序」和「引用」：
当我们在专注模式下阅读一本书或一篇文献时，我们可以把瞬间的想法记录在笔记中，按顺序（比如按章节）把若干笔记关联起来。
而当我们在记录笔记过程中想到相关的内容在另一篇文献中也出现过，那么我们可以在笔记中用引用的方式把另一篇笔记内容和这篇内容做关联。
这样一篇笔记（卡片盒笔记法里的「卡片」），就有了两条途径来回顾它——顺序阅读和延伸阅读。例如，一段时间后，我们想把这段时间的学习心得梳理出来归纳成一篇文章，我们就可以先以某一篇笔记为起始点，顺序读下面的笔记卡片，读到感兴趣的内容再看看它关联的那些卡片是否可以作为素材。以此类推，从一片知识的网络中抽丝剥茧，抽象出一种独特的脉络。当然，这些卡片还可以和其他卡片组合，形成另一种视角。这一套卡片构成的卡片盒，就是一套不断碰撞出新想法的数据库。
Notion 为什么适合做卡片盒笔记法 Notion 在前一段时间更新了 Backlinks （反向链接）功能，这一功能的推出，把 Notion 和新晋的几款网状知识管理工具（Roam Search、Obsidian）的差异大大缩小，成为了做卡片盒笔记法的合适工具。相对于专注做卡片笔记的软件来说，Notion 的优势是更加灵活的配置和用途广泛的页面元素。
用 Notion 实践卡片盒笔记法 我们首先脱离 Notion 这个软件，看看通常情况下一张卡片由哪些部分组成。下图是来自 Introduction to the Zettelkasten 文章的配图，呈现了一张卡片的样子：
标题。包含一个唯一编号的标题，编号的作用是在其他笔记中可以方便引用该笔记，而不用担心笔记的标题发生变化使引用失效 标签。方便回顾笔记时对某一类内容做整理归纳 正文。笔记正文是一个想法或是一个知识点的总结。一定是用自己的话来归纳。可以引用其他笔记的编号或是参考文献的地址来配合内容展现 参考文献。结尾部分是这篇笔记卡片是由哪些文献引申而来的 由此可见，卡片盒笔记法中的「卡片」是通过
引用卡片编号，来关联其他卡片 引用参考文献，来关联外部文献 下面回到 Notion 这个工具，我们一步步来搭建卡片盒笔记法。
搭建文献库 - 零散知识的数据库 所谓巧妇难为无米之炊，我们做笔记的第一步就是搭建文献资料库，这是一切笔记的源头，有点像数据工程里的「贴源数据层」，文献库是为了让互联网上经常失效的文章有个备份的好地方，同时你也可以在文献库里对文章进行划线、高亮和备注。</description></item><item><title>职业生涯说明书（一）</title><link>https://sund.site/posts/2020/06/%E8%81%8C%E4%B8%9A%E7%94%9F%E6%B6%AF%E8%AF%B4%E6%98%8E%E4%B9%A6%E4%B8%80/</link><pubDate>Sat, 06 Jun 2020 19:30:43 +0800</pubDate><guid>https://sund.site/posts/2020/06/%E8%81%8C%E4%B8%9A%E7%94%9F%E6%B6%AF%E8%AF%B4%E6%98%8E%E4%B9%A6%E4%B8%80/</guid><description>对于大部分人来说，工作贯穿一生，工作对于人的健康、幸福感都发挥着决定性作用。
今天的话题就是关于如何规划职业生涯。
这次话题的起因是听了Rio和黄海主播的Podcast《疯投圈》的一期节目，里面提到一本职业规划的书——《远见》。作者布赖恩·费瑟斯通豪是市场营销方面的大师，他主张对待职业生涯要看长远，普通人一生中绝大部分财富是在40岁之后积累的，所以年轻时对财富的忧虑往往是过度的，要对职业生涯做一个长达45年的分阶段职业规划，保持积累可持续的职场燃料。
《远见》整本书都在围绕两个主题：
寻找助推职业发展的「职场燃料」 在职业的不同阶段，如何给自己清晰的定位 积累职业生涯的三大职场燃料 所谓职场燃料，即
可迁移的技能 有意义的经验 持久的关系 相比于即学即用的职业技能，这三大燃料往往是在漫长的工作经历中逐渐获取的。聪明的职业发展策略是，在整个职业生涯中持续积累、更新职场燃料，同时精明地消费它们。
例如，当我们想要跳槽到下一家公司时，除了福利待遇，最看重的是什么呢？很多人会说「能不能学到东西」。其实这是非常模糊的概念，学到什么，通过什么学？这些问题决定了一份工作是否成为你职业生涯的助推器。
可迁移技能。我应该从工作中学到什么 （它）不仅是帮助你完成眼前工作的技术知识和行业术语，而且是当你从一个工作换到另一个工作，从一家公司换到另一家公司，甚至是从一个行业换到另一个行业时都能依靠的能力和基础。
可迁移技能不光是指那些领域知识或者技术壁垒，更是一些通用的社会技能，例如：
解决问题能力 沟通能力 人才吸引力 寻求帮助和帮助他人的能力 理解和连接他人情绪状态的能力 这些能力往往不存在于特定的公司或是领域。可迁移技能中的**大部分真正重要的能力，并不需要反复跳槽来获取。**如何尽可能获得能力的提升呢？布赖恩认为，关键在于开放性的心态。如果你能多一些耐心，通常就能在一家公司里获得丰富的经验。
你可以试着用一张纸，把自己的可迁移技能列出来，审视一下，哪些是随着行业发展逐渐消失的？哪些会在未来持续提供你帮助的？你是否在积累这些技能？
有意义的经验。我的工作是否有价值 自信心必须建立在有市场竞争力的事情上面。
社交网络上总看到类似这样的职场段子——「离职无非两个原因：嫌钱少；干得不高兴」。用钱和高兴程度来衡量工作的价值还远远不够。
评估当前工作是否对我们有价值，可以通过4个黄金问题：
1．我是否正在学习和成长？
2．我是否正在对某些人、现在的公司，乃至整个社会拥有影响力
3．我体验到乐趣了吗？
4．我是否得到了适当的奖励，并创造了经济价值？
这四个方面分别对应了学习、影响力、乐趣、奖励。
学习决定了你是否在专业领域保持成长；影响力代表你对他人带来的益处，这会从多方面影响你的人际关系和发展机会；乐趣则是持续投入精力和从工作中获得幸福感的源动力；奖励则不光是薪水，还有各种福利、时间、补贴等因素。
根据当下你的感受，给这四方面分别赋予一定权重（一个百分比），假如你更看重学习和乐趣，那么就给他们更高的权重，同时降低另外两项的权重。然后给当前工作的状态打出评分，10分满分，最后用权重乘以评分得到每一项的职业价值分：
根据作者布赖恩的经验，如果总分在700分以上，那么你的工作就算非常有价值了。
表格中的权重可以每年根据自己的感受进行调整。最重要的是，不要单纯把金钱和干得高兴作为决定工作价值的因素。影响力往往是人们最容易忽略的价值，年轻阶段积累的影响力，往往会在职业生涯的后半段起到决定性作用。
持久的关系 人脉关系网的构建者的心态是交易性的，他们在追求人际关系时只考虑其他人能为他们做什么。而人际关系的构建者会首先尝试帮助别人，他们不会有所保留。
很多教你如何「积累人脉」的书，骨子里都是在教你「虚伪」。布赖恩认为，真正获得良好人际关系的诀窍在于不索取回报的付出。根据研究，付出者在利他性、责任心、社会正义和同情心方面表现的更加突出，往往跻身杰出和最幸福行列的机会也比别人大得多。
我们总觉得社会关系要讲究「互利」，其实互利的本质就是「利他」。回报往往是非即时的，总要在一方面作出让步，才能在另一方面获得回报。
「向他人提供帮助」的能力也是强大的可迁移技能，它的重要性甚至高于「向他人寻求帮助」的能力。
然而，根据邓巴数理论，一个人能够同时保持密切关系的人数上限是150人。
所以那些微信躺着上千好友的社交大咖，是把朋友当作交易性的「人脉」还是良好的「人际关系」？
布赖恩把一个人的人际关系分为5层，数量上从多到少，依次是：
通信录里的联系人 拥有特殊知识、权力的专家团 在公司里对你有决定性影响的5到10个关键同事 提建议、拥护你、激励你的支持者（导师、帮手） 你自己 他们构成了支撑你职业生涯的金字塔。
联系人是你的通信录好友，你通过各种渠道认识的人。他们数量较多，通常他们中的少数人会成为你真正的好朋友。
专家团是你的朋友中具备一定专业能力和领域知识的人，在你需要帮助时，可以向他们求援。在利他的原则下，我们也会成为别人的专家团，帮助他人。
关键同事的重要性不言而喻，他们直接影响你的职业发展，其中榜首的是你的上司。
支持者又称为你的「个人董事会」，他们的建议和帮助往往对你的职业生涯起着决定性作用。支持者在人的一生中十分稀有而宝贵，他们甚至会在背后默默帮助你，说你的好话，成为你重要职位的推荐人。那么如何寻找你的「支持者」呢？布赖恩给出的建议是：「如果你将自己当成一个学生，那就自然会找到老师」。
最后，不要忘了自己，你是你自己最好的品牌经理。
这个人际关系金字塔是你赖以生存的职业生态系统，请把对你重要的那些人填在对应的位置。每年至少要审视一次，哪些关系为你带来了最大的价值？哪些关系正在枯竭？哪些关系还可以进一步发展？</description></item><item><title>译文：重建世界2.0</title><link>https://sund.site/posts/2020/05/%E8%AF%91%E6%96%87%E9%87%8D%E5%BB%BA%E4%B8%96%E7%95%8C2.0/</link><pubDate>Sun, 10 May 2020 20:22:53 +0800</pubDate><guid>https://sund.site/posts/2020/05/%E8%AF%91%E6%96%87%E9%87%8D%E5%BB%BA%E4%B8%96%E7%95%8C2.0/</guid><description>这是一篇投资人Daniel Gross发表在自己博客的文章，讨论了新冠疫情后期的世界如何进入2.0新模式，以及有哪些机会和挑战。我把它翻译过来，希望大家也能从中获得启发。
重建世界2.0 未来几周，因疫情导致的封锁将逐步放开，当我们再一次打开房门，迎接我们的将是世界2.0。在这个新版本的世界里，一切会看起来完全不同，这种「不同」会成为培育新一代开拓者们的土壤。
开始话题之前，理解下面的原则可能会帮助我们思考：
衰退不可避免。在用尽了所有维持经济运转的手段之后，洪水将会到来。在30%的失业率下，我们无法保持同样的经济增长了。 疫苗何时到来还不确定。就像普通感冒一样，没有特效药。在科学家研制出可行的药物之前，我们将被迫改变生活习惯以适应这种状态。 大自然迫使我们进行一场规模空前的社会实验。很多企业在几周内就全部远程办公了，一些地区觉得远程办公是一种巨大的经济负担。但是很多人终会明白，远程工作虽然不是特别好，但在这个背景下，仍然是一个好办法。 如果世界2.0同样的保持平等、优越、法理……那一切行为都会产生永久性的改变。（译者：即永久性替代现有秩序） 如果你的想法足够超前，你一定能在这场游戏里获得有价值的东西：
握手已死。疫情首先改变了家庭内部的习惯，然后，陌生人之间呢？ 电影院的消亡。电影会在网络上重生。影院已经无力承担更少的座位了，即便在病毒爆发之前很多影院也已经濒临破产。已经有太多可以替代电影院的选择了。 暂停音乐会，在网上开。再次举办这种大型活动遥遥无期，目前还没有可替代的方案。我敢打赌，这种情况将会反复发生：再一次爆发疫情，再一次停止活动。 城市的（暂时性）终结。疫苗出现之前，越来越多人会搬去郊区。一些房地产经纪人告诉我旧金山公寓的市场在降温，同时郊区的房子却渐渐在升值。 信任。突然之间，所有人都变成了潜在病毒携带者，当你在大街看到一个陌生人时，内心是什么感觉？病毒增大了人与人的距离，减少了彼此的信任。 商务旅行变成了Zoom会议。部分公司发觉，可以通过远程会议完成谈判。我想，在经济衰退的市场环境下，很多管理者为了降低成本，会退而求其次。旅行的开支将会被大幅降低。 个人旅行减少。原因可能是个人经济能力的下降，而不是恐慌。 数字企业活动。过去几周我已经见识到很多在网上进行的商业活动。其中，很多经理人发现在一些项目中使用Zoom（远程会议软件）已经“足够好用”了，并开始着手削减此前在这方面的其他投入。如果这一次的网络商业活动实践产生了积极的作用，那么对于那些利润直接相关的企业部门未来采纳网上商业活动模式将至关重要。 「集体农场式」人事管理。如果未来在不同地区发生第二波第三波疫情，可以想象到，人们会共同参与社区管理，构筑起新的信任关系。类似室友和家庭之间的有机结合，这种结合越来越广泛。未来的公司甚至会鼓励同事之间共同隔离，以此提高返工管理流程的效率。 开放办公室会变得越来越不受欢迎。不但因为开放办公环境的人员密度不适合保持社交距离，而且人们经历了在家办公之后，会渐渐意识到一扇可以关上的门是多么重要。 公共交通被看作不安全。世界2.0不喜欢高密度的人口。还有什么比高峰时段的地铁更高密度呢？城市交通对一个城市的发展至关重要，要么我们会看到严厉的管控措施，要么就是像纽约那样大规模感染之后群体免疫。总之对Uber（等共享出行）来说可能是一个福音。 餐馆和数字餐馆。酒馆文化存在了几千年，所以它不会消失。但问题是，如何低密度地运营这项业务，以适应新时代的社交距离。由于家庭餐馆的模式并不理想，所以这个领域是我认为会出现新产品和创造力的地方。 学校会加强网络教学。父母顺理成章地会要求年轻人回到学校。没有什么比大学校园更好的生活环境了：那里聚集着一群对病毒免疫的年轻人，并且远离了老年人。也许会有新的数字教育替代品出现，但是用Zoom远程上课肯定不是最好的办法。 在线体育2.0。类似餐馆，在线体育也有很多上升空间。想象一下，在没有观众和球迷的体育场比赛，将会对运动员的生理水平造成什么影响。这很有趣。 这将是人类有史以来最不稳定的时代。一夜之间全世界的人们都改变了行为方式。这为创业营造了真正的机会，那些能够快速适应时代需要的人，将比其他人更好的发展。
对于每一个新出现的行为模式，都会有一家新的创业公司出现填补空缺。假如人们想要音乐会，大自然不允许，那么替代方案是什么？如果酒吧餐馆因为社交距离的原因而无法维持，那么网络上酒吧餐馆是什么样呢？新的Zoom应该是什么样子，一个企业版的Snapchat如何引领销售业绩呢？正如Nat Friedman所言，“视频会议是一架不需要马的马车“。
值得期待的是，在新冠疫情把我们从美梦中唤醒的同时，世界1.0正在衰退，大自然打破了常规，我们必须重新建立秩序。
“IT&amp;rsquo;S TIME TO BUILD!”
原文链接：https://dcgross.com/building-in-world-2-0/</description></item><item><title>一个购买数字商品的必备技能</title><link>https://sund.site/posts/2020/03/%E4%B8%80%E4%B8%AA%E8%B4%AD%E4%B9%B0%E6%95%B0%E5%AD%97%E5%95%86%E5%93%81%E7%9A%84%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD/</link><pubDate>Mon, 30 Mar 2020 23:39:33 +0800</pubDate><guid>https://sund.site/posts/2020/03/%E4%B8%80%E4%B8%AA%E8%B4%AD%E4%B9%B0%E6%95%B0%E5%AD%97%E5%95%86%E5%93%81%E7%9A%84%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD/</guid><description>《集合啦！动物森友会》最近占据了所有社交网络的时间线。这款游戏的快乐对于不了解它的人，恐怕只有亲身上岛，和动物朋友们一起捉虫钓鱼才能渐渐体会到。嗅觉灵敏的淘宝奸商（其实也是为了恰饭）一直在抬高售价，《动森》的价格被从320元一路炒到了450元，很多Nintendo Switch玩家无奈转战到eshop购买数字版。
今天我会讲讲怎么以最便宜的价格购买数字版游戏，以及国内剁手党如何将全球便宜商品收入囊中。
从这篇文章中你可以收获：
购买Nintendo Switch亚区、美区、欧区的游戏都有哪些限制 如何使用国内的VISA卡绑定美国的Paypal来购买数字版游戏 除了买数字版游戏，美国Paypal还能做什么？ Nintendo eShop 各个区购买游戏有什么限制 任天堂的电子商店eshop把全球玩家大致划分为三个大区——亚区、美区、欧（非、澳）区。非、澳洲和欧区享受同样的待遇，所以我们下文统称欧区。亚洲区里中国玩家最熟悉的是港服、日服，很多日本出的RPG游戏只有这两个区有中文版；至于国行的Nintendo Switch主机，因为只能购买国行的游戏，所以我们不去聊它。
注意，在各个地区eshop购买游戏，首先需要注册对应地区的账号，可以参考这篇攻略《简单几步，就可以完成看似复杂的任天堂账号注册| Jump 新手教程》。
亚区的eshop支持用国内的（VISA，MasterCard）信用卡付款，港服还支持用支付宝。
欧区支持用国内的（VISA，MasterCard）信用卡付款。（但是也有部分朋友反应澳大利亚最近也无法使用信用卡支付成功了）
美区只能使用美区那些国家的信用卡支付，比如加拿大、美国、墨西哥。
可见，国内玩家最难购买的就是美区的游戏了。众所周知，墨西哥是eshop购买游戏最划算的地区之一，同样的游戏，墨西哥总是比日本、美国等其他地区便宜将近一半！
另外由于最近疫情影响，澳元贬值，澳大利亚区也成为了购买数字产品的圣地。
所以接下来就围绕「如何跨区购买数字商品」展开攻略吧。
如何用国内的双/多币信用卡购买数字游戏和其他产品 Nintendo eshop除了信用卡直接绑定付款，还可以绑定Paypal账号支付。网上出现过很多注册美国Paypal来购买游戏的教程，比如这篇《购买eShop数字版游戏 | 完整版教程》。但是教程中最困难，也是阻碍最多人走向成功的一步，就是美区的Paypal风控极其严格，如果你使用的国内信用卡并且没绑定美国的电话号码，马上就会被Paypal发现并锁定你的账号，要求你验证身份。
我就是经历这样一个「注册成功-&amp;gt;😊-&amp;gt;被锁定-&amp;gt;😖」的过程，才终于知道了原来一个美国的电话号码对网上购买虚拟商品是如此重要。
要注册一个美国Paypal，首先要能打得开美国Paypal的网站，然后在注册信息时填写美国的住址，你可以在这个神奇的网站随机生成美国身份和地址信息。一直填写到最后一步——验证手机号码，这就到了本文最重要的部分了。
获得一个美国电话号码，只要打开淘宝搜索「Google Voice账号」，以20元不到的价格购买到一个绑定了美国手机卡的Google Voice账号，就可以用Google Voice提供的虚拟号码来接收美国的短信了。
Google Voice是Google公司推出的VoIP（基于IP的语音通话）服务，翻译成人话就是虚拟电话号码。你可以通过Google Voice拨打电话、收发短信。Google Voice账号需要绑定一张美国的电话卡，在淘宝购买的Google Voice账号里商家已经替你绑定好了。
你得到Google Voice账号之后，用它登录到Google Voice的网页端或者手机端，然后在「设置-Google Voice号码」里看到你的虚拟号码，用这个号码注册美区Paypal，就可以正常接收Paypal发来的短信验证码了。
有了Paypal账号，你先要在Paypal里绑定你的国内信用卡，Paypal会自动汇款1美元来测试信用卡是否可用（会自动退回给你）。
最后，用你注册好的任天堂账号进入对应的墨西哥/澳大利亚区的Nintendo eshop，点击右上角头像，在设置里找到paypal的字样，绑定支付方式为刚注册的美国Paypal。
然后，愉快地购买打折游戏吧！
特别值得注意的一点是，Google Voice如果长期不用，号码会被Google自动回收，所以为了长期持有号码，最好设定一个日历提醒，每个月使用Google Voice发送一些短信，来保持活跃度。
美国Paypal还能做什么？ 和国内的Paypal不同，美国的Paypal可以绑定很多大陆地区无法支持的购物平台。例如网上看到的一篇文章提到：
使用中国地址注册的PayPal无法在一些网站下单，比如联想美国站 一些美国网站搞活动时，只有美国PayPal才能享受折扣或者只有美国PayPal才能试用产品，比如beenverified 在阿里云国际、Google Play、App Store、Netflix等平台付款 美国PayPal提现余额到美国银行无手续费，而中国PayPal提现余额到美国银行要收35美元手续费 中国PayPal间不能相互转帐 有些网站不接受你的信用卡付款，但把信用卡绑定到PayPal以后却可以正常付款，很明显这是网站为了降低风险，把风险直接丢给PayPal处理 如此众多的好处，拥有一个美国Paypal看来是居家旅行必备良品。</description></item><item><title>看懂电影《爱尔兰人》</title><link>https://sund.site/posts/2020/03/%E7%9C%8B%E6%87%82%E7%94%B5%E5%BD%B1%E7%88%B1%E5%B0%94%E5%85%B0%E4%BA%BA/</link><pubDate>Sun, 08 Mar 2020 17:19:49 +0800</pubDate><guid>https://sund.site/posts/2020/03/%E7%9C%8B%E6%87%82%E7%94%B5%E5%BD%B1%E7%88%B1%E5%B0%94%E5%85%B0%E4%BA%BA/</guid><description>友情提示，本文有轻度剧透，请慎重阅读。
说到美国，大家都知道它是个移民国家。美国的爱尔兰裔，占到了总人口的10%以上（数据来源），仅次于德国裔，排在第二位（2000年最新数据显示非洲裔已经超过爱尔兰裔成为美国第二大族群）。爱尔兰裔美国人总数甚至超过了爱尔兰本土的人口数。美国的爱尔兰后裔为何如此之多？这就要从18世纪的爱尔兰说起。
18世纪末期，英国彻底征服了爱尔兰，使之成为大英帝国的一部分。英国人剥夺了爱尔兰人世代赖以为生的土地，令其在自己的国家成为二等公民。
爱尔兰人连同土地一起失去的，还有信仰。当时的英国以信仰新教为主，而爱尔兰人普遍信仰天主教。为了打击爱尔兰的天主教势力，同时也为了镇压爱尔兰叛乱，英国人不允许爱尔兰人组织天主教相关的活动，并且法律还规定爱尔兰人既无选举权，也不能充任公职、律师、教师等职业。
如此严厉的律法，使得爱尔兰人只能从事低级的体力劳动，过着极其贫困的生活。
政治家埃德蒙·伯克这样形容英国针对爱尔兰的法律（来源：《美国种族简史》）：
自古以来，人类凭借着邪念所能制造出最巧妙的机器，用以使百姓堕落，并进而败坏人性本身。
但上帝给爱尔兰人关闭一扇门的同时，也打开了一扇窗。为了生存和信仰，爱尔兰人在极端严酷的环境下，一边躲避迫害，一边在天主教的精神支撑下抱团取暖。久而久之竟然解锁了他们的种族天赋——强大的地下组织能力。
19世纪40年代，爱尔兰爆发了大饥荒，上百万爱尔兰人死于饥饿和瘟疫。英国议会对爱尔兰人的漠视，使得爱尔兰土地上成千上万的民众，挣扎着自求生路。
当时的商船从北美出发到英国，需要运载大量的农产品，但是从英国返回美国，则以运输体积较小的工业品为主，这就造成了大量船舱空间没有被利用。于是越来越多的底层爱尔兰人，借助远在美洲的爱尔兰同胞们赞助的钱财，购买这种廉价商船的「蹲票」，挤在狭小的商船货仓里前往北美洲。
3个月的海上航行漫长而痛苦，无数爱尔兰人在船舱里因为缺水、疾病、饥饿而死去。活下来的少数人终于踏上了向往的新大陆。
初到美国的爱尔兰人普遍身无分文，也只能从事低级的体力劳动维生，美国的矿工、铁路工人大都是这些人组成，比起南方种植园的黑人奴隶，爱尔兰人的生存境况更差，累死、饿死、工伤死亡的比比皆是。但是多亏了爱尔兰民族的种族天赋：强大的地下工作组织能力！很快，爱尔兰人主导的工人团体相继成立，1861年的美国矿工协会，1903年的国际妇女工会联盟，1905年的世界产业工人联盟……一个个由爱尔兰裔主导，旨在团结底层劳工的工会组织成为了美国重要的政治势力。
时代成就了爱尔兰人。电影中，吉米·霍法创建的美国卡车司机协会也是这样的一个工会组织。
看过《美国往事》的同学应该记得，美国在1920年代颁布了著名的禁酒令，在禁运私酒的这段时间，以爱尔兰裔和意大利裔为主的美国黑帮在这一时期通过地下产业迅速壮大。
黑帮控制的地下私酒产业链蓬勃发展，但是这些违法生产的私酒需要大量卡车司机来协助运输。于是，吉米·霍法领导的卡车司机协会就在那段时期和美国黑帮一起，把持着美国的利益链条。
影片中的男主角弗兰克.希兰就是那个时期成为了一名卡车司机，并结识了黑帮大佬罗素和卡车司机协会的吉米，成为了两边势力的中间人。
同一时期，违法私酒产业也让另一个对美国影响深远的家族默默崛起，那就是靠着贩卖私酒大赚特赚的肯尼迪家族。肯尼迪家族也是爱尔兰后裔。有赖于黑帮势力的支持，约翰·肯尼迪在1961年成功就任美国总统。但是肯尼迪一上任就跳反了，把矛头指向了黑帮和工会，联合司法部长的弟弟罗伯特·肯尼迪一起，打击有组织犯罪和地下产业。
电影里，吉米每次提到肯尼迪，就恨得暴跳如雷，把对方家里女性长辈都问候一遍。
最终，通过打击犯罪赢得了民众支持的肯尼迪，却深深得罪了爱尔兰人的两大势力。在一次车队游行时，一颗子弹击中了座驾上的肯尼迪头部，瞬间，他的脑浆以放射状飞溅到几十米内的扇形区域，在电视上目睹了这一刻的美国老百姓都惊掉了下巴。与此同时，阴影中的某些人却微微翘起了嘴角，举起了酒杯。
随后的几年间，包括扣下板机的凶手和司法部长罗伯特·肯尼迪在内100多个证人，相继离奇死亡。这次总统遇刺案成了美国历史上最大的谜团和丑闻，也让调查这起案件的官员受到了强烈质疑。
电影《爱尔兰人》中暗示，肯尼迪的死和吉米·霍法有着直接的关系。可惜吉米还没高兴多久，自己就因被指控行贿罪而逮捕入狱。
4年后，吉米出狱，黑帮和工会的格局已经发生了天翻地覆的变化。曾经呼风唤雨的工会已经沦为了黑帮的附庸，这让吉米相当郁闷。在跪舔黑帮大佬和重振工会雄风之间，吉米毅然选择了后者。
此时工会已经不复当年的威风，此时的黑帮也已不把吉米放在眼里。吉米和黑帮闹掰之后，身兼工会和黑帮双重身份的男主角弗兰克感到无所适从，一边是自己最好的朋友吉米，一边是恩重如山的老大罗素。最终他会选择站在哪一边呢？
结局我就不剧透了。感兴趣的朋友请自行去片中寻找答案。
这部电影在讲述工会和黑帮的恩怨纠葛背后，另一层深意是什么呢？那就是影片的片名：爱尔兰人。
那是一群在自己的土地被迫害的爱尔兰人，为了寻找新生活而相互扶持，辗转抵达大洋彼岸的新大陆；而又是这样一群爱尔兰族裔，最终为了自己的利益勾心斗角，互相杀伐。其中人性的摇摆，令故事充满了戏剧的张力，成就了这部电影。
以上，就是我对这部电影的理解。</description></item><item><title>番茄工作法和Keep是绝配</title><link>https://sund.site/posts/2020/02/%E7%95%AA%E8%8C%84%E5%B7%A5%E4%BD%9C%E6%B3%95%E5%92%8Ckeep%E6%98%AF%E7%BB%9D%E9%85%8D/</link><pubDate>Mon, 17 Feb 2020 20:43:43 +0800</pubDate><guid>https://sund.site/posts/2020/02/%E7%95%AA%E8%8C%84%E5%B7%A5%E4%BD%9C%E6%B3%95%E5%92%8Ckeep%E6%98%AF%E7%BB%9D%E9%85%8D/</guid><description>要有路线图 平时在办公室里，大家可以面对面沟通，有问题、回复都可以迅速得到反馈，好像一个走正步的方队，每个人的节奏都可以从余光中确认。但是在家办公，这种节奏就乱掉了。
我最近正好转到数据团队做一些数据工程的工作，急需恶补很多知识。我在网上搜到几张数据工程师知识图谱和一些认证课程。按照自己的能力，我规划了学习路线，并且用Notion记录下来。这份路线图里包含了一些书籍和网络课程，能够帮我快速上手实践，以备在复工后快速进入状态。
寻找免费的学习资源 有了路线，就要去找学习资源，付费的电子书和网络教程很多，我想重点说说那些免费资源（抛开盗版不谈），比如著名的动物书出版商 O’Reilly 就有一大堆免费的正版技术类电子书可供下载。
另外，Youtube上的教学视频质量也非常高，对于快速上手一种工具或是搭建开发环境非常有帮助。（随便一搜就有很多成套的教学视频，不乏官方教学视频，比如 Google Cloud Platform 提供了很多教学短片）
我在Youtube还意外发现一些 健身Youtuber 们分享的健身教学视频，也非常适合闲暇时间提高姿势水平。
任务要和时间绑定 完成一个长计划的第一步，是拆解任务。工作中同事们总强调 Tasking （拆解任务）的重要性。要保证完成计划的质量，必须把计划按步骤拆解成可执行和回顾的小任务。相信喜欢折腾GTD之类效率工具的人很清楚其中的意义。但是在没有约束的家庭环境里，光拆解任务可能还不够，更重要的是把任务和时间绑定，给自己一个记录时间的习惯。
不局限于工具的番茄工作法 番茄工作法固然好，但是市面上很少真正提高效率的工具。手机上的番茄工作法App唯一给我的教训就是增加了我拿起手机的次数。所以我最后矬子里拔大个，选了Toggl 的 Mac桌面版，它自带番茄时钟可以很好的兼顾时间记录和定时提醒功能。我还尝试用NFC贴纸提高我记录时间的效率（主要记录做饭之类碎片的时间）。至于如何使用NFC贴纸，参考这篇《5 个实用生活场景，iPhone 上的 NFC 还能这么用》
利用番茄工作法的间歇时间做4分钟锻炼 番茄工作法每隔25分钟会有5分钟的休息时间，我通常利用这个间隙来做一组俯卧撑、平板支撑或者深蹲，Keep上有很多4分钟的燃脂训练，拿来配合番茄工作法使用效果更佳。
把平时忽略的碎片时间统计出来 发呆拖延的时间、做饭的时间，这些工作忙时不太关心的碎片时间，我利用这个大长假把他们统计了一下，我在去年年底制定了一个「2020年告别外卖」的计划。因为平时工作忙，想脱离外卖自己做饭，就要格外注意挑选制作时间短，食材储存容易的饮食方案。我也在Notion里新建了一个项目，来记录做饭的时间、各种食物的优缺点（有点强迫症）。待完成这个计划时我也会整理出来。
给娱乐时间限量 我平时很少看电视，最近又把吃灰半年的《歧路旅人》拿出来玩，我给自己规定的是每天必须天黑才能打开游戏机，而且玩到20%电量之前必须关机休息。这样每天娱乐时间就不会超过2个小时。
最近奥斯卡颁奖后，一批电影片单也出来了，不如趁这段时间把2019年错过的好电影也补一补。
用音乐和灯光隔离出个人空间 我在几个月前发的一篇文章《用一个模型理解什么是注意力的边缘》里已经分析过怎么用「聚光灯效应」和背景音乐来创造专注的环境，对这部分感兴趣的同学可以去阅读一下。
小结 综上，充分利用假期的时间去充电吧，要给自己指定任务、要有追踪任务的工具，多利用闲暇时间锻炼、多关注平时上班时没空去关注的生活细节，给2019年错过的好东西一个补救的机会。</description></item><item><title>如何用七天重建小汤山医院</title><link>https://sund.site/posts/2020/02/%E5%A6%82%E4%BD%95%E7%94%A8%E4%B8%83%E5%A4%A9%E9%87%8D%E5%BB%BA%E5%B0%8F%E6%B1%A4%E5%B1%B1%E5%8C%BB%E9%99%A2/</link><pubDate>Wed, 05 Feb 2020 22:41:23 +0800</pubDate><guid>https://sund.site/posts/2020/02/%E5%A6%82%E4%BD%95%E7%94%A8%E4%B8%83%E5%A4%A9%E9%87%8D%E5%BB%BA%E5%B0%8F%E6%B1%A4%E5%B1%B1%E5%8C%BB%E9%99%A2/</guid><description>苛刻的选址条件 在危机到来时，如何快速建成医院又尽可能降低无畏的成本。首当其冲要考虑的就是选址。选址最重要的是找到具备三个条件的地点：
市政系统成熟 交通便利 周边人口稀少 这三点中任何一点都有大批可选择的位置，但是要求三点同时具备就非常苛刻了。并且因为是传染病医院，还要关注供电保障、排水、排气安全和对周边居民的影响。
历史回顾：2003 年，北京小汤山在历史中留下了重要一笔。它距离最近的居民点 500 米，原为小汤山疗养院所在地，附近是一大片预留的发展用地，四周环境空旷，便于机械化的施工。京密引水渠在小汤山疗养院北 4 公里，可以让污水经过专门处理，不影响到北京市水源。
兼具「快速」与「实用」的模块化设计 医院的主要功能需求：医患分区分流，洁污分区分流。
为了满足疫情的需要，医院还要考虑到：施工的标准化、模块化，根据需要可以不断延伸。
最终方案定为中轴对称的鱼骨状布局。
医院由多个「H」型模块排列而成。其中，沿中轴线布置办公区域和医护人员通道，每个中心模块负责 4 个护理单元，每个护理单元内安置两列病房（ICU 病房、隔离病房、康复病房等）。
根据选址地形和现场已有设施，模块排列数量和每个护理单元的长度都可以进行调整。每个护理单元都是独立的标准模块，一方面有利于同时施工，各单位可以独立建好自己的模块后集中拼接，尽量减少交叉作业；另一方面也可以在发生疫情恶化或失火等紧急情况时，将该单元彻底封闭，保全医院其他单元。
患者从病房外周进出病区，医护人员从中轴核心经层层更衣和卫生通过区进入病房进行检查、治疗和看护。这样的功能结构能够严格控制空气的洁净梯次，保障医护人员卫生安全。
病房为污染区，医护工作区为半污染区，医护办公区为半清洁区，医护人员值班休息区域为清洁区。医护工作实行单向通过式流程：病房设有双层玻璃的送饭口，病人和医护人员的通道也各不相同，病人是通过病房门前半开放式的走廊通道进出病房，而医护人员则是从专用的工作通道进出。工作人员从清洁区到病房污染区，要经过几道的消毒，三次更衣。
工程实施 基于模块化设计的好处，医院可以同时由 6 家施工单位同时施工。
历史回顾：在 2003 年非典时期，设计团队采用了边画设计图边施工。受到场地和材料限制，每一段的设计图纸都有所不同，为了尽快出图，设计团队几乎是 24 小时接力画图。
小汤山当时主要是用板材，各家施工队使用的材料都不相同。武汉火神山医院这次采购了大量集装箱房搭建病房，统一规格，速度更快。 不过，集装箱下部的钢框架有可能导致病房与外面走廊之间出现门槛。根据小汤山医院经验，虚弱病人轮椅推行、移动式检查设备推行几率较大，要尽可能满足无障碍推行的使用需求。
武汉火神山医院还加装风扇来控制气流组织，使空气从中间的干净区域向两边污染区域单向流动。
为保护医院周围的环境不受污染，医院专门新建了污水处理站。病人的衣服、床单出来了以后先通过环氧乙烷消毒，消毒以后才拿去清洗，清洗后的水再进入到污水站处理。此外还有专门的垃圾处理装置对废弃物进行焚烧处理。
人员管理 小汤山医院当年出台了《院内预防感染工作规则》《出入流程》《防护守则》，共计 3 章 24 节，约 8000 字，印刷成 46 页的小册子，全院人手一册。包含了医护人员的防护穿戴、与病人的交谈距离、洗手要达到 3 分钟、会议要在室外、洗澡流程、清洁程序、垃圾处理条例、生活区行为守则等等。甚至包括交通规则：医护人员在各区之间的行走路线，在污染区面对面行走时如何避让等等。还规定：违反者将受到通报批评，严重者以军法惩处。
纪念小汤山医院最好的方式是让它成为历史 当小汤山医院的设计师黄锡璆说出「没想到当年的设计图还能用上」时，心情一定很复杂。
我在凤凰网 7 年前录制的纪录片《非典十年祭》中看到这样一段话：
这如同金字塔一般，从上到下的公共卫生模式，原本是为了统一调配资源，抵御各类传染性流行疾病，然而，2003 年的那个春天，它完全失灵了。
纪录片的结尾处，一位医生感叹道「再也不可能（出现）像SARS那样的情况了」。
希望这用无数人命堆砌出来的经验，不要下一次面对危机时再次失灵。
我们应该从历史中学会的，不能仅是如何重建一座医院。</description></item><item><title>谣言的利与弊</title><link>https://sund.site/posts/2020/01/%E8%B0%A3%E8%A8%80%E7%9A%84%E5%88%A9%E4%B8%8E%E5%BC%8A/</link><pubDate>Mon, 27 Jan 2020 13:32:46 +0800</pubDate><guid>https://sund.site/posts/2020/01/%E8%B0%A3%E8%A8%80%E7%9A%84%E5%88%A9%E4%B8%8E%E5%BC%8A/</guid><description>Ted Chiang（姜峯楠）的小说《双面真相》里有个主人公吉金基，他出生于部落，从小跟着欧洲殖民者学习写字，是部落里唯一识字的人。有一天欧洲殖民者要求多个部落必须按照血缘关系合并起来，以方便殖民管理。部落长老赛维认为自己的部落和临近的部落是同一个祖先，所以应该合并在一起，但是另一个部落却不同意这种说法。
吉金基想到欧洲人最早来到这里时采访了当地许多老人，那些如今已故的部落老人想必知道自己的部落究竟是谁的后代吧。于是，吉金基跑去殖民者的营地找到了当年的记录，根据记载，长老赛维确实记错了自己的祖先。
回到部落后，赛维却不同意吉金基的看法，他认为吉金基的头脑已经被欧洲人同化了。「欧洲人只相信纸面上的文字，而不重视此时此刻部落里人们的感受。至于部落的祖先究竟是谁并不重要，重要的是当下的部落里同族们的共同利益」。
Ted Chiang 在后记里说，人们在「书面文化」出现之前一直延续的是「口头文化」，比起书面文化更重视文字记录的事实本身，口头文化更重视「此时此刻人们的感受」，真相可以随时修改变化，以适应人们的情感需要。
谣言也是一种口头文化，他没有确凿依据，凭借人们口口相传。
谣言承载了人们此时此刻的感受。把「不信谣，不传谣」当作一种正确的人，可能忽略了谣言的这一重作用：谣言是真相模糊环境的必要补充，是一群人，面对现实的头脑风暴。
公众有权质疑、批驳任何报道乃至政府公告的真实性，公民发短信或者转发相关帖子，即使有不实之处，也应被视作自保或者行使监督权，政府部门只能用更加公开透明的信息来平息大家的忧虑，消除不实之言。 ——胡泳，《谣言，作为一种社会抗议》
同样，知乎用户 @韦易笑 的评论：
不传谣本身就是一个严重的传播学悖论，一条未经证实的信息，恰恰需要通过广泛传播、反复交叉比对，最终才能证实或者证伪，去伪存真，辨邪留正。所以未经证明的消息只能称为流言而不是谣言，除非有人故意造谣，这当然有罪，明知是谣言还传播当然也不该，但自己主官判断为真又无法证伪的话，传播无可厚非，因为大部分人只有能力证明自己专业领域内的流言是否是属实，对于专业领域外的流言，只有能力传播没有能力客观鉴别。如果严格要求所有人无法证明就不能传播的话，那么消息就无法通过充分交流比对而去伪存真，大家每天说话的内容也只是不断的重复zf通稿和砖家权威的发言，从而丧失任自我辨别的能力。
你还为「不造谣，不传谣」背书，可能就要提防自己是否过度依赖权威，丧失了亲自辨别真相的能力。</description></item><item><title>如何练习双拼输入法</title><link>https://sund.site/posts/2020/01/%E5%A6%82%E4%BD%95%E7%BB%83%E4%B9%A0%E5%8F%8C%E6%8B%BC%E8%BE%93%E5%85%A5%E6%B3%95/</link><pubDate>Sun, 19 Jan 2020 07:21:17 +0800</pubDate><guid>https://sund.site/posts/2020/01/%E5%A6%82%E4%BD%95%E7%BB%83%E4%B9%A0%E5%8F%8C%E6%8B%BC%E8%BE%93%E5%85%A5%E6%B3%95/</guid><description>双拼输入法是什么？ 「双拼输入法」类似于我们大多人使用的全拼输入法，也是一种基于汉语拼音的汉字输入方案。
让我们先来复习一下小学的知识😂，任何一个汉字都有对应的拼音，拼音由声母和韵母组成。
声母除了zh，sh，ch之外，都是由单个字母表示。例如「拼」字的声母p。
韵母通常由1到4个字母组成，例如拼字的韵母就是in。
通常大家用的全拼输入法，韵母部分要全部打出来（现代输入法通常可以智能联想，但是大多数情况下都需要你打出大部分字母），比如输入「拼」你需要打三个键p，i，n。
双拼输入法就是为了解决全拼输入法在输入韵母时低效率的问题。双拼的开发者试图把汉语拼音的全部韵母映射到键盘的所有按键上，这样每次输入一个汉字，只需要输入两个按键（声母+韵母）。
例如，我把ing映射到键盘的字母K上，把ang映射到字母H上。输入「乒乓」时就是下面的效果。
现在比较流行的双拼方案有很多，我选择了比较受大家青睐的小鹤双拼方案。它的键盘布局是下面这样的（初次看你可能会觉得不适……别急，读完这篇文章学起来就会很轻松）。
双拼输入法能提高打字效率吗？ 学习之前我们通常有个疑问：这玩意真能提高打字效率？
我带着这个疑问，找到了一个测试汉字打字速度的网站，我通过一个月的使用，对比了前后的输入速度，得出的答案让我确信写这篇文章能够帮助你通过双拼提高打字效率。（不要吐槽我每分钟字数太少，测速网站采用了古诗词作为输入，一定程度上屏蔽输入法智能联想的效果。你可以亲自去尝试一下😛）
（KPM=每分钟按键次数，BPM=每分钟退格次数）
开始学习小鹤双拼 学习知识之前，先了解它的原理会帮助我们更容易记忆它。理解原理看似是增加了额外的负担，但是死记硬背的知识往往难以形成结构化的记忆，很容易遗忘。
学习小鹤双拼前，我们先要了解三件事：
声母的按键规律 韵母的按键规律 键盘布局的规律 声母的规律 前面提到，汉语拼音声母大多数是单个字母，除了三个特别的zh，sh，ch。小鹤双拼和全拼一样，直接按字母键就可以输入对应的声母，那三个特别的声母映射到键盘的V，U，I上。
之所以映射成zh=V，sh=U，ch=I，是考虑到两个因素：
这三个字母（V，U，I）都没有对应声母 这三个字母距离食指和中指都比较近 那有人要问了，为什么不把zh放在Z上，ch放在C上，sh放在S上，这样更好记忆呀？这是因为会造成输入的不一致性。比如O对应的韵母是uo，你输入了ZO，那输入法就无法分辨你输入的是zhuo（捉），还是zuo（作）。如此一来就违背了双拼输入法一个汉字只要输入两个键的原则。
所以，声母部分，你只要记住，zh，sh，ch，对应的是V，U，I就可以了。其他和全拼一毛一样。
韵母的规律 汉语拼音的韵母有一些很特殊，例如ua 和ia前边的声母是互斥的。以jia（加）为例，你肯定没听过jua的组合（可能小岳岳除外😂）。所以ua和ia前边的声母不可能是同一个字母，那么即使把这两个韵母放在同一个按键上，也不会出现输入汉字时的混淆。
符合这种规律的韵母一共有7对，小鹤双拼的按键分布是下面这样的。
为了方便记忆，小鹤双拼让每个按键对应的声母和其中一个韵母能组合成有意义的汉字发音。所以你只需按口诀或文末提到的练习工具针对练习即可，其中需特殊训练的只有上面的7个按键。
有一些汉字没有声母（零声母），这种情况只要会全拼输入法就可以一秒解决：
单字母韵母，如： 啊＝aa 哦=oo 额=ee
双字母韵母，如： 爱＝ai 恩=en 欧=ou
三字母韵母，零声母+韵母所在键，如： 昂＝ah
键盘布局的规律 一些不太常用的韵母，小鹤双拼的作者把它们放到了键盘的边边角角，例如iu，ie，ou，我起初很容易忘记，偶尔用到也想不起这些韵母的位置。所以这三个特殊按键，我在键盘上用蓝色高亮标记起来。结合上文提到的特殊按键，这个键盘看起来就是这样三层结构：
第一层是声母，其中特殊的（红色高亮）是V，U，I 第二层是韵母，其中特殊的（黄色高亮）是T，O，S，K，L，X，V 第三层是易忘按键（蓝色高亮），它们分别是Q，P，Z 你可以把这张图保存起来，放在桌面壁纸里或是打印出来放在键盘前边，练习时用来对照。
记忆工具 小鹤双拼官网提供了多种练习工具。你可以微信扫一扫这个小程序，随时用手机练习。
桌面端推荐一个在线的网页双拼练习工具，地址是 https://api.ihint.me/shuang/。
测试工具 为了测试打字速度，你可以使用上文提到的在线网页打字测速工具，地址是https://dz.wubidz.cn/。
小结 本文以小鹤双拼为例，为你分析了汉语拼音组合原理和双拼输入法的映射规律。未来你在学习任何拼音输入法时都可以按照这种规律，以分层结构提高对键盘布局的认识。
从练习时间角度，掌握双拼要一周左右，超过全拼打字速度也只需要两周多。所以双拼是非常值得学习的输入方案。
目前所有平台都有比较成熟的双拼输入法App，例如iOS和Mac系统自带的双拼输入法、Google的移动端输入法Gboard。某些国产输入法，在我的测试下经常会出现「过度联想」的问题，比如输入一个字母，自动联想出一个甚至更多汉字，这和双拼输入法一个汉字两个字母的敲键节奏稍有违背，我个人倾向于在移动端使用Gboard或默认输入法。
你若有更好的想法和推荐，欢迎在留言区留言。</description></item><item><title>宁波见闻</title><link>https://sund.site/posts/2020/01/%E5%AE%81%E6%B3%A2%E8%A7%81%E9%97%BB/</link><pubDate>Sun, 05 Jan 2020 20:49:47 +0800</pubDate><guid>https://sund.site/posts/2020/01/%E5%AE%81%E6%B3%A2%E8%A7%81%E9%97%BB/</guid><description>木匠的工具箱 偶然在宁波博物馆发现一个箱子。这是木匠的工具箱，有点像很多格子的单肩包。外侧可以放几把不同尺寸的刨子，内侧用来放锯子和一些长柄的工具。下层的抽屉还可以放些锉刀、凿子之类的小物件。
有了它，木匠就可以拎包上门。过去很多行业的手艺人都有一套这样的工具箱。木匠比较不同的是，这个箱子本身也是木制的，这个箱子就是他展示给客户的第一印象，箱子本身代表了木匠的能力和喜好。
现在搞技术的人，也是手艺人，但已经很少把自己的「工具箱」秀给别人看了。
我前几天跟鲍勃聊天，他最近一直忙着装修自己家。他家全部是由他亲自设计的。虽然家具不是他做的，干活儿的也是请来的工人，但是那些方案的确是出自他的脑袋，所以说是他亲自装修也一点都没错。
那是什么决定了哪些东西是你买来的，哪些是你自己设计的呢？重要的一定不是物品怎么被造出来，而是物品里有没有包含你的思考吧。当一堆零件通过你的智慧彼此关联在一起，产生了「整体大于局部之和」的效果，这个物品就具有了你的一部分主张。
任何物品里都有设计者的主张，服务也不例外。
我经常觉得宁波的地铁和餐厅的服务十分不友好：明明服务人员就在旁边站着，你向他求助，他却只会告诉你去扫一下二维码。强制你扫二维码的服务，它们背后的主张都是
为了省点人力成本，就暂且给你添点麻烦吧。
清淤船和ASMR 经过宁波老外滩，看到清淤船在江上作业。围观的路人有几十人，都看得兴起。
看着清淤船从江里把淤泥挖出来，再倾倒在旁边的船上，莫名有种视觉ASMR的感觉。好像人天生就对「疏通」这件事会有快感（比如挖鼻孔🤣）。
巧合的是我之前很喜欢听静电容键盘敲击的声音。好像两手紧握再松开时，空气从两手中间被挤压时发出的声音。我经过宁波博物馆附近的一处马路，突然听到汽车经过石头路面时发出的声音，竟然有些相似。
点击收听</description></item><item><title>一篇心得，开始2020年写作之旅</title><link>https://sund.site/posts/2019/12/%E4%B8%80%E7%AF%87%E5%BF%83%E5%BE%97%E5%BC%80%E5%A7%8B2020%E5%B9%B4%E5%86%99%E4%BD%9C%E4%B9%8B%E6%97%85/</link><pubDate>Sat, 28 Dec 2019 18:49:56 +0800</pubDate><guid>https://sund.site/posts/2019/12/%E4%B8%80%E7%AF%87%E5%BF%83%E5%BE%97%E5%BC%80%E5%A7%8B2020%E5%B9%B4%E5%86%99%E4%BD%9C%E4%B9%8B%E6%97%85/</guid><description>养成写作的习惯，会使人生获益无穷。写作可以让我们避免浅显的认识，在搜索引擎几秒钟就能得到答案的时代，学会向自己提问是深度思考的第一步。我真的理清脉络了吗？是不是像我认为的那样？写作者分享思想，同时也帮助自己思考。
写作让我们在和他人交流时懂得去理解，不是急着去回应。常写作的人会时刻收集素材，养成倾听的习惯。写作的人喜欢片刻的沉默，胜过表面的热闹。
会说话的人就会写作。很多人拒绝写作，是觉得自己文笔不好，其实白话口语一样能写出好文章，精巧的构思，敏锐的嗅觉，缜密的思考，哪一种写作风格都有适合自己的路。
三个月前，我开始刻意培养写作的习惯。这篇文章，我要与你分享这段时间的心得，这些话，有的来自我个人的体会，有的是来自记录的笔记，有的出自著名作家、编剧，我把它们整理出来，希望帮你启动写作之旅。
写文章的关键是什么？ 诗人彼得·迈因克说，文学的表现力来自专注、巧妙和精细。
每篇文章都要专注于一点，这一点就是主题，内容都在围绕这一点展开。想象一本书带给过你的感受，那就是它传达给你的主题，论文里它是论点，故事里它是基调，评论里它是观点。
文章还要巧妙地搭建结构，像电影导演的运镜，把观众的视线引向你希望的方向，带领读者走向你预设的终点。
好的文笔是精细的提炼，字斟句酌的金句，给读者的是惊喜，是寻常的陌生感。
如何寻找主题？ 关注每个细节，每个引起你兴趣、兴奋、疑惑、恐惧、异物感的东西。读书是最简单的方法，除此之外，留心生活中有趣的短文、诗句、格言、广告、寓言、祈祷、标语、微博、短信……都是灵感的源泉。不把自己的生活局限在网络上，线下和朋友交流，参加有趣的活动、认识有趣的人、体验不一样的生活，都能让你产生写作的冲动。
不断向自己提问，即便是再小的问题，也有无限挖掘下去的潜力。不断提出问题尝试去回答！搜索网络、求助他人、翻阅资料，总之在写出答案之前，你一定是深思熟虑过，不要给读者向你提问的机会，穷尽所有可能的路径、绞尽脑汁，这样的文章才是系统性思考过的、有价值的，对得起自己和读者的。
一旦养成这样的习惯，不只是写作，生活的一切都从日复一日的重复中苏醒过来了。
如何搭建文章的结构？ 有了主题，接下来的任务是布局，美感出自秩序。生活是个局，工作也是个局，你的文章更是让读者短暂逃离现实的局。
首先，开头请一定要激发读者强烈的兴趣，可以设置一个谜题让读者自行去文中寻找答案；也可以是一个具体的场景，让读者身临其境后逐渐察觉异样。请看小说《追风筝的人》的开头：
我成为今天的我，是在1975年某个阴云密布的寒冷冬日，那年我十二岁。
是不是让人很好奇，想要读下去。即使你的文章是知识分享，也要注重故事性，从古至今流传下来的道理，都蕴含在故事里。
其次，不要倾倒细节，要有一个看不见的线牵引着读者，可以是时间、空间、疑问。如果你要抛出一个观点，就全文都以这个观点为核心，让所有文字都通向那个观点；如果你要构思一个的故事，请把故事的结构隐藏起来，让读者自行去发现。
例如在《白夜行》中，两位主角活在各自的世界里，东野圭吾用并行故事线构成了看不见的线索，让读者自行脑补两人关系，画出故事的来龙去脉。所以，请把发现真理的过程交给读者。
最后，既要让文字满足读者期望，又不可预测。这要求乍看有点奢侈。人们不喜欢在故事里重复生活，也不喜欢完全脱离生活的故事。请不要平铺直叙，更不要太跳脱，要给读者制造舒适区，再打破它。读文章就像谈恋爱：「男人彻底地懂得了一个女人之后，是不会爱她的」。（出自张爱玲的短篇小说）
如何锻炼文笔？ 文笔是锦上添花，开始写作前请不要纠结，尤其是知识分享、论述观点类文章，比文笔更重要的是逻辑。
第二，一句自我介绍，一条微博，都是最小粒度的写作。每次发微博、Twitter、朋友圈，都请字斟句酌，变成语言的艺术家。
有些词语的周围需要全然安静，给它们足够的空间，就好比照片，有些照片周围不需要陪衬。
——阿摩司·奥兹
每次写作，请有意识地删除多余的副词、形容词，如果写故事，把那些形容感受的词（如「沮丧」、「快乐」）替换成具体的动作和神态。原研哉在《设计中的设计》说，「我们通常所说的五感，是非常不准确的，用指尖轻轻触碰的触感，和用手用力按压的触感肯定是不一样的」。所以，请去描写感受，不要概括感受。
最后，请熟练使用口语写作，避免官方用词。尤其练习使用俗语、方言、俚语或其他习语。在我们国家，经常看到：「只有……才能」、「坚决落实」、「时刻牢记」。请把这些短语从脑袋里清出去，除非你打算写反乌托邦题材……
写在最后 上面这些技巧，都是写作的外功，要理解它的内功，还是要长期保持写作者的心态。写作是一种自我重建——这句话出自新京报的一篇文章《纪念王小波》，我非常喜欢下面这段话，最后分享给你：
对一个人来说，过去那种统一式教育所打造的自我，是一种童稚状态，人只有通过自我的重建，才能走向成熟。这种重建是一种孤独的旅程，一旦开始，就注定没有终点，你将作为「一个人」而不是「我们」中的一员，来面对世界。</description></item><item><title>互联网曾经有另一种可能</title><link>https://sund.site/posts/2019/12/%E4%BA%92%E8%81%94%E7%BD%91%E6%9B%BE%E7%BB%8F%E6%9C%89%E5%8F%A6%E4%B8%80%E7%A7%8D%E5%8F%AF%E8%83%BD/</link><pubDate>Sun, 15 Dec 2019 16:42:22 +0800</pubDate><guid>https://sund.site/posts/2019/12/%E4%BA%92%E8%81%94%E7%BD%91%E6%9B%BE%E7%BB%8F%E6%9C%89%E5%8F%A6%E4%B8%80%E7%A7%8D%E5%8F%AF%E8%83%BD/</guid><description>1965年，泰德·尼尔森（Ted Nelson）在提交给美国计算机协会的论文中提到一种将各种内容链接在一起的技术——超文本（Hypertext），如今超文本俨然已是互联网大厦的基石。但人们熟知的超文本和当初尼尔森预想的样子却有着天壤之别——在尼尔森的脑海中，一个失落的平行世界里，有着万维网的另一种可能。
泰德·尼尔森 尼尔森从小就是个爱幻想的孩子。深受导演父亲的影响，尼尔森酷爱写作，但他厌恶线性、渐进式的叙事结构，他希望所有资料都以一种混乱的，流动的形式保存起来。这样，每当他需要这些资料时，他就可以随时重建它们。如今已经80岁的尼尔森仍保存着数千小时自己的录音和录像，以备后人理解他的想法。这些录音和录像，同样也是没有目录结构的……
层级结构是邪恶的 尼尔森把对传统结构的抵制延续到了计算机时代。1960年，尼尔森在哈佛读研究生期间试图自己编写一个拥有「并排比较」、「版本回溯」和「按大纲修改」功能的写作工具，但因为非科班出身和学业繁忙，最终放弃了开发。当时哈佛大学正在开发一套计算机辅助教学系统，尼尔森觉得那种线性的、机械的教学系统，是对计算机和教学的双重侮辱。思维应该沿着不同的路径探索，而不是以结构定义好的方式。
尼尔森在90年代曾对苹果公司的 Macintosh 操作系统也持有同样的评价：
在我看来，Macintosh 和 PC 没有差别。Macintosh 的交互做得更好，但是它和 PC 都是一样的概念结构，都是由 PARC 用户界面（PARC User Interface, PUI）与普通的层级架构目录（即如今所说的「文件夹」）组成。
他们告诉你文件是分层级的；最基础的程序就是文字处理、数据库与电子表格；你必须使用「应用」；你必须费力地把自己真正想做的事处理成层级架构的文件，用「特定的应用」打开它们。实际上，这些陈述都夹杂着谎言。他们描述了计算机的现况，但没说它可以是什么样，又应该是什么样。
——摘自《离线 OFFLINE》ISSUE 23，上都计划——失落的超文本，泰德·尼尔森语录
尼尔森的超文本设想 时间回到1965年，尼尔森把自己的设想——一个由「超文本」和「压缩列表」技术构成的非顺序写作系统，发表在了全国计算机协会的论文中。起初这篇论文并没有引起太多人关注，但超文本这个词却意外被历史保留了下来。尼尔森在不久之后发起了名为「上都计划」的项目。上都（Xanadu）的名字来自诗人萨缪尔·柯勒律治（Samuel Taylor Coleridge）在他的诗中幻想的忽必烈在元上都修建的雄伟宫殿。
忽必烈汗在上都造建，富丽堂皇的穹顶宫殿，伴有圣河阿尔佛，穿过深不可测的岩洞，一直流入无光之海
——萨缪尔·柯勒律治
在尼尔森的构想中，上都计划是一个拥有非线形结构的交叉索引系统——
任何媒体内容双向链接，可以在平行文本之间自由跳转，一直追溯到内容的源头 拥有深度的版本管理，每次对文本的修改都以版本号记录下来，以便追溯变更历史 版权授权机制，由于历史可追溯，所以内容理论上都可以追溯到原作者 可视化的差异对比，不同版本的内容可以比较差异，基于原文的修改可以同步到引文 创作者可以基于已有内容进行增量出版，类似滚动更新机制 尼尔森认为，层级的目录结构是一种专制。创作者应该时刻与媒体内容保持联系，而不应该关心它保存在哪。在尼尔森的理想里，文件夹是罪恶的，基于文件夹的树形目录结构更是丑陋。它代表了人类根深蒂固的层级观念在虚拟世界的投影。建立于层级观念之上，思维只会被束缚，真正的计算机，应该给予人类自由。
尼尔森更不喜欢别人用基于超文本概念创造出来的HTML（HyperText Markup Language，超文本标记语言），尼尔森批评道：
它（HTML）的链接容易失效且只能单向链出，它的引文无法追溯，没有版本控制，也没有版权管理系统。
几经辗转，在资金等各方面条件都极其匮乏的情况下，上都计划在2014年终于发布了一个功能不完备的演示版本，我们可以在浏览器访问上都计划的官网查看它的最新状态。尼尔森还开通 Youtube 频道 TheTedNelson 给大众布道，可惜截止到我写下这些字的时候，订阅人数还不足6000，在中文世界更是鲜有人报道。
如今的万维网已技术沉淀多年，尼尔森的计划在不少专业人士看来，如柯勒律治的诗一般，只是天方夜谭。
超文本不是技术，是文学。文学是指那些我们包装并存储的信息（一开始是书籍、报纸和杂志，现在还有电影、录音、CD-ROM 等）。未来的文学类型决定了人类将被如何记录和理解。这些还轮不到「技术专家」来操心。
——《离线 OFFLINE》ISSUE 23，上都计划——失落的超文本，泰德·尼尔森语录
对当今互联网的启发 在现在的互联网技术体系内，尼尔森的理想几乎不可能成为现实。但就像《人类简史》里的尼安德特人，种族虽然消亡，基因却融入了智人的血脉。上都计划以另一种形式融入了现在互联网的产品中。</description></item><item><title>我们的隐私被谁拿走了</title><link>https://sund.site/posts/2019/12/%E6%88%91%E4%BB%AC%E7%9A%84%E9%9A%90%E7%A7%81%E8%A2%AB%E8%B0%81%E6%8B%BF%E8%B5%B0%E4%BA%86/</link><pubDate>Sun, 08 Dec 2019 02:41:29 +0800</pubDate><guid>https://sund.site/posts/2019/12/%E6%88%91%E4%BB%AC%E7%9A%84%E9%9A%90%E7%A7%81%E8%A2%AB%E8%B0%81%E6%8B%BF%E8%B5%B0%E4%BA%86/</guid><description>斯诺登的自传《永久记录》已经上架各大阅读平台。这本书让斯诺登的名字从棱镜门之后又一次出现在了公众视野里。书里按时间线叙述了他的童年和工程师父亲学习计算机，到他加入中情局，最后曝光棱镜计划出逃俄罗斯的全过程。这本书是一个青年成长为公民，并用自己的勇气揭露科技霸权的心路历程。我特别注意到这部书里提到了一个概念——个人信息的元数据，元数据是一个人在网络上留下的痕迹，不管是对情报机构，还是对商业公司，都是要极力获取的重要信息。
元数据是我的聊天内容或个人资料吗？ 元数据不是你聊天的内容也不是你的资料，更不是你在网上发布了什么消息，元数据是更底层的数据，斯诺登在书里这样描述它：
最直接理解（元数据）的方式是活动数据：你在设备上从事活动、手机自动运行的记录。举例来说，手机元数据可能包括：来电日期与时间、通话时长、来电号码，通话位置……
通过分析你不同设备的元数据，监视者能得知你昨晚入睡与今早起床的时间、每天逛了哪些地方、在哪里待了多久，以及你接触过的对象有谁，谁又与你联系过。
为什么你的元数据如此重要？ 事实上，元数据不仅仅赋予了数据监视者全面窥探你隐私的权利，在2002年斯皮尔伯格拍摄的电影《少数派报告》中有这样的桥段（有剧透）：未来的某一天，人类能够利用计算机预测可能的犯罪，并在「嫌疑犯」准备实施犯罪前进行抓捕，幕后黑手利用这一机制构陷男主角，使其成为系统认定的抓捕对象。
科幻故事离我们太远，你可能觉得现实中没有这样的系统。那么请看一些事实吧：
我国征信系统已为9.7亿自然人建信用档案 无偿献血、公租房申请、ETC欠费、乱闯红灯、频繁跳槽等行为纳入个人征信系统 中国安装了1.76亿个监控摄像头，这市场还在增长 社交软件 Instagram 被怀疑窃听用户麦克风 Facebook 承认监听用户语音，将语音资料转录为文字 …… 斯诺登在《永久记录》中提到，美国中央情报局的监控系统，可以随时打开全球任何人的摄像头、麦克风和查看电脑上正在做的事、调查他的上网记录、孩子的入学申请……一些中情局同事甚至用截取到的女性裸照作为内部的「流通货币」彼此交换。
机器并不像人一样学习，人工智能也没有真正的智能 下面我想站在另一个角度审视当年的棱镜门事件。现代信息技术发明了一些词汇方便我们理解技术的含义，比如人工智能、机器学习，其中最有迷惑性的是「预测」。王垠的文章《机器与人类视觉能力的差距》解释了机器所谓「识别」并不是真的「理解」。用斯诺登的话说：计算机的预测，仅仅是对数据的一种操弄。 就像《少数派报告》的故事一样，最终决定机器的预测结果是否正确的关键，还在于人——掌控着机器的那些人。技术名词在迷惑我们的同时，赋予了科技公司和大型机构更多权力，冠以科技发展之名。
每个人都是潜在的罪犯：尽管我们自己没有察觉到，但多数人的生活绝不是黑白分明的，我们会任意穿越马路、未做好垃圾分类、在人行道骑自行车，甚至非法下载盗版等。换句话说，一旦法律贯彻到底，所有人都会变成罪犯。
——爱德华·斯诺登，《永久记录》
怎么保护我的元数据（个人隐私）？ 如果你也意识到了个人隐私的重要性，那么是时候做点什么保护自己了。在当下，个人想要完全隐藏自己的上网行为几乎是不可能的。这也是为什么美国爆出棱镜门之后，全世界各国都把保护个人信息提上了政府议程。但是我们仍然可以通过一些手段，提高监视者作恶的成本。我为你整理了一些工具和上网习惯，它们只是给你提供一种思路，希望你能不局限于这些手段，在便利和隐私之间寻求到属于自己的平衡。
使用反追踪的浏览器插件 每当你点击一个网站页面，大部分网站会悄悄给百度、Google 等公司发送你的上网行为信息，隐私獾（Privacy Badger）这个浏览器插件能帮你屏蔽掉广告和用户行为追踪。
确保所有通讯数据都有加密 从棱镜门之后，全世界大部分网站都提供了 Https 方式的数据加密访问，如果你访问的陌生网站没有支持 Https，请尽量不要把任何个人信息交给它。
聊天软件是除了浏览器之外第二大上网工具，一天世界曾经整理了一个聊天软件安全性的表格，请参考选择适合自己的聊天工具（「人生最痛苦的是梦醒了无路可走」——鲁迅）
尽量不填写真实的个人信息 很多网站都要你提供个人信息，请遵守「如非必要，一律虚构」的原则。
最近微信更新了一个保护隐私的功能，你可以在微信第三方登录时选择随机生成的昵称和头像，不妨试试。
去除照片 EXIF 信息 你拍摄的照片里隐含了你的位置和设备信息，有新闻报道犯罪分子利用照片 EXIF 信息追踪女性家庭住址。提供类似功能的工具很多，日常用微信传照片给陌生人，记得不要发送原图。
尽量不用公共 WiFi 值得一提的是，自己家的 WiFi 也时不时换一下密码。现在随便下载个黑客软件进入你家 WiFi 截取你流量搞个中间人攻击根本没有技术含量。
「盯紧」摄像头 以前某个国产社交软件后台启动摄像头，并把视频传到网络上。现在都能搜到当年泄露的部分女孩子只穿内衣，在不知情时拍摄的视频。请在非必要时，不给任何 App 摄像头、麦克风或任何读取你敏感信息的权限。
DNS over HTTPS 虽然你访问网站的流量是被 HTTPS 加密了，但是你访问任何网站前，你的设备会请求 DNS 服务器解析网站域名（好比邮寄信件时，邮局把你的邮编解析成真实的地区），这些信息被不法分子（？）拦截篡改，会误导你访问到不相关的地址上去。所以最近 Firefox 和 Chrome 两家浏览器都内置了 DNS over HTTPS 功能，开启后加密所有 DNS 域名解析流量。但是前提是你的 DNS 服务器也支持，你可以尝试 Cloudflare 的服务，其DNS地址为 1.</description></item><item><title>Kevin Kelly's Hacking 和 《列子天瑞》的盗亦有道</title><link>https://sund.site/posts/2019/12/kevin-kellys-hacking-%E5%92%8C-%E5%88%97%E5%AD%90%E5%A4%A9%E7%91%9E%E7%9A%84%E7%9B%97%E4%BA%A6%E6%9C%89%E9%81%93/</link><pubDate>Thu, 05 Dec 2019 23:15:43 +0800</pubDate><guid>https://sund.site/posts/2019/12/kevin-kellys-hacking-%E5%92%8C-%E5%88%97%E5%AD%90%E5%A4%A9%E7%91%9E%E7%9A%84%E7%9B%97%E4%BA%A6%E6%9C%89%E9%81%93/</guid><description>凯文凯利在《失控》中有一句话：
The nature of life is to delight in all possible loopholes. Every creature is in some way hacking a living by reinterpreting the rules.
生命的本性就是喜爱一切可利用的「漏洞」，每个造物都在通过重新诠释规则来谋求生存。
无独有偶，《列子·天瑞》里有一个故事。宋国的向氏问齐国的国氏，如何变得富裕。国氏就说：「吾善为盗。始吾为盗也，一年而给，二年而足，三年大穰」，向氏一听原来诀窍就是盗，就去学着入室偷窃，结果被抓住问罪，家里的财物都被没收了。
向氏气冲冲地跑去质问国氏，国氏解释说了下面这段话。
吾闻天有时，地有利。吾盗天地之时利……夫禾稼、土木、禽兽、鱼鳖，皆天之所生，岂吾之所有？然吾盗天而亡殃。
原来国氏所谓「盗」，并不是盗窃财物，而是盗天地之时利。这里的盗字，正好对应了英语里的 &amp;ldquo;Hacking&amp;rdquo;。凯文凯利的 &amp;ldquo;hacking a living by reinterpreting the rules&amp;rdquo;，正是列子所谓「万物自天成，盗者本无心」。</description></item><item><title>为 Mac OS 10.15 开启 HiDPI，让 2K 显示器更舒适</title><link>https://sund.site/posts/2019/11/%E4%B8%BA-mac-os-10.15-%E5%BC%80%E5%90%AF-hidpi%E8%AE%A9-2k-%E6%98%BE%E7%A4%BA%E5%99%A8%E6%9B%B4%E8%88%92%E9%80%82/</link><pubDate>Sun, 24 Nov 2019 16:11:00 +0800</pubDate><guid>https://sund.site/posts/2019/11/%E4%B8%BA-mac-os-10.15-%E5%BC%80%E5%90%AF-hidpi%E8%AE%A9-2k-%E6%98%BE%E7%A4%BA%E5%99%A8%E6%9B%B4%E8%88%92%E9%80%82/</guid><description>以前手抖买了台 Dell P2416D 显示器，接上 Macbook 发现原生的分辨率设置在 2K 显示器上字体很小，换成 1080P 分辨率显示效果又特别模糊。上网查了一下发现可以为 Macbook 强行开启 HiDPI。下文的教程结合了 Github 上用户ZeRo° Xu 在 一键开启HiDPI脚本 里的 Github Issue 和一篇博文 《为 mac 连接的 2k 显示器开启 HiDPI》。
什么是 HiDPI 引用自 Github 用户 ZeRo° Xu ：
它使用横纵 2 个物理像素也就是 4 个物理像素来显示 1 个像素区域，结果就是图像的细节得到翻倍、更清晰、边缘更平滑。
拿 13 寸的 MacBook Pro 举例，它的屏幕物理分辨率是 2560 x 1600，所以原生的 HIDPI 分辨率就是 1280x800。更高的一档 1440x900 hidpi 缩放分辨率，则是虚拟出一个 2880x1800 的分辨率，再进行软缩放输入。所以你能发现苹果的电脑总是有很高的分辨率。
好了，既然你的屏幕是 1080p，本身就没有那么多像素去合成 HIDPI，如果以原生的显示计算，你这屏幕的 1080p 分辨率应该是 960x540，这么低的分辨率你是没法用的，所以就有了这个脚本。
这个脚本的功能是虚拟出比你的屏幕物理分辨率更高的假分辨率，也就是你看到的 3360 x 1888，这样你就可以使用 1680 x 944 hidpi 这个缩放分辨率了。</description></item><item><title>抛弃笔记本，完全用标签管理笔记有什么需要注意的</title><link>https://sund.site/posts/2019/11/%E6%8A%9B%E5%BC%83%E7%AC%94%E8%AE%B0%E6%9C%AC%E5%AE%8C%E5%85%A8%E7%94%A8%E6%A0%87%E7%AD%BE%E7%AE%A1%E7%90%86%E7%AC%94%E8%AE%B0%E6%9C%89%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84/</link><pubDate>Mon, 18 Nov 2019 13:49:00 +0800</pubDate><guid>https://sund.site/posts/2019/11/%E6%8A%9B%E5%BC%83%E7%AC%94%E8%AE%B0%E6%9C%AC%E5%AE%8C%E5%85%A8%E7%94%A8%E6%A0%87%E7%AD%BE%E7%AE%A1%E7%90%86%E7%AC%94%E8%AE%B0%E6%9C%89%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84/</guid><description>日常工作中经常会出现这样的情况：
小张怎么也想不起来上次收藏的一篇健身饮食相关的文章，到底是在印象笔记的「健身」分类下，还是在「健康」或者「饮食」分类下，跨分类的文章太多，小张感到头秃 小李用标签管理文档，但是每次查询标签时，总是犹豫到底应该搜索时间管理还是效率，亦或是工作流，标签实在太多，小李很恼火 这两种情况都属于整理方法不科学，给检索时造成了麻烦。
检索分类的难题 在正式介绍整理方法前，不得不先声明一个事实：**完全无重叠的分类是不可能实现的。**以小张为例，小张是一个健身教练，他在「健身方法」分类下有教会员如何管理「睡眠」、「饮食」和「健身动作」，同时小张也热爱生活，他在「生活」分类下有「财务知识」，并在「睡眠」和「饮食」里记录自己的睡眠和饮食习惯。这就造成了「睡眠」和「饮食」同时存在于个人生活和健身方法两个分类里。
像小张这样的情况几乎不可避免，分类作为一种整理方法，就免不了出现上图中重叠的部分。什么是分类？**分类就是预先设计好一堆插槽，再把不同的东西分门别类放进对应的插槽里。**小张在检索「饮食」相关的内容时，他的分类系统失效了，同一个东西可以属于不同插槽。小张此时必须用「个人生活 + 饮食」或是「健身 + 饮食」的扩展分类形式才能得到想要的结果。由此可见，分类失效最简单的解决办法是扩展分类，比如增加两个子分类「生活饮食」和「健身饮食」。但是由于文档日积月累，这种小分类越来越多，越来越难管理；而一些分类里只存了1、2篇文档，根本没必要单独开个分类。
小张的头秃越来越严重了，为了帮助像小张这样的分类困难症，人们想出了两种不同的办法：
用标签解决重叠部分，比如饮食就可以作为标签，在「健身」分类下的文章如果贴着饮食就代表它属于健身相关的饮食，同时这个标签也可以贴到「个人生活」下的文章里。 **通通用标签，**把个人生活变成标签，一篇文章如果同时贴有个人生活和饮食，那它就是生活方面的饮食，不是健身的饮食知识。具体的做法会在后面章节讲解。 遵守使用原则 不管哪种方式，即便有了标签和分类的双管齐下，也要有使用的原则，否则滥用的结果比不分类更麻烦。这回我们从原点出发，先思考一下人类检索信息的方式。
通常检索信息有两种方式：
通过树形的层级体系，自顶向下一层层检索 通过碎片的记忆，用关键词和关联性，自底向上检索 基于这两种常见的检索方式，我们约定一种分类和标签的使用原则：
谨慎扩展新分类，分类之间尽量不重叠
标签尽量不可拆分，标签之间组合使用
分类的创建成本高，检索成本低，所以分类只有数量少，重叠部分少，才能提高自顶向下查找的命中率。
标签创建成本低，但是检索成本高，所以标签可以是跨类别的，标签越具体，组合越丰富，关键词命中率越高。
基于这两种原则去管理分类和标签，就可以保证你的检索体系不崩溃的同时，检索效率最高。比如我先搜索「健身」分类，发现文章太多，于是我加上饮食相关的标签，就可以轻松过滤掉大部分信息。标签越具体，组合越详细，过滤效果越好。
另外，假设我只记得文章的模糊内容，也可以直接搜索标签或内容。
完全标签化的思路 现在流行一种管理方式，抛弃分类，完全用标签管理。拿印象笔记为例，在这篇 《Using Evernote (the right way)》 的文章中，作者抛弃了常见的笔记本分类法，完全用标签来整理笔记。笔记本只保留「收件箱」、「收藏夹」和「废纸篓」。这种方式免去了整理笔记本的麻烦，但同时，造成了检索时必须依赖标签。作者为了解决这一难题，提出了一种被我称之为**「给标签分类」（ 原文是 Organize Tags）**的做法。
其实给标签分类的做法非常常见，以 豆瓣 为例，你肯定见过下边的标签分类方式：
**这种方式的好处就是：你既可以直接在搜索栏搜索具体的标签，也可以通过标签分类先筛选出标签，再点击标签明层缩小筛选范围。**这就解决了标签不好逐层检索的问题。
仍然以印象笔记为例，我们该如何改造它，使之成为完全标签化的系统呢？
首先，把现有笔记的标签归入对应的父类标签。比如新建一个信息管理，然后把项目管理、时间管理、思维导图、信息检索全部拖到信息管理标签下，使之成为父标签。
之后，按照「我是谁，从哪来，到哪去」的原则补充所有遗失的标签。
我是谁，笔记属于哪个知识点、具体的知识类型 从哪来，笔记的来源，如果是网页剪藏，印象笔记会自带来源信息 到哪去，笔记的用途，比如进行中的某个项目 这样，一篇笔记的标签看起来是这样：
这里的来源我直接使用了印象笔记自带的信息。标签的用途如果不明确也可以忽略。知识点要遵循具体，尽量不可拆分的原则。父类别标签的存在，是为了避免开头中小李遇到的问题，标签太多时，检索无从下手。文章有了父类别标签，你就多了一种筛选笔记的方式：直接在标签管理界面点选父标签来缩小筛选范围。
完成了这些，我们下次检索笔记，就可以用两种方式：
通过父标签 &amp;gt; 子标签的方式逐层检索 通过搜索框输入标签名直接检索 如果你不是印象笔记用户，也可以采用一些迂回的手段，比如建立一张标签父子关系的笔记，来作为查找目录。</description></item><item><title>注意力的边缘</title><link>https://sund.site/posts/2019/11/%E6%B3%A8%E6%84%8F%E5%8A%9B%E7%9A%84%E8%BE%B9%E7%BC%98/</link><pubDate>Thu, 14 Nov 2019 15:29:00 +0800</pubDate><guid>https://sund.site/posts/2019/11/%E6%B3%A8%E6%84%8F%E5%8A%9B%E7%9A%84%E8%BE%B9%E7%BC%98/</guid><description>阅读几分钟就忍不住打开微信；
计划在家办公却浏览了一上午购物网站；
周末去咖啡馆学习，被来回走动到人打扰到无法专心。
这些问题我们经常会遇到，好的外部环境可以让人长时间保持精神的专注，大大提高我们工作、学习的效率。反之各种外界干扰会时不时跳出来打断你的注意力。那么你要怎么应对这些干扰呢？
接下来我会分享一种认知模型——注意力模型，它帮助你分析你的注意力被谁「偷」走了。
注意力有边缘 我在最近阅读《交互的未来》这本书时，了解到了注意力模型。书的作者认为，人的注意力有边缘。我们不可能将全部注意力放在多件事上，处于我们注意力中心的事物最容易被我们感知，而处于注意力边缘的事物，往往被我们的视线边缘、听觉、嗅觉等知觉感受到。因此，位于注意力中心的事物感知最清晰，所以反馈也更迅速。
以此为基础，作者把注意力划分为三个等级，下面以常见的汽车驾驶室为例，看看司机的注意力是怎样分配的：
前方路况占据了驾驶员视觉中心，是主要注意力 在视觉边缘的反光镜和仪表盘，以及触觉反馈的方向盘和脚踏板，是次级注意力 双闪、应急灯、收音机等设备，周围的环境音共同构成了第三级注意力 由此，注意力的三个等级可以归纳为：
主要注意力与视觉相关，且是直接的，例如司机对路面所给予的注意，或者台式计算机用户对计算机所给予的注意。 次要注意力的对象则较远，例如，人们对无需直接关注就能感觉到的声音或振动信号所给予的注意。 第三级注意力的对象则是注意范围边缘的声音、光线或环境振动等。 当一个司机在驾驶时，如果有人跟他不断交谈，那么司机的注意力模型就变成了：
主要注意力 次要注意力 第三级注意力 前窗的视觉，路况和车辆位置的意识 后视镜、仪表盘、脚踏板等 和乘客的谈话内容 司机的第三级注意力被乘客的谈话内容占据，所以周围的环境音就被阻断了。那假设这辆车使用了屏幕触摸式导航系统，那么司机在使用导航系统时，主要注意力就被阻断了。所以在非自动驾驶的汽车里使用触摸操控在交互上是糟糕的设计。
主要注意力 次要注意力 第三级注意力 触摸屏操作 后视镜、仪表盘、脚踏板等 和乘客的谈话内容 使用电子设备的注意力模型 接下来，我们一起回到日常生活中。在一般情况下，我们在工作和学习时，注意力的状态是这样：
主要注意力 次要注意力 第三级注意力 电子屏幕、书本上的内容 屏幕边缘的时间和菜单，不时弹出的通知栏，视线边缘来回走动的人 环境光和声音，提示音，久坐后座椅、桌子的不适感 看到这里，你头脑中理想的学习环境是不是下面这样呢？</description></item><item><title>Ricoh GR2 参数设置心得</title><link>https://sund.site/posts/2019/11/ricoh-gr2-%E5%8F%82%E6%95%B0%E8%AE%BE%E7%BD%AE%E5%BF%83%E5%BE%97/</link><pubDate>Thu, 14 Nov 2019 14:46:00 +0800</pubDate><guid>https://sund.site/posts/2019/11/ricoh-gr2-%E5%8F%82%E6%95%B0%E8%AE%BE%E7%BD%AE%E5%BF%83%E5%BE%97/</guid><description>各项参数的对抖动、曝光、噪点的影响 ⬆️此选项越大 ❗️📷 手抖警告出现率 ❗️AE 光线警告出现率 🌫噪点 🔎备注 光圈（F） ⬇️ ⬇️或⬆️ ⬇️ 手动对焦模式或者快拍模式下，光圈越小，【超焦距】带来的取景深度越大 快门速度越快 ⬇️ ⬆️ ⬇️或⬆️ 快门速度1/250适合抓拍，1/60为通常的安全快门 ISO ⬇️ ⬇️或⬆️ ⬆️ 800以内画质较好，超过800噪点明显变强 曝光补偿（EV） ⬇️ ⬇️或⬆️ ⬇️ 影响亮度，非自动档可用，本质是增减相机控制光圈、快门、ISO的比例时的权重，通常拍摄雪景和较黑的物体时候需要调节 白平衡（WB） ✖️ ✖️ ✖️ 影响色彩 白平衡补偿（B：G） ✖️ ✖️ ✖️ 手动增减白平衡权值，很少用 效果（D：C：S） ✖️ ✖️ ✖️ 影响滤镜效果，可以拍出风格强烈的作品 ND滤镜（开） ⬆️ ⬆️ ⬆️ 在强光状态下打开ND滤镜可以降低3档进光量，即使在白天也能用慢门或者大光圈 低速快门NR（开） ✖️ ✖️ ⬇️ 打开后自动降低低速快门时的噪点 闪光灯⚡️（开） ⬇️ ⬇️ ⬇️ 在白天背光和夜晚都可以提高近景中被摄体的亮度 景深标尺、ND滤镜、曝光补偿的技巧</description></item><item><title>Nintendo Switch 联机优化策略</title><link>https://sund.site/posts/2019/10/nintendo-switch-%E8%81%94%E6%9C%BA%E4%BC%98%E5%8C%96%E7%AD%96%E7%95%A5/</link><pubDate>Mon, 07 Oct 2019 22:18:00 +0800</pubDate><guid>https://sund.site/posts/2019/10/nintendo-switch-%E8%81%94%E6%9C%BA%E4%BC%98%E5%8C%96%E7%AD%96%E7%95%A5/</guid><description>简单方法 首先介绍下Nintendo Switch在哪里设置网络，如下图，设置界面=&amp;gt;互联网设置里，可以修改IP，DNS等常用网络配置。修改之后点击「链接测试」，可以测试你的NAT和下载、上传速度。
首先：设置路由器的WIFI类型为5G 因为NS对2.4GHz的Wifi优化非常差，所以一般玩家都选择设置Wifi类型为5GHz，5G的缺点是穿墙能力差，但是速度很快，所以建议把NS放在离路由器不太远的位置。
最简单粗暴的方法：购买加速器 购买加速器是最省心省力的方案，以网易UU加速器为例，加速后可以把NAT从D上升到B或A，完全可以满足大部分延迟要求较低游戏的需要。
Mac版UU加速器目前还处于免费测试阶段，可以随意使用。按照提示配置NS上的IP和DNS即可。但是如果想让联机速度突破A，甚至小于30ms延迟，就要结合第二部分「进阶方法」中的内容了。
最方便的方法：DNS优化 这也是最多人的办法，以「Splatoon2」为例，四川电信在不使用任何加速器的情况下，单单设置了合适的DNS，就可以流畅体验乌贼娘了。注意这种方法在晚上8～10点高峰期间有一定概率掉线。下面提供一些我常用的DNS，不同地区效果不同，需要自己尝试。
218.102.23.228 # 一般用作日本eshop下载游戏，速度提升明显 203.198.7.66 168.126.63.1 # 著名韩国DNS节点，Splatoon2 联机常用 168.126.63.2 # 同上 进阶方法 进阶方法可以最大限度的提升你的网络通信效率。
路由器设置优化 路由器有两处可优化的地方：
设置路由器DMZ，所谓DMZ就是隔离区，简单理解为外网可以直接访问你DMZ中指定的IP。现在把你主机的IP放入DMZ中，这样牺牲一定安全性的同时换来延迟的进一步降低。
开启路由器的「Full Cone NAT」。以pandavan固件为例，在防火墙设置中可以找到。其他路由器也一定有类似的设置，耐心找一下。
电信宽带改为桥接方式 中国电信宽带默认使用光猫拨号上网。这样普通用户免去很多麻烦的同时，也增加了NAT联机的延迟。解决办法就是把宽带连接方式改为「桥接」。
所谓桥接，就是不使用电信提供的光猫进行拨号上网，而是直接由你自己的路由器拨号，这样可以一定程度降低延迟。中国电信网上营业厅可以直接修改，也可以自己打客服电话或去营业厅办理（只要告诉业务人员，我要把宽带连接方式改为桥接）。
修改之后的十几分钟内时间，你的网络会断开，此时你必须用自己的宽带账号和密码在路由器上（注意不是光猫）重新登录宽带上网。我使用桥接+DNS修改，在未使用加速器的情况下，就可以把NAT直接从D提升为A。</description></item><item><title>8月做了什么</title><link>https://sund.site/posts/2019/09/8%E6%9C%88%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88/</link><pubDate>Mon, 02 Sep 2019 15:52:58 +0800</pubDate><guid>https://sund.site/posts/2019/09/8%E6%9C%88%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88/</guid><description>准备新开一个话题，用每个月的总结替代年度总结。这是第一篇。
最近国内国际上大事不断，在这个历史转折点当口，每个从互联网汲取信息的人都应该有点独立思考能力。「第一性原理」（first principles thinking）是伊隆·马斯克在TED演讲时回答「为什么能够在不同的领域都能够取得成功？」时给出的答案。第一性原则要求我们剔除用「比较」来权衡事物好坏的思维方式，转而选择一层层向下探求本质，再由本质反推出认识。这里有篇博客文章做了细致的讲解。
有什么发现 七龙珠里的元气弹
这是一群香港示威者把激光笔的光束汇聚到一张反光板上，以干扰警方行动。像七龙珠里孙悟空把大家的力量汇聚起来形成超大元气弹的画面。非常有想象力。
Hacker News 和 开发者头条、掘金的差别
国内两大技术新闻「开发者头条」和「掘金」的文章主要以技术理论和工程实践为主。这两者都在一定程序上模仿国外的Hacker News，但是Hacker News除了技术和工程实践，更多的是对政治、经济、文化的深度思考。
在某种程度上，中国的技术人被阉割了右脑。右脑有赋予行为合理化的能力。国内的技术「场」，就是一个你只需要关心技术本身而不需要关心社会、文化影响的环境。
人生五十年，如梦又似幻
前不久上一家公司的老板因为癌症去世了，年仅51岁。在50岁之前，他拥有纳斯达克上市的公司，在北京核心商圈有一栋办公楼。我想起《影武士》里织田信长唱的那首歌：
人生五十年，与天地长久相较，如梦又似幻。一度得生者，岂有不灭者乎？
白领快乐水
元气森林苏打气泡水，0热量、苏打、气泡。这几个元素加起来就是现在办公室一族的全部追求了。这是一种真正的「现代饮料」。
马里奥创造家2
这是个创造快乐的游戏，拥有它的朋友可以玩玩我制作的地图：9PB-WGX-WVF
任意听播客
这个网站https://getpodcast.xyz可以把最受欢迎的中文博客添加到任意你常用的podcast客户端。
看过的书 《非暴力沟通》
一本讲沟通的书，越是亲近的人，越应该认真的对待「沟通」这件事。但是我们日常生活中往往会采取相反的做法。
《交互的未来》
原离线的主编Bob推荐的书，内容其实挺一般的。里面有一个很有趣的思考，自动扶梯在故障时会变成普通的扶梯。这种能够出故障时「自我降级」的设计原则，其实生活中很常见，比如电动牙刷，蓝牙音箱，WIFI智能插座。你还能想到哪些身边的设备呢？
言叶 Note that I do not claim that all of this makes me more productive, merely that it makes things more searchable.
usesthis网站对 Paul Ford 的采访。知识管理体系中，相比于高效性，「可搜索性」或许更加重要。
梅毒这种可怕的疾病在不同的国家被称作不同的名字。在俄罗斯，它被称作波兰病；在波兰，它被称作德国病；在德国，它被称作法国病；在法国，它被称作意大利病；在意大利，他们称之为法国病。
推特网友@peterlu
做个世俗眼中的成年人吧！
这是《勇者斗恶龙》改编电影的台词。该电影被日本观众广泛吐槽——想要逃离生活去看电影，却被导演教做人。
那你认为是什么原因，让你无法主动提出话题呢？
是因为你对对方没兴趣。</description></item><item><title>制定一个人的日本旅行计划</title><link>https://sund.site/posts/2019/04/%E5%88%B6%E5%AE%9A%E4%B8%80%E4%B8%AA%E4%BA%BA%E7%9A%84%E6%97%A5%E6%9C%AC%E6%97%85%E8%A1%8C%E8%AE%A1%E5%88%92/</link><pubDate>Thu, 11 Apr 2019 13:19:04 +0800</pubDate><guid>https://sund.site/posts/2019/04/%E5%88%B6%E5%AE%9A%E4%B8%80%E4%B8%AA%E4%BA%BA%E7%9A%84%E6%97%A5%E6%9C%AC%E6%97%85%E8%A1%8C%E8%AE%A1%E5%88%92/</guid><description>独自一个人出国旅行有很多不方便，但作为交换，那份无拘无束的自由和旅途中的不期而遇完全值得这种付出。为了进一步降低不便，提高旅行体验，我从三个方面制定旅行计划：
前期准备。这部分没有技术含量，网上很多攻略，我列举出来供参考 路线规划。这部分使用了一些技巧和工具，是我自己总结的经验 学习基本礼貌用语，地名和礼仪。这部分内容会增强你的旅行体验 带图原文： https://mp.weixin.qq.com/s/rAZcFmW-96CrOkvQY4N04w
旅行计划 &amp;gt; 前期准备 这部分都是固定套路，没有技巧。很多其他攻略都有，我整理出来供参考。
护照
日本不接受个人申请，所以只能去淘宝找最近的旅行社申请。我在成都，所以找了一家信誉比较高的重庆旅行社（送签重庆日本领馆）。把必备的材料邮寄过去。大概10~20天出签。
机票和酒店都不需要你提供，旅行社会解决。你只要安静等待出签。
使用工具：淘宝。
机票
公认体验最好的是全日空航空(官网：https://www.ana.co.jp/zh/cn/)。全日空的餐食和服务质量都非常高。建议提前两个月预订机票，在官网搜索计划旅行时间前后的日期，很大概率可以3~5折价格订到往返的机票。
使用工具: 全日空官方网站
酒店
因为日本的民宿不被官方承认，所以airbnb之类的民宿出现纠纷是没有保障的。建议在Booking上预订酒店。和式酒店(日本传统风格的榻榻米地板的酒店)往往没有独立卫浴和床，所以价格会便宜很多，追求舒适的话建议订正常的酒店，想体验日本民风或者喜欢和很多外国人一起过集体生活的，可以考虑一些青年旅社和和式酒店，不建议考虑胶囊旅馆，体验非常差。
另外，建议先读完本文&amp;quot;规划路线&amp;quot;部分，再预订酒店。
使用工具：Booking App
电话卡
淘宝可以买到很便宜的日本7天4G流量卡。如果单人旅行的话，比随身wifi要方便不少。
使用工具：淘宝
地铁券
西瓜卡(Suica)是关东地区的常用地铁卡。不但可以坐地铁还可以在便利店买东西，可以直接在日本机场购买。
具体的购买方法见自动贩卖机。
众所周知日本的交通比较贵。这里要好好说下技巧，日本很多针对外国游客的福利，比如东京地铁三日券，可以在72小时内任意乘坐地铁，非常划算。
使用工具：东京地铁网站，包括购买地铁票的方法和详细地图：https://www.tokyometro.jp/tcn/ticket/travel/index.html。
如果怕到日本后找不到购买的地方，也可以在淘宝提前购买好。
景点票
日本的大部分室外景点是不要钱的。很多观光路线有缆车、登山电车需要买票。建议提前上网查好目标城市的观光票是否有通票(比如我去箱根前，在东京新宿可以买到箱根2日周游券，可以乘坐所有缆车、电车等交通工具，参观所有景点免票)。这会省下很多钱，还能免去多次买票的麻烦。
日本的城市都各自的宣传网站。可以登录上去查看旅行优惠和景点信息。
使用工具：搜索引擎搜索城市的官网。
货币
建议在出发前至少兑换3万日元随身携带。注意日本商店找零大量使用硬币，所以有一个能装硬币的小钱袋是必须的（建议当地买一个）！另外日本兑换货币的地方主要是7-11便利店，而东京大阪这种大城市7-11便利店更是随处可见。所以不需要太担心。购物的话银联卡和Visa卡基本随处可用。
使用工具：有些银行兑换外币需要提前申请。到营业厅时记得随身携带身份证。
&amp;gt; 规划路线 我使用&amp;quot;看板&amp;quot;的方式来规划旅行路线。具体方法就是把想去的城市和旅行景点全部写在便签纸上（也可以用电子看板”Trello“），按照地区把同一个地区范围的景点贴在一起。一个人一天最多走2~3个地区，每个地区1~2个景点（不建议行程制定的太匆忙）。按照这个原则，我制定了4步路线规划方案：
从每个地区挑出自己最想去的2、3个景点。 注意有些景点需要在官方提前预订（比如东京的皇居）。
将这些景点标记在地图上。我使用的工具是Google My Map(https://www.google.com/maps/d/u/0/)
用Google Map搜索地铁路线，规划一天2~3个地区的行程。(比如第一天去浅草、上野、东京大神宫，那么先找好酒店到这些景点的地铁路线，算好坐车时间)
按照前3步设计好每一天的行程，写成清单。
至此，你已经有了完备的可执行旅行计划。女生可以出发前把计划清单发给家人，有备无患。
&amp;gt; 学习基本礼貌用语，地名和礼仪 这部分可以网上搜下，
礼貌用语。学会说&amp;quot;你好&amp;quot;、&amp;ldquo;谢谢&amp;rdquo;、&amp;ldquo;对不起&amp;quot;就足够了。用得最多的是すみません(si mi ma se en)，&amp;ldquo;打扰一下，对不起&amp;rdquo;。 地名。因为机场买票，问路经常要用日语地名，所以在Google地图上提前找好地名的罗马音(就是英文发音)，比如浅草的英文(Asakusa)，日语发音就是英文发音。 礼仪。参拜神社、餐饮的礼仪。如果当地没有熟人，建议提前网上学一下，可以增加很多乐趣。 除了上面提到的三点，如果是吃货可以了解下当地有名的饭店，如果喜欢拍照，也可以搜下知名的摄影地点。</description></item><item><title>跨过真实和虚无的河</title><link>https://sund.site/posts/2018/10/%E8%B7%A8%E8%BF%87%E7%9C%9F%E5%AE%9E%E5%92%8C%E8%99%9A%E6%97%A0%E7%9A%84%E6%B2%B3/</link><pubDate>Thu, 04 Oct 2018 13:25:55 +0800</pubDate><guid>https://sund.site/posts/2018/10/%E8%B7%A8%E8%BF%87%E7%9C%9F%E5%AE%9E%E5%92%8C%E8%99%9A%E6%97%A0%E7%9A%84%E6%B2%B3/</guid><description>两个月前在亚马逊买村上春树《刺杀骑士团长》的简体中文版电子书，译者是大名鼎鼎林少华先生。我对林少华的了解，源自高中时期看的《挪威的森林》，林先生那晦涩的翻译和故弄玄虚的修辞让年少无知的我看得头昏脑涨。读了几章《刺杀骑士团长》后，唤起了我不愉快的青少年回忆，真的还是无法接受这种「不忠实于原著」的翻译风格呀。在这种心态下，最终还是去淘宝买了两册赖明珠的台译版来看。所以下面要讲的内容，都是基于台湾繁中版本的翻译。
主要人物 （剧透） 我 ：青年画家，和妻子离婚后住进了朋友雨田政彦父亲过去生活过的山中别墅里，意外发现了著名画家雨田具彦藏在阁楼的画作《刺杀骑士团长》。后来机缘巧合认识了附近别墅居住的富豪免色先生和山下的秋川麻里惠一家。
雨田具彦 ：朋友雨田政彦的父亲，90岁高龄的画家，已经失去神志住在疗养院里。年轻在维也纳留学期间和恋人组织刺杀纳粹军官的活动，恋人被纳粹迫害致死，自己则因家族关系而苟且偷生回到国内。其弟弟也因参军入伍，在南京大屠杀期间留下心理创伤，回国后自杀。雨田具彦独居在主人公后来居住的山中别墅里，直到神志不清被儿子送去疗养院。
骑士团长 : 在我无意中打开了山后被石头封住的井后，突然出现在我的画室里的自称是「Idea」（简中翻译为理念）的灵体。长的和雨田具彦画作里的骑士团长一模一样，只是身高只有60公分。本作中只有三个人能看见骑士团长——我、羽田具彦、秋川麻里惠。
秋川麻里惠 ： 青春期刚刚发育的少女，童年在山中长大，拥有敏锐的洞察力。其母亲曾经是免色先生的女友，在和免色分手前两人发生关系。在生下麻里惠之后因毒蜂蛰咬过敏而死。后麻里惠和姑姑秋川苼子一起住在山里。免色一直认为麻里惠有可能是他的亲生女儿。
免色 ： 富豪，生活井井有条，是自控力非常强又有能力控制住周围一切的男人。独居在附近的白色别墅里，常年用望远镜窥探秋川麻里惠一家的生活。
光即是影，影即是光 《刺杀骑士团长》的故事源自莫扎特版的歌剧《唐璜》。讲的是风流成性的唐璜（台译：唐·乔万尼）在勾引骑士团长的女儿被发现后，在和骑士团长决斗中杀死了骑士团长，最后遭报应堕入地狱的故事。
正如书中所说，Idea是一种类似观念的东西，比如爱本身不是Idea，但是产生爱的东西就是Idea。我把它理解为「本我」，林少华说，书中出现的洞穴——井，在日语里和英文的「本我」谐音。所以我认为，书中多次出现的「骑士团长」也许是各个人物的内心本我的写照。年轻的雨田具彦对恋人、弟弟的死去充满自责和愧疚，又因为政治、家庭的原因无法对人诉说自己的痛苦，便将自己化身故事里的唐璜，刺杀了骑士团长，希望自己替代爱人和弟弟堕入地狱。
值得注意的是，书里反复出现的元素「窥探」和「封闭的空间」。书中几处「窥探」的描写：
在名为《刺杀骑士团长》的画作里，有一个从地下打开盖子窥探的长脸男 用望远镜窥探麻里惠生活的免色 仿佛暗中窥探我，我假想中的「开斯巴鲁森林人汽车的男人」 最后躲在衣柜里窥探免色的秋川麻里惠 他们每个人都在好奇心的驱使下窥探别人（却在过程中窥探到了自己）。在漆黑的封闭空间里，意识和肉体剥离，仿佛灵魂出窍般看到了自己真实的内心。后山的洞穴之于我，曾经关押过的拘留所之于免色先生，衣柜之于秋川麻里惠，都是窥探到自己内心世界的封闭空间。
如果按照我上面的理解，故事的脉络就是这样：主人公、免色、麻里惠、雨田具彦都是被自己内心折磨的、介于「真实和虚无之间」的人。主人公一方面觉得自己深爱妻子，另一方面怨恨妻子的背叛，自己却又与人妻发生关系，是介于背叛与被背叛的人。免色是能力超强控制一切的男人，却无法得知疑似女儿的麻里惠是否和自己有血缘关系，于是免色也是介于掌控和失控的男人。麻里惠不必说，对自己身世一无所知，介于「免色先生的女儿」和「不是免色先生女儿」两种身份之间。雨田具彦则纠结于年轻时的自己，在失去爱人和兄弟的痛苦中即是人人知晓的画家，又是一个无法告知任何人内心感受的孤独老人。
每一个人都在真实和虚无之间徘徊。整个故事就是围绕村上春树构建起来的世界展开。光即是影，影即是光。真实和虚无互为存在的依据。
中间的过程不再赘述，好奇的看官可以读到这里就打住，去买一本书，自己来细细品味。如果你不想读长篇小说或者已经读完只想看看我怎么理解，那么请继续往下看。
故事给出了几种人的结局。
为了拯救失踪的秋川麻里惠，主人公「我」按照「骑士团长」的提示，在雨田具彦的病床前重演了《刺杀骑士团长》中的一幕，目睹了我亲手杀死了「骑士团长」的雨田具彦内心终于释然，几天后安详辞世。几十年来萦绕在老人心头的痛苦、自责、愧疚被我一刀捅破，产生怨恨的种子不复存在。
在杀死骑士团长过程中引出了地板下窥探的「长脸男」（也是画作中出现的人物），「我」搬开地上的盖板进入了隐喻的地下世界。在经过真实和虚无之河时，「我」把秋川麻里惠的护身符（企鹅挂饰）留给河中间的摆渡人当做船资后，「我」独自爬进漫长的洞穴（此处和主人公小时候与妹妹爬进富士山附近的风洞的回忆呼应），在战胜了「双重隐喻」后，在漆黑的封闭空间里，内心终于决定和妻子和解（也终于与自己和解）。
至于什么是「双重隐喻」，书中提到是骑士团长提醒主人公要小心的一种危险的存在。会吞噬那些意志不坚定的人。在我理解，这是内心本我和现实互相影响时，不要让自以为的真实改变了本我的一种比喻（姑且这么解释吧）。
回到秋川麻里惠的故事线，因为「我」把麻里惠的护身符留给了「真实与虚无之河」的摆渡人，所以麻里惠的身份永远介于真实和虚无之间，也就是说，麻里惠到底是不是免色的女儿永远成了谜。故事的最后章节，麻里惠躲在免色家衣橱里看到的「好像是免色却是不是免色」的人影，就是免色探求麻里惠真实身份的本我的隐喻。麻里惠紧紧抓住衣柜里的女人衣服（其实是她生母留在免色家，被免色珍藏起来的衣物），并且被「骑士团长」告知：「衣服会保护你」。这恰恰说明，免色在故事的最后，内心依然是爱着麻里惠的生母，所以最后放弃了探求麻里惠的真实血缘身份。不去打扰麻里惠平静的生活。这也是「我」在地下世界做出的决定和真实世界产生了某种联系，最后拯救了麻里惠平静的生活，让真相永远隐藏起来。
免色先生最后和麻里惠的姑姑笙子热恋，似乎不再关心麻里惠的身世了……这是我唯一觉得村上春树有点草率的处理。
题外话 在读完《刺杀骑士团长》上册后，我正好休年假去日本旅行，期间在箱根的山里住了一宿民宿。箱根距离书中主人公居住的小田原市不远，在山里吹着风听雨声时，真的有种置身小说里的感觉。我住的那间和屋非常简陋，风一吹四周的窗子和木板拉门都会吱吱嘎嘎作响。晚间寂静无人的乡村里还能隐约听到风铃的声音，像极了书里主人公在深夜听到后山摇铃声的场景。只有日本的作家才能写出这样的故事，用那种日本人细腻、敏感的神经，探索人心里不易察觉的感受。也希望林少华老师晚年幸福，不要再接手村上春树的作品翻译工作了。:)</description></item><item><title>《Python源码剖析》第三部分——Python虚拟机进阶</title><link>https://sund.site/posts/2017/07/python%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86python%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%BF%9B%E9%98%B6/</link><pubDate>Fri, 14 Jul 2017 00:00:00 +0000</pubDate><guid>https://sund.site/posts/2017/07/python%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86python%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%BF%9B%E9%98%B6/</guid><description>Python 环境初始化 进程启动后创建PyInterpreterObject，PyInterpreterObject里面维护了全局module映射表interp-&amp;gt;modules，该表默认初始化为__buildin__模块，
Python 的 import 机制 Python虚拟机在执行“import A”时，会为package A创建一个module对象，同时会在该module维护的dict中添加两个表示元信息的属性：name__和__path。而Python虚拟机从A/init.py中执行“import mod1”时，也会为mod1创建一个module对象，同时也会设置__name__属性，但是这时就不设置__path__属性了。
package是由module聚合而成。更清楚的表述是：module属于一个package。我们不能说，module1属于module2。我们前面已经看到，module的路径实际上是一种树状结构，从图14-11中可以看到，在这个树状结构中，module的父节点只能是package，而不可能是另一个module。
GIL Python虚拟机使用一个全局解释器锁（Global Interpreter Lock，GIL）来互斥线程对python虚拟机的使用。
注意这里GIL是解释器一级的互斥锁，也就是同一时间只能有一个线程占用python解释器。所以GIL是用来让操作系统中分配的多个线程互斥的使用python解释器的，是建立在系统线程调度基础之上的一套C API互斥机制，是比操作系统线程资源更大粒度的锁。
Python的线程是基于操作系统原生线程的，所以python的线程不是「虚拟出来的」。
那么究竟Python会在众多的等待线程中选择哪一个幸运儿呢？答案是，不知道。没错，对于这个问题，Python完全没有插手，而是交给了底层的操作系统来解决。也就是说，Python借用了底层操作系统所提供的线程调度机制来决定下一个进入Python解释器的线程究竟是谁。
GIL在C里对应的结构：
[thread_nt.h] typedef struct NRMUTEX { LONG owned ; DWORD thread_id ; HANDLE hevent ; } NRMUTEX, *PNRMUTEX ; 其中owned初始化为-1，表示锁可用，否则为不可用。thread_id代表线程id，最后一个是平台相关的变量，win32上是一个event内核对象。
多线程 - 标准调度 当Python启动时，是并不支持多线程的。换句话说，Python中支持多线程的数据结构以及GIL都是没有创建的，Python之所以有这种行为是因为大多数的Python程序都不需要多线程的支持
书中指出，由于python的多线程标准调度机制是有代价的，所以默认单线程不初始化GIL。
主线程启动后，会用ident = PyThread_start_new_thread(t_bootstrap, (void*) boot);函数调用操作系统内核接口创建子线程，然后主线程挂起等待obj.done。注意，此时主线程中持有GIL。 主线程等待的这段时间里，子线程将自己的线程id等信息设置好，通知内核对象obj.done，唤醒等待中的主线程。此刻，主线程和子线程都同时由操作系统调度，但是主线程一直持有着GIL。 子线程继续执行后进入python解释器，发现需要等待获取GIL。此时子线程主动将自己挂起(而不是由操作系统挂起)。这样就进入了两个线程通过GIL调度的阶段。 主线程被唤醒后，继续执行，直到python内置的时钟计时器_Py_Ticker结束才将自己挂起，让出GIL(_Py_Ticker会在每次执行一条字节码后自动减1，初始默认为100)。 通过上面4步，python的两个线程就完成了从系统调度上升到python标准GIL调度的流程。
阻塞调度 如同上面流程介绍的，标准调度是python使用软件时钟调度线程，那么有时候python的线程会自我阻塞，比如raw_input()、sleep()等函数，这时python就会使用阻塞调度的方式。
主线程调用sleep(1)后，调用Py_BEGIN_ALLOW_THREADS立刻释放GIL，然后调用操作系统的sleep操作。此时主线程就由操作系统自动管理。 子线程拿到GIL。此时主线程和子线程同时可被操作系统调度。操作系统在执行一段时间子线程后会挂起，调度主线程，发现主线程sleep没结束就挂起主线程，就继续唤醒子线程执行。 当主线程sleep结束，操作系统唤醒主线程。主线程调用Py_END_ALLOW_THREADS再次申请GIL，重新进入python标准调度流程。 可见python在保证线程安全的前提下，允许线程在某些时刻脱离GIL标准调度流程。</description></item><item><title>《Python源码剖析》第二部分——Python虚拟机基础</title><link>https://sund.site/posts/2017/07/python%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86python%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%9F%BA%E7%A1%80/</link><pubDate>Thu, 13 Jul 2017 00:00:00 +0000</pubDate><guid>https://sund.site/posts/2017/07/python%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86python%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%9F%BA%E7%A1%80/</guid><description>Python执行环境 在编译过程中，这些包含在Python源代码中的静态信息都会被Python编译器收集起来，编译的结果中包含了字符串，常量值，字节码等在源代码中出现的一切有用的静态信息。在Python运行期间，这些源文件中提供的静态信息最终会被存储在一个运行时的对象中，当Python运行结束后，这个运行时对象中所包含的信息甚至还会被存储在一种文件中。这个对象和文件就是我们这章探索的重点：PyCodeObject对象和pyc文件。
在程序运行期间，编译结果存在于内存的PyCodeObject对象中；而Python结束运行后，编译结果又被保存到了pyc文件中。当下一次运行相同的程序时，Python会根据pyc文件中记录的编译结果直接建立内存中的PyCodeObject对象，而不用再次对源文件进行编译了。
从文章摘录可见，python生成的不是编译后的文件，而是.py文件对应的静态信息——PyCodeObject，这里包括了字节码指令序列、字符串、常量。每个名字空间(类、模块、函数)都对应一个独立的PyCodeObject。(python连编译后的文件里存的都是个对象！)
不被import的py文件不会生成pyc。标准库里有py_compile等方法也可以生成pyc。
import机制 导入某个模块时，先查找对应的pyc，如果没有pyc就生成然后import这个pyc。(所以实际导入的并不是py文件，而是py文件编译后的PyCodeObject)。
PyFrameObject Python程序运行时的「执行环境」。参考操作系统执行可执行文件的过程。Python也是将函数对应的执行环境封装成栈帧的形式加载进内存。
typedef struct _frame { PyObject_VAR_HEAD struct _frame *f_back; //执行环境链上的前一个frame PyCodeObject *f_code; //PyCodeObject对象 PyObject *f_builtins; //builtin名字空间 PyObject *f_globals; //global名字空间 PyObject *f_locals; //local名字空间 PyObject **f_valuestack; //运行时栈的栈底位置 PyObject **f_stacktop; //运行时栈的栈顶位置 …… int f_lasti; //上一条字节码指令在f_code中的偏移位置 int f_lineno; //当前字节码对应的源代码行 …… //动态内存，维护（局部变量+cell对象集合+free对象集合+运行时栈）所需要的空间 PyObject *f_localsplus[1]; } PyFrameObject; Python标准库的sys._getframe()可以动态的在程序执行时获取当前内存中活跃的PyFrameObject信息。
LEGB 规则 即python作用域的查找顺序是local-enclosing-global-buildin。看下面代码：
a = 1 def g(): print a def f(): print a //[1] a = 2 //[2] print a g() 代码在[1]处会抛出异常，原因是python在编译阶段就把静态数据(局部变量、全局变量、字节码)放入pyc里，执行到f()里时，查找到a是在local作用域里定义的而不是global里，但是此时local的a还没赋值，所以就会抛出异常。由此可见，python作用域信息是在静态编译时就处理好了的。</description></item><item><title>《Python源码剖析》第一部分——Python对象基础</title><link>https://sund.site/posts/2017/07/python%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86python%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/</link><pubDate>Wed, 12 Jul 2017 00:00:00 +0000</pubDate><guid>https://sund.site/posts/2017/07/python%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86python%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/</guid><description>Python的对象初始化 在Python中，对象就是为C中的结构体在堆上申请的一块内存，一般来说，对象是不能被静态初始化的，并且也不能在栈空间上生存。唯一的例外就是类型对象，Python中所有的内建的类型对象（如整数类型对象，字符串类型对象）都是被静态初始化的。
python 的对象不像 C 是分配在栈、堆、data segment等位置，而是全部分配在堆上！只有python内置类型在初始化时候才是被C语言层静态初始化。
PyObject内部就两样：引用计数器、类型对象指针。
类型对象的定义：
typedef struct _typeobject { PyObject_VAR_HEAD char *tp_name; /* For printing, in format &amp;#34;&amp;lt;module&amp;gt;.&amp;lt;name&amp;gt;&amp;#34; */ int tp_basicsize, tp_itemsize; /* For allocation */ /* Methods to implement standard operations */ destructor tp_dealloc; printfunc tp_print; …… /* More standard operations (here for binary compatibility) */ hashfunc tp_hash; ternaryfunc tp_call; …… } PyTypeObject; PyObject_VAR_HEAD是可变类型的头信息，其中除了PyObject_HEAD的内容外，额外添加了一个代表该对象元素数量的整型。从上边代码可见，python的类型也是一个可变对象。
Python的多态 Python中所有类型在初始化后，在C语言层面都使用同一种指针PyObject *，所以python实现多态就非常容易。任何函数的参数都是一个PyObject类型指针，也就不存在编译器需要判断函数参数类型。
Python对象内存池 Python为了避免频繁的释放对象，采用了内存池的机制，在对象引用计数为0时，不会释放内存，而是将内存交还给内存池供python重新分配使用。每一种python类型，都有特定的内存池机制。
整数对象 -5至257之间的小整数，存储在「小整数数组」里，这个数组Python自动创建，每次创建一个小整数，就指向这个数组里对应的PyIntObject值并把PyIntObject的计数加1。(因此在-5到257之间的数实际指向同一片内存空间，整数-5和-5的内存地址肯定是一样的)
大整数则由一个叫block_list的链表管理，每次分配一个大整数就在free_list(一个指向空闲内存block的指针)里拿出一个节点并把free_list后移一个block。关于free_list是如何把尚未分配的内存和已被释放的内存链接起来的，可以参见书中113页的插图理解。
值得注意的是，python用于分配给整型的堆内存是不会自行销毁的，而是不断复用。也就是说，同一时间如果同时使用的整型太多，会消耗大量内存，并且这些内存在python关闭之前一直被python持有着。</description></item><item><title>一些投资知识</title><link>https://sund.site/posts/2017/01/%E4%B8%80%E4%BA%9B%E6%8A%95%E8%B5%84%E7%9F%A5%E8%AF%86/</link><pubDate>Thu, 19 Jan 2017 13:25:55 +0800</pubDate><guid>https://sund.site/posts/2017/01/%E4%B8%80%E4%BA%9B%E6%8A%95%E8%B5%84%E7%9F%A5%E8%AF%86/</guid><description>资产配置 债、股、基金等综合配置。基金有的偏股，有的偏债，有的偏另类。看清楚哪些基金适合自己。
每种理财产品、基金都是有一些底层资产构成。
什么是底层资产 债类资产(固定收益资产) 这类资产风险取决于平台投资的内容，债务主体(国家、公司、个人)。风险最低。
股类资产(高风险、高收益)
另类资产(最高风险、最高收益)
如房地产、农产品、黄金、原油、文玩收藏、比特币等。
理财风险等级 银行理财的风险级别分成1-5级，在合同里会标识出来，比如R1-R5，谨慎型产品(R1)、稳健型产品(R2)、平衡型产品(R3)、进取型产品(R4)、激进型产品(R5)。
一般R1-R2是可以认为比较稳健、基本不会亏本的，R5就比较危险了。
固定收益类资产(低风险) 国债(3%左右) 银行定期存款(小城乡银行利息高，国家有50万以内存款的保险) 网络银行存款(微众银行，五年期定存年化5%) 银行理财(保本类3-5%，非保本类高一点点) 结构性理财比非结构性理财高些。(既然买银行理财就是图安全，所以要买保本或风险低的。 中国理财网可以查看风险和收益，是权威的半官方类网站。银行T+0产品随时可以到帐，适合大量临时性资金的理财)
保险理财。虽然名字叫保险，但是本身没有保障功能，是保险公司包装出来的理财产品。 信托、券商资产管理计划 信托。信托的本质也是债券。信托产品底层就是债券。信托公司包装后卖给你。所以评估风险标准仍然是信托公司本身的实力。如中信信托、平安信托比较强大，本身风险较低。 券商的资产管理计划。100万起，风险和收益都比信托高。本质上是企业债券。但是借款规模大，企业运营不景气时风险高。 P2P。现在买要比之前风险低，推荐资产是小资产(如个人消费、小买卖等)。P2P在理财中占比不要超过20%比较好。知名度比较高的平台：陆金所、人人贷、有利网、小赢、桔子理财、积木盒子等等。 财经信息来源：财联社，财新网 读研报推荐迈博汇金。又叫慧博投研资讯。网址是http://www.microbell.com/newweb/web/search?index=0
浮动收益类资产 基金
理财工具
蚂蚁聚宝 基金评价报表 分类
货币基金。风险最低，如余额宝就是。收益很低，流动性强。 债券基金。风险较低。 债基按风险分为：</description></item><item><title>Python2 中字符类型的一些坑</title><link>https://sund.site/posts/2017/01/python2-%E4%B8%AD%E5%AD%97%E7%AC%A6%E7%B1%BB%E5%9E%8B%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/</link><pubDate>Wed, 11 Jan 2017 11:09:00 +0000</pubDate><guid>https://sund.site/posts/2017/01/python2-%E4%B8%AD%E5%AD%97%E7%AC%A6%E7%B1%BB%E5%9E%8B%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/</guid><description>问题 有一道面试题是这样的：
a = u&amp;#39;China&amp;#39; b = &amp;#39;China&amp;#39; c = u&amp;#39;中国&amp;#39; d = &amp;#39;中国&amp;#39; # 1 print &amp;#39;%s%s&amp;#39; % (a, b) # 2 print &amp;#39;%s&amp;#39; % c # 3 print &amp;#39;%s&amp;#39; % d # 4 print &amp;#39;%s%s&amp;#39; % (c, d) 判断打印后的效果。
先说正确答案，只有最后一行会报错。
分析 在Python2里，默认的字符类型是str，这个str和Python3的str完全不同，Python2的str类型是8位的ascii序列。Python2在处理str类型转换时遵循这样的规则：如果被处理的str型变量值小于7位，就可以和unicode类型混用。可以做+连接，格式化等操作，同unicode享受同样的待遇。
Python2在格式化字符时，会把str格式化为str，如果字符串里混入了unicode，就会把其他字符都转化为unicode。所以这道题里1处的a，b两个值混合后的字符就是一个unicode字符串，c和d单独格式化后仍保留了自己的格式。但是Python2在格式化代码位置4时，发现c是unicode而d不是，就会尝试按照上面的混用规则，格式化d为unicode类型，但是d的值'中国'显然是一个大于7位的str，因此Python2抛出UnicodeDecodeError。
在Python3里，str类型则变成了一个纯unicode字符，也就是说Python3里的str等价于Python2里的unicode类型。Python3里为了清晰明了，使用bytes代表8位ascii序列。除此之外，Python3严格禁止混用两种类型。
总结 使用Python2处理字符串，尤其是中文字符串，最好前边加上u Python2里不要混用str和unicode，如果处理文本时，先将全部数据格式化成unicode 能用Python3尽量不用Python2 (废话) 参考资料： 《Effective Python》 Brett Slatkin. 不愿意透露姓名的某厂面试官</description></item><item><title>Python yield关键字的底层实现</title><link>https://sund.site/posts/2016/12/python-yield%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/</link><pubDate>Wed, 28 Dec 2016 18:00:00 +0000</pubDate><guid>https://sund.site/posts/2016/12/python-yield%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/</guid><description>这几天面试被问到类似的问题，顺便看了看Python的源码，参考网上的教程，总结一下yield关键字在C层面是如何实现的。
举个栗子 我们先看一个python生成器函数的例子：
from dis import dis def func(): i = 4 yield i print i dis(func) a =func() a.next() a.next() 使用python的库dis可以直接查看python虚拟机运行的字节码。dis(func)的打印如下：
6 0 LOAD_CONST 1 (4) 3 STORE_FAST 0 (i) 7 6 LOAD_FAST 0 (i) 9 YIELD_VALUE 10 POP_TOP 8 11 LOAD_FAST 0 (i) 14 PRINT_ITEM 15 PRINT_NEWLINE 16 LOAD_CONST 0 (None) 19 RETURN_VALUE 我们猜测其中第二列(代表字节码偏移量)为9的指令YIELD_VALUE就是yield关键字的执行代码，进入Python2.7.12源码目录，在解释器执行字节码的主函数PyEval_EvalFrameEx中找到了下面一段：
TARGET_NOARG(YIELD_VALUE) { retval = POP(); f-&amp;gt;f_stacktop = stack_pointer; why = WHY_YIELD; // 跳转到fast_yield处。fast_yield里处理了一下状态位然后返回结果 goto fast_yield; } 其中TARGET_NOARG为封装了case语句的宏，这句话的意思是，如果字节码是YIELD_VALUE，就把栈顶元素赋值给retval，然后跳转到fast_yield处，fast_yield处代码进行了一些状态判断后直接返回了retval。</description></item><item><title>Python 巧妙地将rpc接口封装成pythonic的链式调用</title><link>https://sund.site/posts/2016/10/python-%E5%B7%A7%E5%A6%99%E5%9C%B0%E5%B0%86rpc%E6%8E%A5%E5%8F%A3%E5%B0%81%E8%A3%85%E6%88%90pythonic%E7%9A%84%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8/</link><pubDate>Tue, 25 Oct 2016 15:40:43 +0000</pubDate><guid>https://sund.site/posts/2016/10/python-%E5%B7%A7%E5%A6%99%E5%9C%B0%E5%B0%86rpc%E6%8E%A5%E5%8F%A3%E5%B0%81%E8%A3%85%E6%88%90pythonic%E7%9A%84%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8/</guid><description>这是一个外国人实现的Zabbix(一个开源监控工具)的Python Client——pyzabbix里的代码片段。
RPC调用 Rpc调用的流程是向rpc服务端指定的uri(如http://www.abc.com/jsonrpc.php) 发送json(或其他双方约定格式)数据包，数据包里有rpc版本信息、方法名、参数等。下面Zabbix类里的do_request方法就完成了将方法名和方法参数打包json后发送请求的过程。
class Zabbix(object): # ... skip other class methods def do_request(self, method, params=None): request_json = { &amp;#39;jsonrpc&amp;#39;: &amp;#39;2.0&amp;#39;, &amp;#39;method&amp;#39;: method, &amp;#39;params&amp;#39;: params or {}, &amp;#39;id&amp;#39;: self.id, } response = self.session.post( self.url, data=json.dumps(request_json), timeout=self.timeout ) 技巧 但是为了方便，我们在python里一般使用zabbixclient.host.get(args)这样的链式调用，而不用zabbixclient('host.get', args)这样的调用方式。pyzabbix的作者巧妙的实现了这样的转换。
class Zabbix(object): # ... skip other class methods def do_request(self, method, params=None): request_json = { &amp;#39;jsonrpc&amp;#39;: &amp;#39;2.0&amp;#39;, &amp;#39;method&amp;#39;: method, &amp;#39;params&amp;#39;: params or {}, &amp;#39;id&amp;#39;: self.id, } response = self.session.post( self.</description></item><item><title>Python Fabric库无法启动后台进程的问题和解决办法</title><link>https://sund.site/posts/2016/10/python-fabric%E5%BA%93%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%E5%90%8E%E5%8F%B0%E8%BF%9B%E7%A8%8B%E7%9A%84%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</link><pubDate>Wed, 19 Oct 2016 16:25:51 +0000</pubDate><guid>https://sund.site/posts/2016/10/python-fabric%E5%BA%93%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%E5%90%8E%E5%8F%B0%E8%BF%9B%E7%A8%8B%E7%9A%84%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</guid><description>问题和处理方法 Python 的 Fabric 库能够方便的远程操作Linux主机执行命令或传输文件。其实现方式就是底层实现ssh协议，例如执行下面代码的run方法，在目标主机上启动一个zabbix后台服务：
from fabric import api from fabric.tasks import Task class Zabbix(Task): def run(self, kwargs): with api.settings(host_string=&amp;#39;192.168.1.2&amp;#39;, user=&amp;#39;root&amp;#39;, password=&amp;#39;123456&amp;#39;): api.run(&amp;#39;service zabbix_agentd start&amp;#39;) 但是这样操作后虽然 Fabric 的 output 返回结果打印是启动成功，但是ssh登录目标主机，却不见 zabbix_agentd 进程，这说明没有真正启动起来。
我查询了 Fabric 文档，发现需要在api.run里添加参数pty=False。
api.run(&amp;#39;service zabbix_agentd start&amp;#39;， pty=False) 这样就成功启动了后台进程。
原因 什么是pty？ pty 是 pseudo-tty，众所周知 tty 是 Linux 支持输入与输出的终端设备，在 shell 下执行ps可以查看每个进程对应的tty设备号，如ttys0001。
pty 是为了解决远程连接时一方不希望对方直接ssh连接到主机上而诞生的「虚拟设备」，即伪tty，其原理是在远程主机和本地之间同时启动pty端口连接终端，可以类比进程间的通道，pty两端同时执行输入输出操作，如同本地直接连接到远程主机。但是一旦断开本地与远程主机的连接，pty就会结束所有刚才的进程。
根据网上的资料，Github 仓库的 ssh 连接就采用 pty， Github 不希望用户创建一个可与它的主机交互的 ssh 连接，所以采用这种模式。
Fabric 在默认情况下就采用 pty ，所以想要用 fabric 登录目标主机启动后台进程，必须加上 pty=False。
参考资料 https://github.</description></item><item><title>Python defaultdict结构作计数器的用法</title><link>https://sund.site/posts/2016/10/python-defaultdict%E7%BB%93%E6%9E%84%E4%BD%9C%E8%AE%A1%E6%95%B0%E5%99%A8%E7%9A%84%E7%94%A8%E6%B3%95/</link><pubDate>Tue, 11 Oct 2016 15:00:16 +0000</pubDate><guid>https://sund.site/posts/2016/10/python-defaultdict%E7%BB%93%E6%9E%84%E4%BD%9C%E8%AE%A1%E6%95%B0%E5%99%A8%E7%9A%84%E7%94%A8%E6%B3%95/</guid><description>在开发中经常需要用到计数器，当函数foo调用另一个函数bar时，为了确认调用bar之后处理的结果正确性，经常需要使用计数器来统计bar函数里处理成功了多少次。例如：
def foo(): success_num = bar() print success_num def bar(): n = 0 # 假设这个任务要迭代100次. count = 100 try: for i in count: # Do something. n += 1 except: pass finally: return n 但是，这里需要定义多个计数器变量来保存计数。每多一个bar函数就要多定义两次计数器。有没有类似C语言指针一样的方法，可以在foo中定义后直接传给bar，在bar里修改值呢。
众所周知，Python的参数传值实际传的是变量的拷贝，但是对于像字典、列表等非基本数据结构，实际传给参数的是这个数据结构的指针地址，修改指针地址指向的实际值就可以在函数内外实现传递数据的效果了。那么利用这个特性，可以结合python标准库collections里的defaultdict结构来实现一个更方便的计数器：
from collections import defaultdict def foo(): result = defaultdict(int) bar(result) print result def bar(result): count = 100 for i in count: try: # Do something. result[&amp;#39;success&amp;#39;] += 1 except: result[&amp;#39;fail&amp;#39;] += 1 这样，变量result就是存有正确计数和错误计数的字典。</description></item><item><title>怎样的建议才有价值</title><link>https://sund.site/posts/2016/08/%E6%80%8E%E6%A0%B7%E7%9A%84%E5%BB%BA%E8%AE%AE%E6%89%8D%E6%9C%89%E4%BB%B7%E5%80%BC/</link><pubDate>Thu, 25 Aug 2016 13:13:47 +0800</pubDate><guid>https://sund.site/posts/2016/08/%E6%80%8E%E6%A0%B7%E7%9A%84%E5%BB%BA%E8%AE%AE%E6%89%8D%E6%9C%89%E4%BB%B7%E5%80%BC/</guid><description>我想很多时候我们下决心做一件事，都要征求周围人的建议。这些建议有好有坏。坏的建议不但帮不了你，还会歪曲你对事实的认识。最近我在研究系统学习英文的方法，偶然在豆瓣小站里看到了开头那段话，对此深表认同。以我个人健身的经历，在报名私教课之前也寻求过很多人的建议。大部分会告诉你，健身(减肥)最重要的就是坚持。他们还会煞有介事的告诉你要「管住嘴，迈开腿」。在这一年里，我减掉了大概25KG体重，最大的感受——如果没有教练指导，我自己是断然不会坚持下来的。大部分的建议都像开头引用的那段话一样，是假大空的虚话，废话。
「任何一个通过自我磨练掌握了某一项具体技能或者在某领域内有一定造诣的人，都会对该领域有着起码的基本认知和独特的个人总结，如果你向其请教，得到的断然不会是“努力去做或者坚持最重要”之类的假大空的虚话」
—— 豆瓣英语学习大神 恶魔奶爸Sam
怎样征求有用的建议？结合我这些年减肥失败的教训，笼统的概括为：如果你要做一件长期投入的事儿，那么请咨询跟你情况类似，且做成了这件事的人。
首先「情况类似」很重要。因为很多人是科班出身，比如健身教练，他们大部分从上学起就被动养成了科学饮食、运动的好习惯。这些习惯并不是主动思考之后产生的，所以这些人在传授你知识时往往模糊不清的告诉你应该如何做，却说不出所以然。再比如英语系的学生就很难告诉你行之有效的英语学习方法，他们会告诉你大量看美剧英剧，背单词。但是你根本没有他们的学习环境，几乎不可能坚持下来。在语言学习中有「可理解输入」的概念，简单解释就是——你必须接受那些「你能够理解」的知识，否则你就吸收不了(记不住)。同理，知识在灌输给我们时候，如果不解释清楚来由，我们就很难有深刻认识。所以征求建议的对象如果跟你情况类似，你往往能听到更加切实可行的建议，比如在某个阶段应该注意什么，可能片面，但是有效。比如我在健身初期，咨询同学大伟很多健身的入门知识，关于人体代谢率，关于自重训练。这些东西，科班出身的教练通常不会细致地讲解给我。
其次「要征求做成了这件事的人」，这就是开头那段话的意义，那些没做成这件事儿的人，大都输在了「坚持」这两个字上。在把这一信息转告别人时，这些人就会主观放大坚持的重要性。你去征求这些自己都没成事儿的人建议，得到的都是些「管住嘴，迈开腿」，「坚持不懈」之类的屁话。我这一年锻炼和饮食的心得就是不断学习，反复修订计划和总结经验。另外还有一种傻逼理论「每个人都有各自的特点，要针对性制定计划，没有一种通用的解决办法」。倘若真是这样，还上学干什么？搞科研做什么？管理学、经济学都要歇菜了。别用个体差异给自己找借口了。
我猜很多有主见，独立思考的人都会认同一句话。这句话是罗永浩在一次鲁豫有约采访时候说的——「我们周围大部分人都是笨蛋」。虽然老罗最近在做手机上栽了大跟头，但是大多数人一辈子连栽这样跟头的机会都没有就入土了。可是骂他的成千上万人里有多少是经历过这过程的呢？传播那些人云亦云的虚话，不过是懒于思考，不求上进的人找好的借口。他们自己做不到的，就理所当然认为你也做不到。抱着「周围大部分人都是笨蛋」的理念，积极地去跟「对的人」征求「有价值」的建议，我相信一定能有所收获。</description></item><item><title>ZooKeeper 帮助手册</title><link>https://sund.site/posts/2014/10/zookeeper-%E5%B8%AE%E5%8A%A9%E6%89%8B%E5%86%8C/</link><pubDate>Tue, 14 Oct 2014 00:00:00 +0000</pubDate><guid>https://sund.site/posts/2014/10/zookeeper-%E5%B8%AE%E5%8A%A9%E6%89%8B%E5%86%8C/</guid><description>原文地址： http://zookeeper.apache.org/doc/r3.4.6/zookeeperProgrammers.html
本文假设你已经具有一定分布式计算的基础知识。你将在第一部分看到以下内容：
ZooKeeper数据模型 ZooKeeper Sessions ZooKeeper Watches 一致性保证(Consistency Guarantees) 接下来的4小节讲述了程序开发的实际应用：
创建模块——ZooKeeper操作指引 编程语言接口 简单示例演示程序的结构 常见问题和故障 本文的附录中包含和ZooKeeper相关的有用信息。
ZooKeeper的数据模型 ZooKeeper有一个类似分布式文件系统的命名体系。区别在于Zookeeper每个一个节点或子节点都可以拥有数据。节点路径是一个由斜线分开的绝对路径，注意没有相对路径。只要满足下面要求的unicode字符都可以作为节点路径：
空字符不能出现在路径名 不能出现以下字符: \u0001 - \u0019 and \u007F - \u009F 以下字符不允许使用: \ud800 -uF8FFF, \uFFF0-uFFFF, \uXFFFE - \uXFFFF (where X is a digit 1 - E), \uF0000 - \uFFFFF 字符&amp;quot;.&amp;ldquo;可以作为一个名字的一部分, 但是&amp;rdquo;.&amp;ldquo;和&amp;rdquo;..&amp;ldquo;不能单独作为相对路径使用, 以下用法都是无效的: &amp;ldquo;/a/b/./c&amp;quot;或者&amp;rdquo;/a/b/../c&amp;rdquo; &amp;ldquo;zookeeper&amp;quot;为保留字符 ZNodes ZooKeeper树结构中的节点被称为znode。各个znode维护着一组用来标记数据和访问权限发生变化的版本号。这些版本号组成的状态结构具有时间戳。Zookeeper使用版本号和时间戳来验证缓存状态，调整更新。 每次znode中的数据发生变化，znode的版本号增加。例如，每当一个客户端恢复数据时，它就接收这个版本的数据，而当一个客户端提交了更新或删除记录，它必须同时提供这个znode当前正在发生变化的数据的版本。如果这个版本和目前真实的版本不匹配，则提交无效。 __提示，在分布式程序中，一个字节点可以代表一个通用的主机，服务器，集群中的一员，客户端程序等。但是在Zookeeper中，znode代表数据节点，Servers代表组成了Zookeeper服务的机器; quorum peers refer to the servers that make up an ensemble; 客户端代表任何使用ZooKeeper服务的主机或程序。</description></item><item><title>macbook安装ubuntu</title><link>https://sund.site/posts/2013/01/macbook%E5%AE%89%E8%A3%85ubuntu/</link><pubDate>Fri, 04 Jan 2013 00:00:00 +0000</pubDate><guid>https://sund.site/posts/2013/01/macbook%E5%AE%89%E8%A3%85ubuntu/</guid><description>注意，ubuntu和xubuntu安装上有一定差别，请严格按照你选择的系统版本流程安装
ubuntu 准备工作 分区 这一步可以用命令行实现，也可以在mac下直接用磁盘工具分区，初学者建议后者。有经验的朋友可以在网上查询diskutils的用法，这是mac提供的分区工具
使用磁盘工具，打开左侧最上边磁盘位置（不是macosx，而是整个硬盘）的选项，右边会出现分区标签。选择分区，你可以用鼠标拖动轻松将macos的一部分划分给ubuntu使用。分区格式可以选择mac日志文件。其实选什么都一样，等会还要重新格式化。
把iso镜像转化为苹果电脑识别的img镜像 hdiutil convert /path/to/ubuntu.iso -format UDRW -o /path/to/target.img 命令中path/to/ubuntu.iso是你下载的iso路径，path/to/target.img自然是你要保存成img的路径
插入U盘，刻录镜像 先运行如下命令查询你U盘的设备名
diskutil list 这里假设U盘是disk1，执行
diskutil unmountDisk /dev/disk1 接下来执行命令刻录，
sudo dd if=/path/to/downloaded.img of=/dev/disk1 bs=1m ubuntu官网针对上一条命令可能出现的两种错误提示给出了解决办法：
If you see the error dd: Invalid number &amp;lsquo;1m&amp;rsquo;, you are using GNU dd. Use the same command but replace bs=1m with bs=1M.
If you see the error dd: /dev/disk1: Resource busy, make sure the disk is not in use.</description></item></channel></rss>