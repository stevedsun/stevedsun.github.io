<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>prometheus - Tag - 電波障害</title><link>https://sund.site/tags/prometheus/</link><description>prometheus - Tag - 電波障害</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 24 Nov 2022 12:26:23 +0800</lastBuildDate><atom:link href="https://sund.site/tags/prometheus/" rel="self" type="application/rss+xml"/><item><title>Implementing Prometheus Exporter for Fluentbit</title><link>https://sund.site/posts/2022/implementing-prometheus-exporter-for-fluentbit/</link><pubDate>Thu, 24 Nov 2022 12:26:23 +0800</pubDate><author>Steve Sun</author><guid>https://sund.site/posts/2022/implementing-prometheus-exporter-for-fluentbit/</guid><description><![CDATA[<h2 id="background">Background</h2>
<p>Fluent-bit is a great tool for logging and monitoring, many teams are using it to collect metrics and logs. Prometheus is also a popular tool for metrics analysis, but if you want to output Fluent-bit data to Prometheus, the only way is to use the node-exporter input plugin, which has fixed metrics and data format.</p>
<p>In our case, we want to export specific input data into Prometheus, therefore we have to implement our Prometheus exporter in a customized Fluent-bit output plugin.</p>
<p>Today I want to share the final solution for this case. The complete demo code can be found on this Github repo: <a href="https://github.com/stevedsun/fluent-bit-output-prometheus-demo">https://github.com/stevedsun/fluent-bit-output-prometheus-demo</a></p>
<h2 id="fluent-bit-output-plugin">Fluent-bit Output Plugin</h2>
<p>Fluent-bit provides a way to implement your own golang plugin. (See <a href="https://docs.fluentbit.io/manual/v/1.9-pre/development/golang-output-plugins" target="_blank" rel="noopener noreffer ">Fluent-bit Go Output Plugin</a>)</p>
<p>We can run an asynchronous HTTP server as the Prometheus exporter when Fluent-bit plugin initializing, and transform the Fluent-bit records to Prometheus metrics format when Fluent-bit flushing a record to output plugin.</p>
<p>To implement a Fluent-bit output plugin, there are four call-back functions we need to over write.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">//export FLBPluginRegister
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">FLBPluginRegister</span><span class="p">(</span><span class="nx">def</span> <span class="nx">unsafe</span><span class="p">.</span><span class="nx">Pointer</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
    <span class="c1">// Here we define the plugin name and description.
</span><span class="c1"></span>	<span class="k">return</span> <span class="nx">output</span><span class="p">.</span><span class="nf">FLBPluginRegister</span><span class="p">(</span><span class="nx">def</span><span class="p">,</span> <span class="s">&#34;promexporter&#34;</span><span class="p">,</span> <span class="s">&#34;Prometheus Exporter&#34;</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">//export FLBPluginInit
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">FLBPluginInit</span><span class="p">(</span><span class="nx">plugin</span> <span class="nx">unsafe</span><span class="p">.</span><span class="nx">Pointer</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
    <span class="c1">// We can extract output plugin parameters from `FLBPlguinConfigKey`.
</span><span class="c1"></span>	<span class="nx">user</span> <span class="o">:=</span> <span class="nx">output</span><span class="p">.</span><span class="nf">FLBPluginConfigKey</span><span class="p">(</span><span class="nx">plugin</span><span class="p">,</span> <span class="s">&#34;username&#34;</span><span class="p">)</span>
	<span class="nx">passwd</span> <span class="o">:=</span> <span class="nx">output</span><span class="p">.</span><span class="nf">FLBPluginConfigKey</span><span class="p">(</span><span class="nx">plugin</span><span class="p">,</span> <span class="s">&#34;password&#34;</span><span class="p">)</span>
    <span class="c1">// Here we can run a new Prometheus exporter server.
</span><span class="c1"></span>	<span class="nf">NewExporter</span><span class="p">()</span>
	<span class="k">return</span> <span class="nx">output</span><span class="p">.</span><span class="nx">FLB_OK</span>
<span class="p">}</span>

<span class="c1">//export FLBPluginFlushCtx
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">FLBPluginFlushCtx</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">data</span> <span class="nx">unsafe</span><span class="p">.</span><span class="nx">Pointer</span><span class="p">,</span> <span class="nx">length</span> <span class="nx">C</span><span class="p">.</span><span class="kt">int</span><span class="p">,</span> <span class="nx">tag</span> <span class="o">*</span><span class="nx">C</span><span class="p">.</span><span class="nx">char</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
    <span class="c1">// Here we process every record, extract it and ship to exporter
</span><span class="c1"></span>	<span class="nx">dec</span> <span class="o">:=</span> <span class="nx">output</span><span class="p">.</span><span class="nf">NewDecoder</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="nx">length</span><span class="p">))</span>
	<span class="k">for</span> <span class="p">{</span>
		<span class="c1">// Extract Record
</span><span class="c1"></span>		<span class="nx">ret</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">record</span> <span class="o">:=</span> <span class="nx">output</span><span class="p">.</span><span class="nf">GetRecord</span><span class="p">(</span><span class="nx">dec</span><span class="p">)</span>
		<span class="k">if</span> <span class="nx">ret</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
			<span class="k">break</span>
		<span class="p">}</span>

		<span class="k">for</span> <span class="nx">k</span><span class="p">,</span> <span class="nx">v</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">record</span> <span class="p">{</span>
			<span class="c1">// You have to extract record here, ship them to exporter.
</span><span class="c1"></span>		<span class="p">}</span>
	<span class="p">}</span>

	<span class="k">return</span> <span class="nx">output</span><span class="p">.</span><span class="nx">FLB_OK</span>
<span class="p">}</span>

<span class="c1">//export FLBPluginExit
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">FLBPluginExit</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">server</span><span class="p">.</span><span class="nx">srv</span><span class="p">.</span><span class="nf">Shutdown</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">TODO</span><span class="p">());</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
	<span class="p">}</span>

    <span class="c1">// Here we have to close go channel and daemon exporter server.
</span><span class="c1"></span>	<span class="nb">close</span><span class="p">(</span><span class="nx">collector</span><span class="p">.</span><span class="nx">buff</span><span class="p">)</span>
	<span class="nx">server</span><span class="p">.</span><span class="nx">wg</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>

	<span class="k">return</span> <span class="nx">output</span><span class="p">.</span><span class="nx">FLB_OK</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
<span class="p">}</span>

</code></pre></td></tr></table>
</div>
</div><div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw" aria-hidden="true"></i>Note<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>You should not remove the comment lines above function, they are important for building *.so file.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">//export FLBPluginExit
</code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<h2 id="the-exporter-http-server">The Exporter HTTP Server</h2>
<p>The next step is to implement the HTTP server, make it running on daemon.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">
<span class="c1">// Here we start a background server on port 8989, the server will handle `/metrics` path, prometheus exporter will implement the handler.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">startHttpServer</span><span class="p">(</span><span class="nx">wg</span> <span class="o">*</span><span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span><span class="p">,</span> <span class="nx">reg</span> <span class="o">*</span><span class="nx">prometheus</span><span class="p">.</span><span class="nx">Registry</span><span class="p">)</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Server</span> <span class="p">{</span>
	<span class="nx">srv</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">http</span><span class="p">.</span><span class="nx">Server</span><span class="p">{</span><span class="nx">Addr</span><span class="p">:</span> <span class="s">&#34;:8989&#34;</span><span class="p">}</span>

	<span class="nx">http</span><span class="p">.</span><span class="nf">Handle</span><span class="p">(</span><span class="s">&#34;/metrics&#34;</span><span class="p">,</span> <span class="nx">promhttp</span><span class="p">.</span><span class="nf">HandlerFor</span><span class="p">(</span>
		<span class="nx">reg</span><span class="p">,</span>
		<span class="nx">promhttp</span><span class="p">.</span><span class="nx">HandlerOpts</span><span class="p">{</span>
			<span class="nx">EnableOpenMetrics</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
			<span class="nx">Registry</span><span class="p">:</span>          <span class="nx">reg</span><span class="p">,</span>
		<span class="p">},</span>
	<span class="p">))</span>

	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
		<span class="k">defer</span> <span class="nx">wg</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">srv</span><span class="p">.</span><span class="nf">ListenAndServe</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ErrServerClosed</span> <span class="p">{</span>
			<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;ListenAndServe():&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
		<span class="p">}</span>
	<span class="p">}()</span>

	<span class="k">return</span> <span class="nx">srv</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">NewExporter</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">reg</span> <span class="o">:=</span> <span class="nx">prometheus</span><span class="p">.</span><span class="nf">NewRegistry</span><span class="p">()</span>
	<span class="nx">reg</span><span class="p">.</span><span class="nf">MustRegister</span><span class="p">(</span><span class="nx">collector</span><span class="p">)</span>

    <span class="c1">// Here, we start a new HTTP server and save the instance object into a golang sync.WaitGroup, so that we can watch its status in `FLBPluginExit`
</span><span class="c1"></span>	<span class="nx">server</span><span class="p">.</span><span class="nx">wg</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span><span class="p">{}</span>
	<span class="nx">server</span><span class="p">.</span><span class="nx">wg</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
	<span class="nx">server</span><span class="p">.</span><span class="nx">srv</span> <span class="p">=</span> <span class="nf">startHttpServer</span><span class="p">(</span><span class="nx">server</span><span class="p">.</span><span class="nx">wg</span><span class="p">,</span> <span class="nx">reg</span><span class="p">)</span>
<span class="p">}</span>

</code></pre></td></tr></table>
</div>
</div><h2 id="the-exporter-collector">The Exporter Collector</h2>
<p>Now we have an HTTP server, but if we want to make it as an exporter, we have to define the <strong>collector</strong>. The collector is a Prometheus concept which implements two call-back function:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">
<span class="c1">// Here for instance, we define metrics to collect cpu info, which reuses the default Fluent-bit CPU metrics input data
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">NewMyCollector</span><span class="p">()</span> <span class="o">*</span><span class="nx">myCollector</span> <span class="p">{</span>
	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">myCollector</span><span class="p">{</span>
		<span class="nx">metrics</span><span class="p">:</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">prometheus</span><span class="p">.</span><span class="nx">Desc</span><span class="p">{</span>
			<span class="s">&#34;cpu&#34;</span><span class="p">:</span> <span class="nx">prometheus</span><span class="p">.</span><span class="nf">NewDesc</span><span class="p">(</span>
				<span class="s">&#34;cpu&#34;</span><span class="p">,</span>
				<span class="s">&#34;Collect CPU usage&#34;</span><span class="p">,</span>
				<span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;cpu&#34;</span><span class="p">,</span> <span class="s">&#34;mode&#34;</span><span class="p">},</span> <span class="kc">nil</span><span class="p">,</span>
			<span class="p">),</span>
		<span class="p">},</span>
		<span class="c1">// this buff is a golang channel object, which receive data sending from `FLBPluginFlushCtx` function
</span><span class="c1"></span>		<span class="nx">buff</span><span class="p">:</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">cpuMetrics</span><span class="p">),</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="c1">// `Describe` send our metrics name and defination to Prometheus exporter
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">collector</span> <span class="o">*</span><span class="nx">myCollector</span><span class="p">)</span> <span class="nf">Describe</span><span class="p">(</span><span class="nx">ch</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="o">*</span><span class="nx">prometheus</span><span class="p">.</span><span class="nx">Desc</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">desc</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">collector</span><span class="p">.</span><span class="nx">metrics</span> <span class="p">{</span>
		<span class="nx">ch</span> <span class="o">&lt;-</span> <span class="nx">desc</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="c1">// `Collect` will read data from golang channel `buff` and send data to HTTP server handler
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">collector</span> <span class="o">*</span><span class="nx">myCollector</span><span class="p">)</span> <span class="nf">Collect</span><span class="p">(</span><span class="nx">ch</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="nx">prometheus</span><span class="p">.</span><span class="nx">Metric</span><span class="p">)</span> <span class="p">{</span>

	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">desc</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">collector</span><span class="p">.</span><span class="nx">metrics</span> <span class="p">{</span>
		<span class="k">select</span> <span class="p">{</span>
		<span class="k">case</span> <span class="nx">metric</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">collector</span><span class="p">.</span><span class="nx">buff</span><span class="p">:</span>
			<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">metric</span><span class="p">.</span><span class="nx">cpu</span><span class="p">,</span> <span class="nx">metric</span><span class="p">.</span><span class="nx">mode</span><span class="p">,</span> <span class="nx">metric</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span>
			<span class="nx">ch</span> <span class="o">&lt;-</span> <span class="nx">prometheus</span><span class="p">.</span><span class="nf">MustNewConstMetric</span><span class="p">(</span><span class="nx">desc</span><span class="p">,</span> <span class="nx">prometheus</span><span class="p">.</span><span class="nx">GaugeValue</span><span class="p">,</span> <span class="nx">metric</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span> <span class="nx">metric</span><span class="p">.</span><span class="nx">cpu</span><span class="p">,</span> <span class="nx">metric</span><span class="p">.</span><span class="nx">mode</span><span class="p">)</span>
		<span class="k">default</span><span class="p">:</span>
			<span class="k">return</span>
		<span class="p">}</span>
	<span class="p">}</span>

<span class="p">}</span>

<span class="kd">var</span> <span class="nx">collector</span> <span class="p">=</span> <span class="nf">NewMyCollector</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="building-so-file-and-running-in-fluent-bit">Building so file and running in Fluent-bit</h2>
<p>The last but not least, building golang plugin into so file.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">go build -buildmode<span class="o">=</span>c-shared -o out_prom_exporter.so prom_exporter.go
</code></pre></td></tr></table>
</div>
</div><p>Run Fluent-bit with CLI flags:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">fluent-bit -v -e ./out_prom_exporter.so -i cpu -o promexporter
</code></pre></td></tr></table>
</div>
</div><p>That&rsquo;s all steps to implement a customized Fluent-bit Prometheus exporter plugin. See more details, please go to Github repo <a href="https://github.com/stevedsun/fluent-bit-output-prometheus-demo">https://github.com/stevedsun/fluent-bit-output-prometheus-demo</a>.</p>
]]></description></item></channel></rss>