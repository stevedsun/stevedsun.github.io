<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on Steve Sun</title><link>https://sund.site/categories/go/</link><description>Recent content in Go on Steve Sun</description><generator>Hugo</generator><language>zh-CN</language><copyright>Copyright Â© 2013-2025, Steve Sun.</copyright><lastBuildDate>Wed, 13 Sep 2023 09:19:18 +0800</lastBuildDate><follow_challenge><feedId>41397727810093074</feedId><userId>56666701051455488</userId></follow_challenge><atom:link href="https://sund.site/categories/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Go Server Side Events</title><link>https://sund.site/posts/2023/go-server-side-events/</link><pubDate>Wed, 13 Sep 2023 09:19:18 +0800</pubDate><guid>https://sund.site/posts/2023/go-server-side-events/</guid><description>&lt;p&gt;Server-Sent Events (&lt;strong&gt;SSE&lt;/strong&gt;) is a technology that enables real-time communication between a web browser and a server. It allows the server to send updates or event notifications to the browser without the need for the browser to repeatedly make requests.&lt;/p&gt;
&lt;p&gt;SSE is often used in applications that require real-time updates, such as chat applications, social media feeds, stock market tickers, or notifications systems. It provides a lightweight and efficient way to deliver server-side updates to clients, improving responsiveness and reducing unnecessary network traffic.&lt;/p&gt;
&lt;p&gt;Following is an example of SSE in golang framework &lt;a href="https://github.com/gin-gonic/gin"&gt;Gin&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;The Gin API handler &lt;code&gt;SSEDemoGetStatus&lt;/code&gt; will call &lt;code&gt;service.CheckStatus()&lt;/code&gt; every 10 seconds and respond to client with message event.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fc5fa3"&gt;func&lt;/span&gt; &lt;span style="color:#41a1c0"&gt;SSEDemoGetStatus&lt;/span&gt;(c *gin.Context) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	chanStream := &lt;span style="color:#d0a8ff"&gt;make&lt;/span&gt;(&lt;span style="color:#fc5fa3"&gt;chan&lt;/span&gt; &lt;span style="color:#fc5fa3"&gt;interface&lt;/span&gt;{}, StreamBufferSize)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	clientGone := c.Writer.&lt;span style="color:#41a1c0"&gt;CloseNotify&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#fc5fa3"&gt;go&lt;/span&gt; &lt;span style="color:#fc5fa3"&gt;func&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		&lt;span style="color:#fc5fa3"&gt;defer&lt;/span&gt; &lt;span style="color:#d0a8ff"&gt;close&lt;/span&gt;(chanStream)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		ticker := time.&lt;span style="color:#41a1c0"&gt;NewTicker&lt;/span&gt;(&lt;span style="color:#d0bf69"&gt;10&lt;/span&gt;*time.Second)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		&lt;span style="color:#fc5fa3"&gt;defer&lt;/span&gt; ticker.&lt;span style="color:#41a1c0"&gt;Stop&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		&lt;span style="color:#fc5fa3"&gt;for&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;			status := service.&lt;span style="color:#41a1c0"&gt;CheckStatus&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;			chanStream &amp;lt;- status
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;			&lt;span style="color:#fc5fa3"&gt;select&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;			&lt;span style="color:#fc5fa3"&gt;case&lt;/span&gt; &amp;lt;-ticker.C:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;				&lt;span style="color:#fc5fa3"&gt;continue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;			&lt;span style="color:#fc5fa3"&gt;case&lt;/span&gt; &amp;lt;-clientGone:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;				&lt;span style="color:#fc5fa3"&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;			}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	}()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	c.Writer.&lt;span style="color:#41a1c0"&gt;Header&lt;/span&gt;().&lt;span style="color:#41a1c0"&gt;Set&lt;/span&gt;(&lt;span style="color:#fc6a5d"&gt;&amp;#34;Connection&amp;#34;&lt;/span&gt;, &lt;span style="color:#fc6a5d"&gt;&amp;#34;keep-alive&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	c.Writer.&lt;span style="color:#41a1c0"&gt;Header&lt;/span&gt;().&lt;span style="color:#41a1c0"&gt;Set&lt;/span&gt;(&lt;span style="color:#fc6a5d"&gt;&amp;#34;X-Accel-Buffering&amp;#34;&lt;/span&gt;, &lt;span style="color:#fc6a5d"&gt;&amp;#34;no&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	c.Writer.&lt;span style="color:#41a1c0"&gt;Header&lt;/span&gt;().&lt;span style="color:#41a1c0"&gt;Set&lt;/span&gt;(&lt;span style="color:#fc6a5d"&gt;&amp;#34;Cache-Control&amp;#34;&lt;/span&gt;, &lt;span style="color:#fc6a5d"&gt;&amp;#34;no-cache&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	c.&lt;span style="color:#41a1c0"&gt;Stream&lt;/span&gt;(&lt;span style="color:#fc5fa3"&gt;func&lt;/span&gt;(w io.Writer) &lt;span style="color:#fc5fa3"&gt;bool&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		&lt;span style="color:#fc5fa3"&gt;if&lt;/span&gt; msg, ok := &amp;lt;-chanStream; ok {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;			c.&lt;span style="color:#41a1c0"&gt;SSEvent&lt;/span&gt;(&lt;span style="color:#fc6a5d"&gt;&amp;#34;message&amp;#34;&lt;/span&gt;, msg)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;			&lt;span style="color:#fc5fa3"&gt;return&lt;/span&gt; &lt;span style="color:#fc5fa3"&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		c.&lt;span style="color:#41a1c0"&gt;SSEvent&lt;/span&gt;(&lt;span style="color:#fc6a5d"&gt;&amp;#34;status&amp;#34;&lt;/span&gt;, &lt;span style="color:#fc6a5d"&gt;&amp;#34;Done&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		&lt;span style="color:#fc5fa3"&gt;return&lt;/span&gt; &lt;span style="color:#fc5fa3"&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	})
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this way, the client side will receive an HTTP request that establishes an TCP connection that continuely sent data from server side.&lt;/p&gt;
&lt;p&gt;What have to be noticed is the HTTP header. In my case, I need to tell web server (like Nginx) do not cache the TCP traffic. For the javascript &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/EventSource"&gt;EventSource&lt;/a&gt; API, the header &lt;code&gt;Connection: keep-alive&lt;/code&gt; is important.&lt;/p&gt;
&lt;p&gt;A better place to put these headers is the Gin middleware function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fc5fa3"&gt;func&lt;/span&gt; &lt;span style="color:#41a1c0"&gt;HeadersMiddleware&lt;/span&gt;() gin.HandlerFunc {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#fc5fa3"&gt;return&lt;/span&gt; &lt;span style="color:#fc5fa3"&gt;func&lt;/span&gt;(c *gin.Context) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		c.Writer.&lt;span style="color:#41a1c0"&gt;Header&lt;/span&gt;().&lt;span style="color:#41a1c0"&gt;Set&lt;/span&gt;(&lt;span style="color:#fc6a5d"&gt;&amp;#34;Content-Type&amp;#34;&lt;/span&gt;, &lt;span style="color:#fc6a5d"&gt;&amp;#34;text/event-stream&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		c.Writer.&lt;span style="color:#41a1c0"&gt;Header&lt;/span&gt;().&lt;span style="color:#41a1c0"&gt;Set&lt;/span&gt;(&lt;span style="color:#fc6a5d"&gt;&amp;#34;Cache-Control&amp;#34;&lt;/span&gt;, &lt;span style="color:#fc6a5d"&gt;&amp;#34;no-cache&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		c.Writer.&lt;span style="color:#41a1c0"&gt;Header&lt;/span&gt;().&lt;span style="color:#41a1c0"&gt;Set&lt;/span&gt;(&lt;span style="color:#fc6a5d"&gt;&amp;#34;Connection&amp;#34;&lt;/span&gt;, &lt;span style="color:#fc6a5d"&gt;&amp;#34;keep-alive&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		c.Writer.&lt;span style="color:#41a1c0"&gt;Header&lt;/span&gt;().&lt;span style="color:#41a1c0"&gt;Set&lt;/span&gt;(&lt;span style="color:#fc6a5d"&gt;&amp;#34;Transfer-Encoding&amp;#34;&lt;/span&gt;, &lt;span style="color:#fc6a5d"&gt;&amp;#34;chunked&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		c.&lt;span style="color:#41a1c0"&gt;Next&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Looking for more details please move to &lt;a href="https://github.com/gin-gonic/examples/blob/master/server-sent-event/main.go"&gt;Gin SSE example&lt;/a&gt;.&lt;/p&gt;</description></item><item><title>Go åå­æ³æ¼å¸¸è§æ¨¡å¼</title><link>https://sund.site/posts/2023/goroutine-leak/</link><pubDate>Tue, 27 Jun 2023 14:46:59 +0800</pubDate><guid>https://sund.site/posts/2023/goroutine-leak/</guid><description>&lt;p&gt;æè¿å¨å·¥ä½ä¸­ææ¥ Go è¯­è¨åå­æ³æ¼é®é¢æ¶ï¼åç°&lt;a href="https://www.uber.com/blog/leakprof-featherlight-in-production-goroutine-leak-detection/"&gt;è¿ç¯ Uber åçåå®¢&lt;/a&gt;ï¼å¶ä¸­åäº«äºå ç§å¸¸è§ç goroutine åå­æ³æ¼æ¨¡å¼ï¼äºæ¯ææ´çäº goroutine çç¸å³é®é¢ï¼å¸ææ´å¤äººæç´¢å°å°è¿ç¯æç« ï¼å¸®å©å¤§å®¶å¿«éå®ä½åå­æ³æ¼é®é¢ã&lt;/p&gt;
&lt;h2 id="goroutine-åå­æ³æ¼çåå "&gt;Goroutine åå­æ³æ¼çåå &lt;/h2&gt;
&lt;p&gt;Go è¯­è¨çåå­æ³æ¼éå¸¸å ä¸ºéè¯¯å°ä½¿ç¨ goroutine å channelãä¾å¦ä»¥ä¸å ç§æåµï¼&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;å¨ goroutine éæå¼ä¸ä¸ªè¿æ¥ï¼å¦ gRPCï¼ä½æ¯å¿è®° close&lt;/li&gt;
&lt;li&gt;å¨ goroutine éçå¨å±åéå¯¹è±¡æ²¡æéæ¾&lt;/li&gt;
&lt;li&gt;å¨ goroutine éè¯» channelï¼ ä½æ¯æ²¡æåå¥ç«¯ï¼èè¢«é»å¡&lt;/li&gt;
&lt;li&gt;å¨ goroutine éåå¥æ ç¼å²ç channelï¼ä½æ¯ç±äº channel çè¯»ç«¯è¢«å¶ä»åç¨å³é­èé»å¡&lt;/li&gt;
&lt;li&gt;å¨ goroutine éåå¥æç¼å²ç channelï¼ä½æ¯ channel ç¼å²å·²æ»¡&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;è¿å ç§æåµï¼éå¸¸æºæå¨å¤æçä»£ç éé»è¾éï¼å¾é¾è°è¯åç°é®é¢ãå æ­¤è¡çåºä»¥ä¸å ç§æ¥å¸¸å·¥ä½ä¸­&lt;strong&gt;æå®¹æåºç°é®é¢çæ¨¡å¼&lt;/strong&gt;ã&lt;/p&gt;
&lt;h2 id="å¸¸è§-goroutine-åå­æ³æ¼æ¨¡å¼"&gt;å¸¸è§ Goroutine åå­æ³æ¼æ¨¡å¼&lt;/h2&gt;
&lt;h3 id="premature-function-return-åè½è¿æ©è¿å"&gt;Premature Function Return /åè½è¿æ©è¿å&lt;/h3&gt;
&lt;p&gt;ä¸ä¸ª goroutine è¦åå¥ channelï¼ä½æ¯å¨å¦ä¸ä¸ªç«¯æå¤éåºå¯¼è´ channel è¯»åçä»£ç æ²¡ææ§è¡ã&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fc5fa3"&gt;func&lt;/span&gt; &lt;span style="color:#41a1c0"&gt;Example&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; a := &lt;span style="color:#d0bf69"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; c := &lt;span style="color:#d0a8ff"&gt;make&lt;/span&gt;(&lt;span style="color:#fc5fa3"&gt;chan&lt;/span&gt; &lt;span style="color:#fc5fa3"&gt;error&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#fc5fa3"&gt;go&lt;/span&gt; &lt;span style="color:#fc5fa3"&gt;func&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; c &amp;lt;- err
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#fc5fa3"&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#6c7986"&gt;// do something&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#fc5fa3"&gt;if&lt;/span&gt; a &amp;gt; &lt;span style="color:#d0bf69"&gt;0&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#fc5fa3"&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#6c7986"&gt;// do something&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; err := &amp;lt;-c
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ä»£ç ä¸­ä¸»è¿ç¨å¨&lt;code&gt;if a &amp;gt; 0&lt;/code&gt; å¤ returnï¼å¯¼è´ channel æ æ³åå¥èè¢«é»å¡ã&lt;/p&gt;
&lt;p&gt;è§£å³è¿ç§é®é¢çä¸ä¸ªæè·¯æ¯ææ ç¼å² channel è½¬åä¸ºç¼å²å¤§å°ä¸º 1 ç channelã&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;c := &lt;span style="color:#d0a8ff"&gt;make&lt;/span&gt;(&lt;span style="color:#fc5fa3"&gt;chan&lt;/span&gt; &lt;span style="color:#fc5fa3"&gt;error&lt;/span&gt;, &lt;span style="color:#d0bf69"&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;æç¼å² channel å³ä½¿æ²¡æè¯»åæä½ï¼ä¹ä¸ä¼é»å¡ã&lt;/p&gt;
&lt;h3 id="the-timeout-leak-è¶æ¶æ³æ¼"&gt;The Timeout Leak /è¶æ¶æ³æ¼&lt;/h3&gt;
&lt;p&gt;è¿æ¯æä»¬å·¥ä½ä¸­éå°çé®é¢ï¼ç»å¸¸éè¦æ§è¡ä¸ä¸ªå¯è½è¶æ¶çå¼æ­¥æä½æ¶è¢«ä½¿ç¨ã&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fc5fa3"&gt;func&lt;/span&gt; &lt;span style="color:#41a1c0"&gt;Example&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; timeoutOption := &lt;span style="color:#41a1c0"&gt;SomeTimeoutOption&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; done := &lt;span style="color:#d0a8ff"&gt;make&lt;/span&gt;(&lt;span style="color:#fc5fa3"&gt;chan&lt;/span&gt; &lt;span style="color:#fc5fa3"&gt;any&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#fc5fa3"&gt;go&lt;/span&gt; &lt;span style="color:#fc5fa3"&gt;func&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; done &amp;lt;- result
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#fc5fa3"&gt;select&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#fc5fa3"&gt;case&lt;/span&gt; &amp;lt;- done:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#fc5fa3"&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#fc5fa3"&gt;case&lt;/span&gt; &amp;lt;- timeoutOption.&lt;span style="color:#41a1c0"&gt;Timeout&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#fc5fa3"&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;å¨è¿æ®µä»£ç éï¼ä¸æ¦ timeoutOption æä½è¶æ¶ï¼å°±ä¼éç¥ selectï¼æ¥çç¨åºéåºï¼äºæ¯ goroutine åå¥ done çæä½è¢«é»å¡èæ æ³éåºã&lt;/p&gt;
&lt;p&gt;è§£å³æè·¯åä¸ä¸ä¸ªæ¨¡å¼ï¼ç¨æç¼å² channel æ¿ä»£æ ç¼å² channelã&lt;/p&gt;
&lt;h3 id="the-ncast-leak-å¤ç«¯è¯»åæ³æ¼"&gt;The NCast Leak /å¤ç«¯è¯»åæ³æ¼&lt;/h3&gt;
&lt;p&gt;å¦æ channel çè¯»ç«¯åªæä¸ä¸ªï¼ä½æ¯åç«¯æå¤ä¸ªï¼å°±ä¼åçè¿ç§æåµã&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fc5fa3"&gt;func&lt;/span&gt; &lt;span style="color:#41a1c0"&gt;Example&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; c := &lt;span style="color:#d0a8ff"&gt;make&lt;/span&gt;(&lt;span style="color:#fc5fa3"&gt;chan&lt;/span&gt; &lt;span style="color:#fc5fa3"&gt;any&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#fc5fa3"&gt;for&lt;/span&gt; _, i := &lt;span style="color:#fc5fa3"&gt;range&lt;/span&gt; items {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#fc5fa3"&gt;go&lt;/span&gt; &lt;span style="color:#fc5fa3"&gt;func&lt;/span&gt;(c &lt;span style="color:#fc5fa3"&gt;chan&lt;/span&gt; &lt;span style="color:#fc5fa3"&gt;any&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; c &amp;lt;- result
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }(c)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; data := &amp;lt;- c
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#fc5fa3"&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;è¿ç§æåµä¹éç¨äºâå¤ä¸ªåç«¯ä¸ä¸ªè¯»ç«¯âçæåµï¼è§£å³æ¹æ³æ¯æ channel è®¾ç½®æååæè¯»æ°éä¸è´çç¼å²æ°ã&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;c := &lt;span style="color:#d0a8ff"&gt;make&lt;/span&gt;(&lt;span style="color:#fc5fa3"&gt;chan&lt;/span&gt; &lt;span style="color:#fc5fa3"&gt;any&lt;/span&gt;, &lt;span style="color:#d0a8ff"&gt;len&lt;/span&gt;(items))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="channel-iteration-misuse-ééè¿­ä»£è¯¯ç¨"&gt;Channel Iteration Misuse /ééè¿­ä»£è¯¯ç¨&lt;/h3&gt;
&lt;p&gt;Go æ¯æä¸ç§ç¹æ§ &lt;a href="https://gobyexample.com/range-over-channels"&gt;&amp;ldquo;Range over channels&amp;rdquo;&lt;/a&gt;, å¯ä»¥ç¨ range æ¥å¾ªç¯è¯»å channel çåå®¹ã&lt;/p&gt;
&lt;p&gt;ä½æ¯ä¸æ¦è¯»åä¸å°åå®¹ï¼range å°±ä¼ç­å¾ channel çåå¥ï¼è range å¦ææ­£å¥½å¨ goroutine åé¨ï¼è¿ä¸ª goroutine å°±ä¼è¢«é»å¡ã&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fc5fa3"&gt;func&lt;/span&gt; &lt;span style="color:#41a1c0"&gt;Example&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; wg := &amp;amp;sync.WaitGroup{}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; c := &lt;span style="color:#d0a8ff"&gt;make&lt;/span&gt;(&lt;span style="color:#fc5fa3"&gt;chan&lt;/span&gt; &lt;span style="color:#fc5fa3"&gt;any&lt;/span&gt;, &lt;span style="color:#d0bf69"&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#fc5fa3"&gt;for&lt;/span&gt; _, i := items {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; wg.&lt;span style="color:#41a1c0"&gt;Add&lt;/span&gt;(&lt;span style="color:#d0bf69"&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#fc5fa3"&gt;go&lt;/span&gt; &lt;span style="color:#fc5fa3"&gt;func&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; c &amp;lt;- data
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#fc5fa3"&gt;go&lt;/span&gt; &lt;span style="color:#fc5fa3"&gt;func&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#fc5fa3"&gt;for&lt;/span&gt; data := &lt;span style="color:#fc5fa3"&gt;range&lt;/span&gt; c {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; wg.&lt;span style="color:#41a1c0"&gt;Done&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; wg.&lt;span style="color:#41a1c0"&gt;Wait&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;è§£å³è¿ä¸ªé®é¢çæ¹å¼æå¨å®ä¹å³é­ channelã&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;wg := &amp;amp;sync.WaitGroup{}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;c := &lt;span style="color:#d0a8ff"&gt;make&lt;/span&gt;(&lt;span style="color:#fc5fa3"&gt;chan&lt;/span&gt; &lt;span style="color:#fc5fa3"&gt;any&lt;/span&gt;, &lt;span style="color:#d0bf69"&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fc5fa3"&gt;defer&lt;/span&gt; &lt;span style="color:#d0a8ff"&gt;close&lt;/span&gt;(c)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fd8f3f"&gt;//...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;è¿æ ·å¨ WaitGroup å¨é¨ç»æåï¼ä¸»ç¨åºä¼å³é­ channelï¼ä»èè®©å¼æ­¥ç goroutine åé¨ç range éåºå¾ªç¯ç­å¾ã&lt;/p&gt;
&lt;h2 id="å°ç»"&gt;å°ç»&lt;/h2&gt;
&lt;p&gt;Goroutine åå­æ³æ¼æ¯ Go è¯­è¨æå®¹æåççåå­æ³æ¼æåµï¼å®éå¸¸ä¼´éçéè¯¯å°ä½¿ç¨ goroutine å channelãè channel çç¹æ®ç¨æ³å¦ select å range åè®© channel é»å¡åå¾æ´å éè½ä¸æåç°ï¼è¿èå¢å ææ¥åå­æ³æ¼çé¾åº¦ã&lt;/p&gt;
&lt;p&gt;å¨å goroutine åè°è¯åå­æ³æ¼é®é¢æ¶ï¼è¦éç¹å³æ³¨ channel ç¸å³çæä½ï¼å°¤å¶æ¶åå°æä¸­åä¸¾çåç±»æ¨¡å¼ï¼åè½è¿æ©è¿åãè¶æ¶æ³æ¼ãå¤ç«¯è¯»åæ³æ¼ãééè¿­ä»£è¯¯ç¨ã&lt;/p&gt;</description></item><item><title>Implementing a Prometheus Exporter for Fluent-bit</title><link>https://sund.site/posts/2022/implementing-prometheus-exporter-for-fluentbit/</link><pubDate>Thu, 24 Nov 2022 12:26:23 +0800</pubDate><guid>https://sund.site/posts/2022/implementing-prometheus-exporter-for-fluentbit/</guid><description>&lt;h2 id="background"&gt;Background&lt;/h2&gt;
&lt;p&gt;Fluent-bit is a great tool for logging and monitoring, many teams are using it to collect metrics and logs. Prometheus is also a popular tool for metrics analysis, but if you want to output Fluent-bit data to Prometheus, the only way is to use the node-exporter input plugin, which has fixed metrics and data format.&lt;/p&gt;
&lt;p&gt;In our case, we want to export specific input data into Prometheus, therefore we have to implement our Prometheus exporter in a customized Fluent-bit output plugin.&lt;/p&gt;
&lt;p&gt;Today I want to share the final solution for this case. The complete demo code can be found on this Github repo: &lt;a href="https://github.com/stevedsun/fluent-bit-output-prometheus-demo"&gt;https://github.com/stevedsun/fluent-bit-output-prometheus-demo&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="fluent-bit-output-plugin"&gt;Fluent-bit Output Plugin&lt;/h2&gt;
&lt;p&gt;Fluent-bit provides a way to implement your Golang plugin. (See &lt;a href="https://docs.fluentbit.io/manual/v/1.9-pre/development/golang-output-plugins"&gt;Fluent-bit Go Output Plugin&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;We can run an asynchronous HTTP server as the Prometheus exporter when Fluent-bit plugin initializing, and transform the Fluent-bit records to Prometheus metrics format when Fluent-bit flushes a record to the output plugin.&lt;/p&gt;
&lt;p&gt;To implement a Fluent-bit output plugin, there are four call-back functions we need to overwrite.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fd8f3f"&gt;//export FLBPluginRegister&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fc5fa3"&gt;func&lt;/span&gt; &lt;span style="color:#41a1c0"&gt;FLBPluginRegister&lt;/span&gt;(def unsafe.Pointer) &lt;span style="color:#fc5fa3"&gt;int&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#6c7986"&gt;// Here we define the plugin name and description.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#fc5fa3"&gt;return&lt;/span&gt; output.&lt;span style="color:#41a1c0"&gt;FLBPluginRegister&lt;/span&gt;(def, &lt;span style="color:#fc6a5d"&gt;&amp;#34;promexporter&amp;#34;&lt;/span&gt;, &lt;span style="color:#fc6a5d"&gt;&amp;#34;Prometheus Exporter&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fd8f3f"&gt;//export FLBPluginInit&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fc5fa3"&gt;func&lt;/span&gt; &lt;span style="color:#41a1c0"&gt;FLBPluginInit&lt;/span&gt;(plugin unsafe.Pointer) &lt;span style="color:#fc5fa3"&gt;int&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#6c7986"&gt;// We can extract output plugin parameters from `FLBPlguinConfigKey`.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	user := output.&lt;span style="color:#41a1c0"&gt;FLBPluginConfigKey&lt;/span&gt;(plugin, &lt;span style="color:#fc6a5d"&gt;&amp;#34;username&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	passwd := output.&lt;span style="color:#41a1c0"&gt;FLBPluginConfigKey&lt;/span&gt;(plugin, &lt;span style="color:#fc6a5d"&gt;&amp;#34;password&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#6c7986"&gt;// Here we can run a new Prometheus exporter server.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#41a1c0"&gt;NewExporter&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#fc5fa3"&gt;return&lt;/span&gt; output.FLB_OK
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fd8f3f"&gt;//export FLBPluginFlushCtx&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fc5fa3"&gt;func&lt;/span&gt; &lt;span style="color:#41a1c0"&gt;FLBPluginFlushCtx&lt;/span&gt;(ctx, data unsafe.Pointer, length C.&lt;span style="color:#fc5fa3"&gt;int&lt;/span&gt;, tag *C.char) &lt;span style="color:#fc5fa3"&gt;int&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#6c7986"&gt;// Here we process every record, extract it and ship to exporter&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	dec := output.&lt;span style="color:#41a1c0"&gt;NewDecoder&lt;/span&gt;(data, &lt;span style="color:#d0a8ff"&gt;int&lt;/span&gt;(length))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#fc5fa3"&gt;for&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		&lt;span style="color:#6c7986"&gt;// Extract Record&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		ret, _, record := output.&lt;span style="color:#41a1c0"&gt;GetRecord&lt;/span&gt;(dec)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		&lt;span style="color:#fc5fa3"&gt;if&lt;/span&gt; ret != &lt;span style="color:#d0bf69"&gt;0&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;			&lt;span style="color:#fc5fa3"&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		&lt;span style="color:#fc5fa3"&gt;for&lt;/span&gt; k, v := &lt;span style="color:#fc5fa3"&gt;range&lt;/span&gt; record {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;			&lt;span style="color:#6c7986"&gt;// You have to extract record here, ship them to exporter.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#fc5fa3"&gt;return&lt;/span&gt; output.FLB_OK
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fd8f3f"&gt;//export FLBPluginExit&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fc5fa3"&gt;func&lt;/span&gt; &lt;span style="color:#41a1c0"&gt;FLBPluginExit&lt;/span&gt;() &lt;span style="color:#fc5fa3"&gt;int&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#fc5fa3"&gt;if&lt;/span&gt; err := server.srv.&lt;span style="color:#41a1c0"&gt;Shutdown&lt;/span&gt;(context.&lt;span style="color:#41a1c0"&gt;TODO&lt;/span&gt;()); err != &lt;span style="color:#fc5fa3"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		&lt;span style="color:#d0a8ff"&gt;panic&lt;/span&gt;(err)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#6c7986"&gt;// Here we have to close go channel and daemon exporter server.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#d0a8ff"&gt;close&lt;/span&gt;(collector.buff)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	server.wg.&lt;span style="color:#41a1c0"&gt;Wait&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#fc5fa3"&gt;return&lt;/span&gt; output.FLB_OK
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fc5fa3"&gt;func&lt;/span&gt; &lt;span style="color:#41a1c0"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;! You should not remove the comment lines above the function, they are important for building .so files.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; //export FLBPluginExit
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="the-exporter-http-server"&gt;The Exporter HTTP Server&lt;/h2&gt;
&lt;p&gt;The next step is to implement the HTTP server and make it run on a daemon.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6c7986"&gt;// Here we start a background server on port 8989, the server will handle `/metrics` path, prometheus exporter will implement the handler.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fc5fa3"&gt;func&lt;/span&gt; &lt;span style="color:#41a1c0"&gt;startHttpServer&lt;/span&gt;(wg *sync.WaitGroup, reg *prometheus.Registry) *http.Server {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	srv := &amp;amp;http.Server{Addr: &lt;span style="color:#fc6a5d"&gt;&amp;#34;:8989&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	http.&lt;span style="color:#41a1c0"&gt;Handle&lt;/span&gt;(&lt;span style="color:#fc6a5d"&gt;&amp;#34;/metrics&amp;#34;&lt;/span&gt;, promhttp.&lt;span style="color:#41a1c0"&gt;HandlerFor&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		reg,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		promhttp.HandlerOpts{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;			EnableOpenMetrics: &lt;span style="color:#fc5fa3"&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;			Registry: reg,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		},
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#fc5fa3"&gt;go&lt;/span&gt; &lt;span style="color:#fc5fa3"&gt;func&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		&lt;span style="color:#fc5fa3"&gt;defer&lt;/span&gt; wg.&lt;span style="color:#41a1c0"&gt;Done&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		&lt;span style="color:#fc5fa3"&gt;if&lt;/span&gt; err := srv.&lt;span style="color:#41a1c0"&gt;ListenAndServe&lt;/span&gt;(); err != http.ErrServerClosed {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;			fmt.&lt;span style="color:#41a1c0"&gt;Println&lt;/span&gt;(&lt;span style="color:#fc6a5d"&gt;&amp;#34;ListenAndServe():&amp;#34;&lt;/span&gt;, err)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	}()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#fc5fa3"&gt;return&lt;/span&gt; srv
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fc5fa3"&gt;func&lt;/span&gt; &lt;span style="color:#41a1c0"&gt;NewExporter&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	reg := prometheus.&lt;span style="color:#41a1c0"&gt;NewRegistry&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	reg.&lt;span style="color:#41a1c0"&gt;MustRegister&lt;/span&gt;(collector)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#6c7986"&gt;// Here, we start a new HTTP server and save the instance object into a golang sync.WaitGroup, so that we can watch its status in `FLBPluginExit`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	server.wg = &amp;amp;sync.WaitGroup{}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	server.wg.&lt;span style="color:#41a1c0"&gt;Add&lt;/span&gt;(&lt;span style="color:#d0bf69"&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	server.srv = &lt;span style="color:#41a1c0"&gt;startHttpServer&lt;/span&gt;(server.wg, reg)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="the-exporter-collector"&gt;The Exporter Collector&lt;/h2&gt;
&lt;p&gt;Now we have an HTTP server, but if we want to make it an exporter, we have to define the &lt;strong&gt;collector&lt;/strong&gt;. The collector is a Prometheus concept that implements two call-back functions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6c7986"&gt;// Here for instance, we define metrics to collect cpu info, which reuses the default Fluent-bit CPU metrics input data&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fc5fa3"&gt;func&lt;/span&gt; &lt;span style="color:#41a1c0"&gt;NewMyCollector&lt;/span&gt;() *myCollector {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#fc5fa3"&gt;return&lt;/span&gt; &amp;amp;myCollector{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		metrics: &lt;span style="color:#fc5fa3"&gt;map&lt;/span&gt;[&lt;span style="color:#fc5fa3"&gt;string&lt;/span&gt;]*prometheus.Desc{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;			&lt;span style="color:#fc6a5d"&gt;&amp;#34;cpu&amp;#34;&lt;/span&gt;: prometheus.&lt;span style="color:#41a1c0"&gt;NewDesc&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;				&lt;span style="color:#fc6a5d"&gt;&amp;#34;cpu&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;				&lt;span style="color:#fc6a5d"&gt;&amp;#34;Collect CPU usage&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;				[]&lt;span style="color:#fc5fa3"&gt;string&lt;/span&gt;{&lt;span style="color:#fc6a5d"&gt;&amp;#34;cpu&amp;#34;&lt;/span&gt;, &lt;span style="color:#fc6a5d"&gt;&amp;#34;mode&amp;#34;&lt;/span&gt;}, &lt;span style="color:#fc5fa3"&gt;nil&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;			),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		},
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		&lt;span style="color:#6c7986"&gt;// this buff is a golang channel object, which receive data sending from `FLBPluginFlushCtx` function&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		buff: &lt;span style="color:#d0a8ff"&gt;make&lt;/span&gt;(&lt;span style="color:#fc5fa3"&gt;chan&lt;/span&gt; cpuMetrics),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6c7986"&gt;// `Describe` send our metrics name and defination to Prometheus exporter&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fc5fa3"&gt;func&lt;/span&gt; (collector *myCollector) &lt;span style="color:#41a1c0"&gt;Describe&lt;/span&gt;(ch &lt;span style="color:#fc5fa3"&gt;chan&lt;/span&gt;&amp;lt;- *prometheus.Desc) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#fc5fa3"&gt;for&lt;/span&gt; _, desc := &lt;span style="color:#fc5fa3"&gt;range&lt;/span&gt; collector.metrics {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		ch &amp;lt;- desc
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6c7986"&gt;// `Collect` will read data from golang channel `buff` and send data to HTTP server handler&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fc5fa3"&gt;func&lt;/span&gt; (collector *myCollector) &lt;span style="color:#41a1c0"&gt;Collect&lt;/span&gt;(ch &lt;span style="color:#fc5fa3"&gt;chan&lt;/span&gt;&amp;lt;- prometheus.Metric) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#fc5fa3"&gt;for&lt;/span&gt; _, desc := &lt;span style="color:#fc5fa3"&gt;range&lt;/span&gt; collector.metrics {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		&lt;span style="color:#fc5fa3"&gt;select&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		&lt;span style="color:#fc5fa3"&gt;case&lt;/span&gt; metric := &amp;lt;-collector.buff:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;			fmt.&lt;span style="color:#41a1c0"&gt;Println&lt;/span&gt;(metric.cpu, metric.mode, metric.value)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;			ch &amp;lt;- prometheus.&lt;span style="color:#41a1c0"&gt;MustNewConstMetric&lt;/span&gt;(desc, prometheus.GaugeValue, metric.value, metric.cpu, metric.mode)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		&lt;span style="color:#fc5fa3"&gt;default&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;			&lt;span style="color:#fc5fa3"&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fc5fa3"&gt;var&lt;/span&gt; collector = &lt;span style="color:#41a1c0"&gt;NewMyCollector&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="building-so-file-and-running-in-fluent-bit"&gt;Building so file and running in Fluent-bit&lt;/h2&gt;
&lt;p&gt;Last but not least, building Golang plugin into so file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;go build -buildmode=c-shared -o out_prom_exporter.so prom_exporter.go
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run Fluent-bit with CLI flags:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;fluent-bit -v -e ./out_prom_exporter.so -i cpu -o promexporter
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s all steps to implement a customized Fluent-bit Prometheus exporter plugin. To see more details, please go to the Github repo &lt;a href="https://github.com/stevedsun/fluent-bit-output-prometheus-demo%3E"&gt;https://github.com/stevedsun/fluent-bit-output-prometheus-demo&amp;gt;&lt;/a&gt;.&lt;/p&gt;</description></item><item><title>Building a File Parser</title><link>https://sund.site/posts/2022/2022-5-8_lexer_design/</link><pubDate>Sun, 08 May 2022 14:00:00 +0800</pubDate><guid>https://sund.site/posts/2022/2022-5-8_lexer_design/</guid><description>&lt;p&gt;Last week, after reading this article - &lt;a href="https://www.aaronraff.dev/blog/how-to-write-a-lexer-in-go"&gt;How to Write a Lexer in Go&lt;/a&gt;, I found that it is not so difficult to design a configuration file parser by this article&amp;rsquo;s mindset. Then I tried to write a fluent-bit configuration parser and finally got this &lt;a href="https://github.com/stevedsun/go-fluentbit-conf-parser"&gt;Fluent-Bit configuration parser for Golang&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this article, I want to introduce how to parse Fluent-bit configuration &lt;code&gt;.conf&lt;/code&gt; file, and the thinking behind it.&lt;/p&gt;
&lt;h2 id="fluent-bit-configuration-format-and-schema"&gt;Fluent-bit configuration format and schema&lt;/h2&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;[FIRST_SECTION]
 Key1 some value
 Key2 another value

[SECOND_SECTION]
 KeyN 3.14
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here is a classic mode configuration of Fluent-bit, it includes two parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Section&lt;/li&gt;
&lt;li&gt;Key/value pair&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;First of all, we need to define a struct that represents the Fluent-bit configuration file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fc5fa3"&gt;type&lt;/span&gt; FluentBitConf &lt;span style="color:#fc5fa3"&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	Sections []Section
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fc5fa3"&gt;type&lt;/span&gt; Section &lt;span style="color:#fc5fa3"&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	Name &lt;span style="color:#fc5fa3"&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	Entries []Entry
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fc5fa3"&gt;type&lt;/span&gt; Entry &lt;span style="color:#fc5fa3"&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	Key &lt;span style="color:#fc5fa3"&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	Value &lt;span style="color:#fc5fa3"&gt;interface&lt;/span&gt;{}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once we have a struct, the next step is to parse tokens from the file and save their values into golang struct. We can copy the logic of the lexer to develop our fluent bit parser.&lt;/p&gt;
&lt;p&gt;In a lexer program, the target characters which we want to parse out are called &amp;ldquo;Token&amp;rdquo;, Token is also the keyword that our parser program is searching for. A parser program will read characters in a file one by one, whenever it found a token, the parser saves the value between tokens into the final structure and go ahead.&lt;/p&gt;
&lt;h2 id="parse-a-single-token"&gt;Parse a single token&lt;/h2&gt;
&lt;p&gt;If we want to parse a Section, we have to make the parser read characters one by one and stop at &lt;code&gt;[&lt;/code&gt; character, which means the beginning of a Section. The parser must save the current state as &lt;code&gt;t_section&lt;/code&gt; and keep the parser reading until &lt;code&gt;]&lt;/code&gt; character, the word between &lt;code&gt;[&lt;/code&gt; and &lt;code&gt;]&lt;/code&gt; is the Section value we need to persist into go struct.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6c7986"&gt;// define some tag to tell parser state&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fc5fa3"&gt;const&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	t_section = &lt;span style="color:#fc5fa3"&gt;iota&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fc5fa3"&gt;func&lt;/span&gt; (parser *FluentBitConfParser) &lt;span style="color:#41a1c0"&gt;Parse&lt;/span&gt;() *FluentBitConf {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#fc5fa3"&gt;var&lt;/span&gt; currSection *Section = &lt;span style="color:#fc5fa3"&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#fc5fa3"&gt;for&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#6c7986"&gt;// read charector one by one&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		r, _, err := parser.reader.&lt;span style="color:#41a1c0"&gt;ReadRune&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		&lt;span style="color:#fc5fa3"&gt;if&lt;/span&gt; err != &lt;span style="color:#fc5fa3"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#6c7986"&gt;// stop at the end of file&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;			&lt;span style="color:#fc5fa3"&gt;if&lt;/span&gt; err == io.EOF {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;				&lt;span style="color:#fc5fa3"&gt;if&lt;/span&gt; currSection != &lt;span style="color:#fc5fa3"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;					parser.Conf.Sections = &lt;span style="color:#d0a8ff"&gt;append&lt;/span&gt;(parser.Conf.Sections, *currSection)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;				}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;				&lt;span style="color:#fc5fa3"&gt;return&lt;/span&gt; parser.Conf
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;			}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;			&lt;span style="color:#fc5fa3"&gt;return&lt;/span&gt; parser.Conf
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		&lt;span style="color:#fc5fa3"&gt;switch&lt;/span&gt; r {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		&lt;span style="color:#fc5fa3"&gt;case&lt;/span&gt; &lt;span style="color:#fc6a5d"&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;			&lt;span style="color:#fc5fa3"&gt;continue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		&lt;span style="color:#fc5fa3"&gt;case&lt;/span&gt; &lt;span style="color:#fc6a5d"&gt;&amp;#39;[&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;			&lt;span style="color:#6c7986"&gt;// save last config item&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;			&lt;span style="color:#fc5fa3"&gt;if&lt;/span&gt; currSection != &lt;span style="color:#fc5fa3"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;				parser.Conf.Sections = &lt;span style="color:#d0a8ff"&gt;append&lt;/span&gt;(parser.Conf.Sections, *currSection)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;			}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;			&lt;span style="color:#6c7986"&gt;// create new config item&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;			currSection = &amp;amp;Section{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;				Name: &lt;span style="color:#fc6a5d"&gt;&amp;#34;&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;				Entries: []Entry{},
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;			}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;			parser.token = t_section
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		&lt;span style="color:#fc5fa3"&gt;default&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;			&lt;span style="color:#fc5fa3"&gt;if&lt;/span&gt; unicode.&lt;span style="color:#41a1c0"&gt;IsSpace&lt;/span&gt;(r) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;				&lt;span style="color:#fc5fa3"&gt;continue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;			}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#6c7986"&gt;// here is important function, read the charectors after token-chareactor and save them into struct&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;			strValue, _ := parser.&lt;span style="color:#41a1c0"&gt;parseString&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;			&lt;span style="color:#fc5fa3"&gt;switch&lt;/span&gt; parser.token {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;			&lt;span style="color:#fc5fa3"&gt;case&lt;/span&gt; t_section:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;				currSection.Name = strValue
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;				parser.token = t_entry_key
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In function &lt;code&gt;parser.parseString()&lt;/code&gt;, we have to read until the end of a value (for section, it&amp;rsquo;s &lt;code&gt;]&lt;/code&gt;), then return the value.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#fc5fa3"&gt;func&lt;/span&gt; (parser *FluentBitConfParser) &lt;span style="color:#41a1c0"&gt;parseString&lt;/span&gt;() (&lt;span style="color:#fc5fa3"&gt;string&lt;/span&gt;, &lt;span style="color:#fc5fa3"&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#fc5fa3"&gt;var&lt;/span&gt; val &lt;span style="color:#fc5fa3"&gt;string&lt;/span&gt; = &lt;span style="color:#fc6a5d"&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#fc5fa3"&gt;if&lt;/span&gt; err := parser.reader.&lt;span style="color:#41a1c0"&gt;UnreadRune&lt;/span&gt;(); err != &lt;span style="color:#fc5fa3"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		&lt;span style="color:#fc5fa3"&gt;return&lt;/span&gt; &lt;span style="color:#fc6a5d"&gt;&amp;#34;&amp;#34;&lt;/span&gt;, err
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#fc5fa3"&gt;for&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		r, _, err := parser.reader.&lt;span style="color:#41a1c0"&gt;ReadRune&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		&lt;span style="color:#fc5fa3"&gt;if&lt;/span&gt; err != &lt;span style="color:#fc5fa3"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;			&lt;span style="color:#fc5fa3"&gt;if&lt;/span&gt; err == io.EOF {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;				&lt;span style="color:#fc5fa3"&gt;return&lt;/span&gt; val, &lt;span style="color:#fc5fa3"&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;			}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;			&lt;span style="color:#fc5fa3"&gt;return&lt;/span&gt; &lt;span style="color:#fc6a5d"&gt;&amp;#34;&amp;#34;&lt;/span&gt;, err
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		&lt;span style="color:#fc5fa3"&gt;if&lt;/span&gt; parser.token == t_section &amp;amp;&amp;amp; r == &lt;span style="color:#fc6a5d"&gt;&amp;#39;]&amp;#39;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;			&lt;span style="color:#fc5fa3"&gt;return&lt;/span&gt; val, &lt;span style="color:#fc5fa3"&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		val = val + &lt;span style="color:#d0a8ff"&gt;string&lt;/span&gt;(r)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s all logic for parsing a section. Parse key/value pair is the same process, just note to make the parser know which state it is and save values between whitespace or &lt;code&gt;\n&lt;/code&gt;, you can see the code in &lt;a href="https://github.com/stevedsun/go-fluentbit-conf-parser/blob/master/parser.go"&gt;the Github repo&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;To parse a configuration file, we have to&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Defining token (key characters)&lt;/li&gt;
&lt;li&gt;Reading characters and looking for a token&lt;/li&gt;
&lt;li&gt;Saving current state to tell parser which struct the following characters belong&lt;/li&gt;
&lt;/ul&gt;</description></item></channel></rss>