<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>go - Tag - 電波障害</title><link>https://sund.site/tags/go/</link><description>go - Tag - 電波障害</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 27 Jun 2023 14:46:59 +0800</lastBuildDate><atom:link href="https://sund.site/tags/go/" rel="self" type="application/rss+xml"/><item><title>Go 内存泄漏常见模式</title><link>https://sund.site/posts/2023/goroutine-leak/</link><pubDate>Tue, 27 Jun 2023 14:46:59 +0800</pubDate><author>Steve Sun</author><guid>https://sund.site/posts/2023/goroutine-leak/</guid><description><![CDATA[<p>最近在工作中排查 Go 语言内存泄漏问题时，发现<a href="https://www.uber.com/blog/leakprof-featherlight-in-production-goroutine-leak-detection/" target="_blank" rel="noopener noreffer ">这篇 Uber 写的博客</a>，其中分享了几种常见的 goroutine 内存泄漏模式，于是把整理了 goroutine 的相关问题，希望更多人搜索到到这篇文章，帮助大家快速定位内存泄漏问题。</p>
<h2 id="goroutine-内存泄漏的原因">Goroutine 内存泄漏的原因</h2>
<p>Go 语言的内存泄漏通常因为错误地使用 goroutine 和 channel。例如以下几种情况：</p>
<ol>
<li>在 goroutine 里打开一个连接（如 gRPC）但是忘记 close</li>
<li>在 goroutine 里的全局变量对象没有释放</li>
<li>在 goroutine 里读 channel， 但是没有写入端，而被阻塞</li>
<li>在 goroutine 里写入无缓冲的 channel，但是由于 channel 的读端被其他协程关闭而阻塞</li>
<li>在 goroutine 里写入有缓冲的 channel，但是 channel 缓冲已满</li>
</ol>
<p>这几种情况，通常掺杂在复杂的代码里逻辑里，很难调试发现问题。因此衍生出以下几种日常工作中<strong>最容易出现问题的模式</strong>。</p>
<h2 id="常见-goroutine-内存泄漏模式">常见 Goroutine 内存泄漏模式</h2>
<h3 id="premature-function-return-功能过早返回">Premature Function Return /功能过早返回</h3>
<p>一个 goroutine 要写入 channel，但是在另一个端意外退出导致 channel 读取的代码没有执行。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">Example</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">a</span> <span class="o">:=</span> <span class="mi">1</span>
    <span class="nx">c</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">error</span><span class="p">)</span>
    <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">c</span> <span class="o">&lt;-</span> <span class="nx">err</span>
        <span class="k">return</span>
    <span class="p">}()</span>

    <span class="c1">// do something
</span><span class="c1"></span>
    <span class="k">if</span> <span class="nx">a</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
        <span class="k">return</span>
    <span class="p">}</span>

    <span class="c1">// do something
</span><span class="c1"></span>
    <span class="nx">err</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">c</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>代码中主进程在<code>if a &gt; 0</code> 处 return，导致 channel 无法写入而被阻塞。</p>
<p>解决这种问题的一个思路是把无缓冲 channel 转化为缓冲大小为 1 的 channel。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">c</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">error</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>有缓冲 channel 即使没有读取操作，也不会阻塞。</p>
<h3 id="the-timeout-leak-超时泄漏">The Timeout Leak /超时泄漏</h3>
<p>这是我们工作中遇到的问题，经常需要执行一个可能超时的异步操作时被使用。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">Example</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">timeoutOption</span> <span class="o">:=</span> <span class="nf">SomeTimeoutOption</span><span class="p">()</span>
    <span class="nx">done</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">any</span><span class="p">)</span>
    <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">done</span> <span class="o">&lt;-</span> <span class="nx">result</span>
    <span class="p">}()</span>

    <span class="k">select</span> <span class="p">{</span>
        <span class="k">case</span> <span class="o">&lt;-</span> <span class="nx">done</span><span class="p">:</span>
            <span class="k">return</span>
        <span class="k">case</span> <span class="o">&lt;-</span> <span class="nx">timeoutOption</span><span class="p">.</span><span class="nf">Timeout</span><span class="p">():</span>
            <span class="k">return</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></td></tr></table>
</div>
</div><p>在这段代码里，一旦 timeoutOption 操作超时，就会通知 select，接着程序退出，于是 goroutine 写入 done 的操作被阻塞而无法退出。</p>
<p>解决思路同上一个模式，用有缓冲 channel 替代无缓冲 channel。</p>
<h3 id="the-ncast-leak-多端读写泄漏">The NCast Leak /多端读写泄漏</h3>
<p>如果 channel 的读端只有一个，但是写端有多个，就会发生这种情况。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">Example</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">c</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">any</span><span class="p">)</span>
    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">items</span> <span class="p">{</span>
        <span class="k">go</span> <span class="kd">func</span><span class="p">(</span><span class="nx">c</span> <span class="kd">chan</span> <span class="nx">any</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">c</span> <span class="o">&lt;-</span> <span class="nx">result</span>
        <span class="p">}(</span><span class="nx">c</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="nx">data</span> <span class="o">:=</span> <span class="o">&lt;-</span> <span class="nx">c</span>
    <span class="k">return</span>
<span class="p">}</span>

</code></pre></td></tr></table>
</div>
</div><p>这种情况也适用于“多个写端一个读端”的情况，解决方法是把 channel 设置成和写或读数量一致的缓冲数。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">c</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">any</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">items</span><span class="p">))</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="channel-iteration-misuse-通道迭代误用">Channel Iteration Misuse /通道迭代误用</h3>
<p>Go 支持一种特性 <a href="https://gobyexample.com/range-over-channels" target="_blank" rel="noopener noreffer ">&ldquo;Range over channels&rdquo;</a>, 可以用 range 来循环读取 channel 的内容。</p>
<p>但是一旦读取不到内容，range 就会等待 channel 的写入，而 range 如果正好在 goroutine 内部，这个 goroutine 就会被阻塞。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">Example</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">wg</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span><span class="p">{}</span>
    <span class="nx">c</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">any</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>

    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">i</span> <span class="o">:=</span> <span class="nx">items</span> <span class="p">{</span>
        <span class="nx">wg</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
            <span class="nx">c</span> <span class="o">&lt;-</span> <span class="nx">data</span>
        <span class="p">}()</span>
    <span class="p">}</span>

    <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">for</span> <span class="nx">data</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">c</span> <span class="p">{</span>
            <span class="nx">wg</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
        <span class="p">}</span>
    <span class="p">}()</span>

    <span class="nx">wg</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>解决这个问题的方式手动定义关闭 channel。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">wg</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span><span class="p">{}</span>
<span class="nx">c</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">any</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="k">defer</span> <span class="nb">close</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span>
<span class="c1">//...
</span></code></pre></td></tr></table>
</div>
</div><p>这样在 WaitGroup 全部结束后，主程序会关闭 channel，从而让异步的 goroutine 内部的 range 退出循环等待。</p>
<h2 id="小结">小结</h2>
<p>Goroutine 内存泄漏是 Go 语言最容易发生的内存泄漏情况，它通常伴随着错误地使用 goroutine 和 channel。而 channel 的特殊用法如 select 和 range 又让 channel 阻塞变得更加隐蔽不易发现，进而增加排查内存泄漏的难度。</p>
<p>在写 goroutine 和调试内存泄漏问题时，要重点关注 channel 相关的操作，尤其涉及到文中列举的四类模式：功能过早返回、超时泄漏、多端读写泄漏、通道迭代误用。</p>
]]></description></item><item><title>Implementing Prometheus Exporter for Fluentbit</title><link>https://sund.site/posts/2022/implementing-prometheus-exporter-for-fluentbit/</link><pubDate>Thu, 24 Nov 2022 12:26:23 +0800</pubDate><author>Steve Sun</author><guid>https://sund.site/posts/2022/implementing-prometheus-exporter-for-fluentbit/</guid><description><![CDATA[<h2 id="background">Background</h2>
<p>Fluent-bit is a great tool for logging and monitoring, many teams are using it to collect metrics and logs. Prometheus is also a popular tool for metrics analysis, but if you want to output Fluent-bit data to Prometheus, the only way is to use the node-exporter input plugin, which has fixed metrics and data format.</p>
<p>In our case, we want to export specific input data into Prometheus, therefore we have to implement our Prometheus exporter in a customized Fluent-bit output plugin.</p>
<p>Today I want to share the final solution for this case. The complete demo code can be found on this Github repo: <a href="https://github.com/stevedsun/fluent-bit-output-prometheus-demo">https://github.com/stevedsun/fluent-bit-output-prometheus-demo</a></p>
<h2 id="fluent-bit-output-plugin">Fluent-bit Output Plugin</h2>
<p>Fluent-bit provides a way to implement your own golang plugin. (See <a href="https://docs.fluentbit.io/manual/v/1.9-pre/development/golang-output-plugins" target="_blank" rel="noopener noreffer ">Fluent-bit Go Output Plugin</a>)</p>
<p>We can run an asynchronous HTTP server as the Prometheus exporter when Fluent-bit plugin initializing, and transform the Fluent-bit records to Prometheus metrics format when Fluent-bit flushing a record to output plugin.</p>
<p>To implement a Fluent-bit output plugin, there are four call-back functions we need to over write.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">//export FLBPluginRegister
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">FLBPluginRegister</span><span class="p">(</span><span class="nx">def</span> <span class="nx">unsafe</span><span class="p">.</span><span class="nx">Pointer</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
    <span class="c1">// Here we define the plugin name and description.
</span><span class="c1"></span>	<span class="k">return</span> <span class="nx">output</span><span class="p">.</span><span class="nf">FLBPluginRegister</span><span class="p">(</span><span class="nx">def</span><span class="p">,</span> <span class="s">&#34;promexporter&#34;</span><span class="p">,</span> <span class="s">&#34;Prometheus Exporter&#34;</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">//export FLBPluginInit
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">FLBPluginInit</span><span class="p">(</span><span class="nx">plugin</span> <span class="nx">unsafe</span><span class="p">.</span><span class="nx">Pointer</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
    <span class="c1">// We can extract output plugin parameters from `FLBPlguinConfigKey`.
</span><span class="c1"></span>	<span class="nx">user</span> <span class="o">:=</span> <span class="nx">output</span><span class="p">.</span><span class="nf">FLBPluginConfigKey</span><span class="p">(</span><span class="nx">plugin</span><span class="p">,</span> <span class="s">&#34;username&#34;</span><span class="p">)</span>
	<span class="nx">passwd</span> <span class="o">:=</span> <span class="nx">output</span><span class="p">.</span><span class="nf">FLBPluginConfigKey</span><span class="p">(</span><span class="nx">plugin</span><span class="p">,</span> <span class="s">&#34;password&#34;</span><span class="p">)</span>
    <span class="c1">// Here we can run a new Prometheus exporter server.
</span><span class="c1"></span>	<span class="nf">NewExporter</span><span class="p">()</span>
	<span class="k">return</span> <span class="nx">output</span><span class="p">.</span><span class="nx">FLB_OK</span>
<span class="p">}</span>

<span class="c1">//export FLBPluginFlushCtx
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">FLBPluginFlushCtx</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">data</span> <span class="nx">unsafe</span><span class="p">.</span><span class="nx">Pointer</span><span class="p">,</span> <span class="nx">length</span> <span class="nx">C</span><span class="p">.</span><span class="kt">int</span><span class="p">,</span> <span class="nx">tag</span> <span class="o">*</span><span class="nx">C</span><span class="p">.</span><span class="nx">char</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
    <span class="c1">// Here we process every record, extract it and ship to exporter
</span><span class="c1"></span>	<span class="nx">dec</span> <span class="o">:=</span> <span class="nx">output</span><span class="p">.</span><span class="nf">NewDecoder</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="nx">length</span><span class="p">))</span>
	<span class="k">for</span> <span class="p">{</span>
		<span class="c1">// Extract Record
</span><span class="c1"></span>		<span class="nx">ret</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">record</span> <span class="o">:=</span> <span class="nx">output</span><span class="p">.</span><span class="nf">GetRecord</span><span class="p">(</span><span class="nx">dec</span><span class="p">)</span>
		<span class="k">if</span> <span class="nx">ret</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
			<span class="k">break</span>
		<span class="p">}</span>

		<span class="k">for</span> <span class="nx">k</span><span class="p">,</span> <span class="nx">v</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">record</span> <span class="p">{</span>
			<span class="c1">// You have to extract record here, ship them to exporter.
</span><span class="c1"></span>		<span class="p">}</span>
	<span class="p">}</span>

	<span class="k">return</span> <span class="nx">output</span><span class="p">.</span><span class="nx">FLB_OK</span>
<span class="p">}</span>

<span class="c1">//export FLBPluginExit
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">FLBPluginExit</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">server</span><span class="p">.</span><span class="nx">srv</span><span class="p">.</span><span class="nf">Shutdown</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">TODO</span><span class="p">());</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
	<span class="p">}</span>

    <span class="c1">// Here we have to close go channel and daemon exporter server.
</span><span class="c1"></span>	<span class="nb">close</span><span class="p">(</span><span class="nx">collector</span><span class="p">.</span><span class="nx">buff</span><span class="p">)</span>
	<span class="nx">server</span><span class="p">.</span><span class="nx">wg</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>

	<span class="k">return</span> <span class="nx">output</span><span class="p">.</span><span class="nx">FLB_OK</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
<span class="p">}</span>

</code></pre></td></tr></table>
</div>
</div><div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw" aria-hidden="true"></i>Note<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>You should not remove the comment lines above function, they are important for building *.so file.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">//export FLBPluginExit
</code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<h2 id="the-exporter-http-server">The Exporter HTTP Server</h2>
<p>The next step is to implement the HTTP server, make it running on daemon.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">
<span class="c1">// Here we start a background server on port 8989, the server will handle `/metrics` path, prometheus exporter will implement the handler.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">startHttpServer</span><span class="p">(</span><span class="nx">wg</span> <span class="o">*</span><span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span><span class="p">,</span> <span class="nx">reg</span> <span class="o">*</span><span class="nx">prometheus</span><span class="p">.</span><span class="nx">Registry</span><span class="p">)</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Server</span> <span class="p">{</span>
	<span class="nx">srv</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">http</span><span class="p">.</span><span class="nx">Server</span><span class="p">{</span><span class="nx">Addr</span><span class="p">:</span> <span class="s">&#34;:8989&#34;</span><span class="p">}</span>

	<span class="nx">http</span><span class="p">.</span><span class="nf">Handle</span><span class="p">(</span><span class="s">&#34;/metrics&#34;</span><span class="p">,</span> <span class="nx">promhttp</span><span class="p">.</span><span class="nf">HandlerFor</span><span class="p">(</span>
		<span class="nx">reg</span><span class="p">,</span>
		<span class="nx">promhttp</span><span class="p">.</span><span class="nx">HandlerOpts</span><span class="p">{</span>
			<span class="nx">EnableOpenMetrics</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
			<span class="nx">Registry</span><span class="p">:</span>          <span class="nx">reg</span><span class="p">,</span>
		<span class="p">},</span>
	<span class="p">))</span>

	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
		<span class="k">defer</span> <span class="nx">wg</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">srv</span><span class="p">.</span><span class="nf">ListenAndServe</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ErrServerClosed</span> <span class="p">{</span>
			<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;ListenAndServe():&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
		<span class="p">}</span>
	<span class="p">}()</span>

	<span class="k">return</span> <span class="nx">srv</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">NewExporter</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">reg</span> <span class="o">:=</span> <span class="nx">prometheus</span><span class="p">.</span><span class="nf">NewRegistry</span><span class="p">()</span>
	<span class="nx">reg</span><span class="p">.</span><span class="nf">MustRegister</span><span class="p">(</span><span class="nx">collector</span><span class="p">)</span>

    <span class="c1">// Here, we start a new HTTP server and save the instance object into a golang sync.WaitGroup, so that we can watch its status in `FLBPluginExit`
</span><span class="c1"></span>	<span class="nx">server</span><span class="p">.</span><span class="nx">wg</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span><span class="p">{}</span>
	<span class="nx">server</span><span class="p">.</span><span class="nx">wg</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
	<span class="nx">server</span><span class="p">.</span><span class="nx">srv</span> <span class="p">=</span> <span class="nf">startHttpServer</span><span class="p">(</span><span class="nx">server</span><span class="p">.</span><span class="nx">wg</span><span class="p">,</span> <span class="nx">reg</span><span class="p">)</span>
<span class="p">}</span>

</code></pre></td></tr></table>
</div>
</div><h2 id="the-exporter-collector">The Exporter Collector</h2>
<p>Now we have an HTTP server, but if we want to make it as an exporter, we have to define the <strong>collector</strong>. The collector is a Prometheus concept which implements two call-back function:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">
<span class="c1">// Here for instance, we define metrics to collect cpu info, which reuses the default Fluent-bit CPU metrics input data
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">NewMyCollector</span><span class="p">()</span> <span class="o">*</span><span class="nx">myCollector</span> <span class="p">{</span>
	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">myCollector</span><span class="p">{</span>
		<span class="nx">metrics</span><span class="p">:</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">prometheus</span><span class="p">.</span><span class="nx">Desc</span><span class="p">{</span>
			<span class="s">&#34;cpu&#34;</span><span class="p">:</span> <span class="nx">prometheus</span><span class="p">.</span><span class="nf">NewDesc</span><span class="p">(</span>
				<span class="s">&#34;cpu&#34;</span><span class="p">,</span>
				<span class="s">&#34;Collect CPU usage&#34;</span><span class="p">,</span>
				<span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;cpu&#34;</span><span class="p">,</span> <span class="s">&#34;mode&#34;</span><span class="p">},</span> <span class="kc">nil</span><span class="p">,</span>
			<span class="p">),</span>
		<span class="p">},</span>
		<span class="c1">// this buff is a golang channel object, which receive data sending from `FLBPluginFlushCtx` function
</span><span class="c1"></span>		<span class="nx">buff</span><span class="p">:</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">cpuMetrics</span><span class="p">),</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="c1">// `Describe` send our metrics name and defination to Prometheus exporter
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">collector</span> <span class="o">*</span><span class="nx">myCollector</span><span class="p">)</span> <span class="nf">Describe</span><span class="p">(</span><span class="nx">ch</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="o">*</span><span class="nx">prometheus</span><span class="p">.</span><span class="nx">Desc</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">desc</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">collector</span><span class="p">.</span><span class="nx">metrics</span> <span class="p">{</span>
		<span class="nx">ch</span> <span class="o">&lt;-</span> <span class="nx">desc</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="c1">// `Collect` will read data from golang channel `buff` and send data to HTTP server handler
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">collector</span> <span class="o">*</span><span class="nx">myCollector</span><span class="p">)</span> <span class="nf">Collect</span><span class="p">(</span><span class="nx">ch</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="nx">prometheus</span><span class="p">.</span><span class="nx">Metric</span><span class="p">)</span> <span class="p">{</span>

	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">desc</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">collector</span><span class="p">.</span><span class="nx">metrics</span> <span class="p">{</span>
		<span class="k">select</span> <span class="p">{</span>
		<span class="k">case</span> <span class="nx">metric</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">collector</span><span class="p">.</span><span class="nx">buff</span><span class="p">:</span>
			<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">metric</span><span class="p">.</span><span class="nx">cpu</span><span class="p">,</span> <span class="nx">metric</span><span class="p">.</span><span class="nx">mode</span><span class="p">,</span> <span class="nx">metric</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span>
			<span class="nx">ch</span> <span class="o">&lt;-</span> <span class="nx">prometheus</span><span class="p">.</span><span class="nf">MustNewConstMetric</span><span class="p">(</span><span class="nx">desc</span><span class="p">,</span> <span class="nx">prometheus</span><span class="p">.</span><span class="nx">GaugeValue</span><span class="p">,</span> <span class="nx">metric</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span> <span class="nx">metric</span><span class="p">.</span><span class="nx">cpu</span><span class="p">,</span> <span class="nx">metric</span><span class="p">.</span><span class="nx">mode</span><span class="p">)</span>
		<span class="k">default</span><span class="p">:</span>
			<span class="k">return</span>
		<span class="p">}</span>
	<span class="p">}</span>

<span class="p">}</span>

<span class="kd">var</span> <span class="nx">collector</span> <span class="p">=</span> <span class="nf">NewMyCollector</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="building-so-file-and-running-in-fluent-bit">Building so file and running in Fluent-bit</h2>
<p>The last but not least, building golang plugin into so file.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">go build -buildmode<span class="o">=</span>c-shared -o out_prom_exporter.so prom_exporter.go
</code></pre></td></tr></table>
</div>
</div><p>Run Fluent-bit with CLI flags:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">fluent-bit -v -e ./out_prom_exporter.so -i cpu -o promexporter
</code></pre></td></tr></table>
</div>
</div><p>That&rsquo;s all steps to implement a customized Fluent-bit Prometheus exporter plugin. See more details, please go to Github repo <a href="https://github.com/stevedsun/fluent-bit-output-prometheus-demo">https://github.com/stevedsun/fluent-bit-output-prometheus-demo</a>.</p>
]]></description></item><item><title>Building A File Parser</title><link>https://sund.site/posts/2022/2022-5-8_lexer_design/</link><pubDate>Sun, 08 May 2022 14:00:00 +0800</pubDate><author>Steve Sun</author><guid>https://sund.site/posts/2022/2022-5-8_lexer_design/</guid><description><![CDATA[<p>Last week, after reading this article - <a href="https://www.aaronraff.dev/blog/how-to-write-a-lexer-in-go" target="_blank" rel="noopener noreffer ">How to Write a Lexer in Go</a>, I found that it is not so difficult to design a configuration file parser by this article&rsquo;s mind-set. Then I tried to write a fluent-bit configuration parser, finally got this <a href="https://github.com/stevedsun/go-fluentbit-conf-parser" target="_blank" rel="noopener noreffer ">Fluent-Bit configuration parser for Golang</a>.</p>
<p>In this article, I want to introduce how to parse Fluent-bit configuration <code>.conf</code> file, and the thinking behind it.</p>
<h2 id="fluent-bit-configuration-format-and-schema">Fluent-bit configuration format and schema</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">[FIRST_SECTION]
    Key1  some value
    Key2  another value

[SECOND_SECTION]
    KeyN  3.14
</code></pre></td></tr></table>
</div>
</div><p>Here is a classic mode configuration of Fluent-bit, it includes two parts:</p>
<ul>
<li>Section</li>
<li>Key/value pair</li>
</ul>
<p>First of all, we need to define a struct which represents the Fluent-bit configuration file.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">type</span> <span class="nx">FluentBitConf</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">Sections</span> <span class="p">[]</span><span class="nx">Section</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">Section</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">Name</span>    <span class="kt">string</span>
	<span class="nx">Entries</span> <span class="p">[]</span><span class="nx">Entry</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">Entry</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">Key</span>   <span class="kt">string</span>
	<span class="nx">Value</span> <span class="kd">interface</span><span class="p">{}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Once we have a struct, the next step is to parse tokens from the file and save their values into golang struct. We can copy the logic of the lexer to develop our fluentbit parser.</p>
<p>In a lexer program, the target characters which we want to parse out are called &ldquo;Token&rdquo;, Token is also the keyword that our parser program is searching for. A parser program will read characters in a file one by one, whenever it found a token, the parser saves the value between tokens into the final structure and go ahead.</p>
<h2 id="parse-a-single-token">Parse a single token</h2>
<p>If we want to parse Section, we have to make the parser read characters one by one and stop at <code>[</code> character, which means the beginning of a Section. The parser must save the current state as <code>t_section</code> and keep parser reading until <code>]</code> character, the word between <code>[</code> and <code>]</code> is the Section value we need to persist into go struct.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">
<span class="c1">// define some tag to tell parser state
</span><span class="c1"></span><span class="kd">const</span> <span class="p">(</span>
	<span class="nx">t_section</span> <span class="p">=</span> <span class="kc">iota</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">parser</span> <span class="o">*</span><span class="nx">FluentBitConfParser</span><span class="p">)</span> <span class="nf">Parse</span><span class="p">()</span> <span class="o">*</span><span class="nx">FluentBitConf</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">currSection</span> <span class="o">*</span><span class="nx">Section</span> <span class="p">=</span> <span class="kc">nil</span>

	<span class="k">for</span> <span class="p">{</span>
        <span class="c1">// read charector one by one
</span><span class="c1"></span>		<span class="nx">r</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">parser</span><span class="p">.</span><span class="nx">reader</span><span class="p">.</span><span class="nf">ReadRune</span><span class="p">()</span>
		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
            <span class="c1">// stop at the end of file
</span><span class="c1"></span>			<span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span> <span class="p">{</span>
				<span class="k">if</span> <span class="nx">currSection</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
					<span class="nx">parser</span><span class="p">.</span><span class="nx">Conf</span><span class="p">.</span><span class="nx">Sections</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">parser</span><span class="p">.</span><span class="nx">Conf</span><span class="p">.</span><span class="nx">Sections</span><span class="p">,</span> <span class="o">*</span><span class="nx">currSection</span><span class="p">)</span>
				<span class="p">}</span>
				<span class="k">return</span> <span class="nx">parser</span><span class="p">.</span><span class="nx">Conf</span>
			<span class="p">}</span>
			<span class="k">return</span> <span class="nx">parser</span><span class="p">.</span><span class="nx">Conf</span>
		<span class="p">}</span>
		<span class="k">switch</span> <span class="nx">r</span> <span class="p">{</span>
		<span class="k">case</span> <span class="sc">&#39;\n&#39;</span><span class="p">:</span>
			<span class="k">continue</span>
		<span class="k">case</span> <span class="sc">&#39;[&#39;</span><span class="p">:</span>
			<span class="c1">// save last config item
</span><span class="c1"></span>			<span class="k">if</span> <span class="nx">currSection</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
				<span class="nx">parser</span><span class="p">.</span><span class="nx">Conf</span><span class="p">.</span><span class="nx">Sections</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">parser</span><span class="p">.</span><span class="nx">Conf</span><span class="p">.</span><span class="nx">Sections</span><span class="p">,</span> <span class="o">*</span><span class="nx">currSection</span><span class="p">)</span>
			<span class="p">}</span>
			<span class="c1">// create new config item
</span><span class="c1"></span>			<span class="nx">currSection</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">Section</span><span class="p">{</span>
				<span class="nx">Name</span><span class="p">:</span>    <span class="s">&#34;&#34;</span><span class="p">,</span>
				<span class="nx">Entries</span><span class="p">:</span> <span class="p">[]</span><span class="nx">Entry</span><span class="p">{},</span>
			<span class="p">}</span>
			<span class="nx">parser</span><span class="p">.</span><span class="nx">token</span> <span class="p">=</span> <span class="nx">t_section</span>
		<span class="k">default</span><span class="p">:</span>
			<span class="k">if</span> <span class="nx">unicode</span><span class="p">.</span><span class="nf">IsSpace</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span> <span class="p">{</span>
				<span class="k">continue</span>
			<span class="p">}</span>

            <span class="c1">// here is important function, read the charectors after token-chareactor and save them into struct
</span><span class="c1"></span>			<span class="nx">strValue</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">parser</span><span class="p">.</span><span class="nf">parseString</span><span class="p">()</span>
			<span class="k">switch</span> <span class="nx">parser</span><span class="p">.</span><span class="nx">token</span> <span class="p">{</span>
			<span class="k">case</span> <span class="nx">t_section</span><span class="p">:</span>
				<span class="nx">currSection</span><span class="p">.</span><span class="nx">Name</span> <span class="p">=</span> <span class="nx">strValue</span>
				<span class="nx">parser</span><span class="p">.</span><span class="nx">token</span> <span class="p">=</span> <span class="nx">t_entry_key</span>
		<span class="p">}</span>

	<span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>In function <code>parser.parseString()</code>, we have to read until the end of a value (for section, it&rsquo;s <code>]</code>), then return the value.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="p">(</span><span class="nx">parser</span> <span class="o">*</span><span class="nx">FluentBitConfParser</span><span class="p">)</span> <span class="nf">parseString</span><span class="p">()</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">val</span> <span class="kt">string</span> <span class="p">=</span> <span class="s">&#34;&#34;</span>

	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">parser</span><span class="p">.</span><span class="nx">reader</span><span class="p">.</span><span class="nf">UnreadRune</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="nx">err</span>
	<span class="p">}</span>
	<span class="k">for</span> <span class="p">{</span>
		<span class="nx">r</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">parser</span><span class="p">.</span><span class="nx">reader</span><span class="p">.</span><span class="nf">ReadRune</span><span class="p">()</span>
		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
			<span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span> <span class="p">{</span>
				<span class="k">return</span> <span class="nx">val</span><span class="p">,</span> <span class="kc">nil</span>
			<span class="p">}</span>
			<span class="k">return</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="nx">err</span>
		<span class="p">}</span>

		<span class="k">if</span> <span class="nx">parser</span><span class="p">.</span><span class="nx">token</span> <span class="o">==</span> <span class="nx">t_section</span> <span class="o">&amp;&amp;</span> <span class="nx">r</span> <span class="o">==</span> <span class="sc">&#39;]&#39;</span> <span class="p">{</span>
			<span class="k">return</span> <span class="nx">val</span><span class="p">,</span> <span class="kc">nil</span>
		<span class="p">}</span>

		<span class="nx">val</span> <span class="p">=</span> <span class="nx">val</span> <span class="o">+</span> <span class="nb">string</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>That&rsquo;s all logic for parsing a section. To parse key/value pair is the same process, just note to make parser know which state it is and save values between whitespace or <code>\n</code>, you can see the code at <a href="https://github.com/stevedsun/go-fluentbit-conf-parser/blob/master/parser.go" target="_blank" rel="noopener noreffer ">the github repo</a>.</p>
<h2 id="conclusion">Conclusion</h2>
<p>To parse a configuration file, we have to</p>
<ul>
<li>Defining token (key characters)</li>
<li>Reading characters and looking for a token</li>
<li>Saving current state to tell parser which struct the following characters belong</li>
</ul>
]]></description></item></channel></rss>