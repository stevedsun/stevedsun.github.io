<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>All Posts - 電波障害</title><link>https://sund.site/posts/</link><description>All Posts | 電波障害</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 27 Jun 2023 14:46:59 +0800</lastBuildDate><atom:link href="https://sund.site/posts/" rel="self" type="application/rss+xml"/><item><title>Go 内存泄漏常见模式</title><link>https://sund.site/posts/2023/goroutine-leak/</link><pubDate>Tue, 27 Jun 2023 14:46:59 +0800</pubDate><author>Steve Sun</author><guid>https://sund.site/posts/2023/goroutine-leak/</guid><description><![CDATA[<p>最近在工作中排查 Go 语言内存泄漏问题时，发现<a href="https://www.uber.com/blog/leakprof-featherlight-in-production-goroutine-leak-detection/" target="_blank" rel="noopener noreffer ">这篇 Uber 写的博客</a>，其中分享了几种常见的 goroutine 内存泄漏模式，于是把整理了 goroutine 的相关问题，希望更多人搜索到到这篇文章，帮助大家快速定位内存泄漏问题。</p>
<h2 id="goroutine-内存泄漏的原因">Goroutine 内存泄漏的原因</h2>
<p>Go 语言的内存泄漏通常因为错误地使用 goroutine 和 channel。例如以下几种情况：</p>
<ol>
<li>在 goroutine 里打开一个连接（如 gRPC）但是忘记 close</li>
<li>在 goroutine 里的全局变量对象没有释放</li>
<li>在 goroutine 里读 channel， 但是没有写入端，而被阻塞</li>
<li>在 goroutine 里写入无缓冲的 channel，但是由于 channel 的读端被其他协程关闭而阻塞</li>
<li>在 goroutine 里写入有缓冲的 channel，但是 channel 缓冲已满</li>
</ol>
<p>这几种情况，通常掺杂在复杂的代码里逻辑里，很难调试发现问题。因此衍生出以下几种日常工作中<strong>最容易出现问题的模式</strong>。</p>
<h2 id="常见-goroutine-内存泄漏模式">常见 Goroutine 内存泄漏模式</h2>
<h3 id="premature-function-return-功能过早返回">Premature Function Return /功能过早返回</h3>
<p>一个 goroutine 要写入 channel，但是在另一个端意外退出导致 channel 读取的代码没有执行。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">Example</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">a</span> <span class="o">:=</span> <span class="mi">1</span>
    <span class="nx">c</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">error</span><span class="p">)</span>
    <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">c</span> <span class="o">&lt;-</span> <span class="nx">err</span>
        <span class="k">return</span>
    <span class="p">}()</span>

    <span class="c1">// do something
</span><span class="c1"></span>
    <span class="k">if</span> <span class="nx">a</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
        <span class="k">return</span>
    <span class="p">}</span>

    <span class="c1">// do something
</span><span class="c1"></span>
    <span class="nx">err</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">c</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>代码中主进程在<code>if a &gt; 0</code> 处 return，导致 channel 无法写入而被阻塞。</p>
<p>解决这种问题的一个思路是把无缓冲 channel 转化为缓冲大小为 1 的 channel。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">c</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">error</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>有缓冲 channel 即使没有读取操作，也不会阻塞。</p>
<h3 id="the-timeout-leak-超时泄漏">The Timeout Leak /超时泄漏</h3>
<p>这是我们工作中遇到的问题，经常需要执行一个可能超时的异步操作时被使用。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">Example</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">timeoutOption</span> <span class="o">:=</span> <span class="nf">SomeTimeoutOption</span><span class="p">()</span>
    <span class="nx">done</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">any</span><span class="p">)</span>
    <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">done</span> <span class="o">&lt;-</span> <span class="nx">result</span>
    <span class="p">}()</span>

    <span class="k">select</span> <span class="p">{</span>
        <span class="k">case</span> <span class="o">&lt;-</span> <span class="nx">done</span><span class="p">:</span>
            <span class="k">return</span>
        <span class="k">case</span> <span class="o">&lt;-</span> <span class="nx">timeoutOption</span><span class="p">.</span><span class="nf">Timeout</span><span class="p">():</span>
            <span class="k">return</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></td></tr></table>
</div>
</div><p>在这段代码里，一旦 timeoutOption 操作超时，就会通知 select，接着程序退出，于是 goroutine 写入 done 的操作被阻塞而无法退出。</p>
<p>解决思路同上一个模式，用有缓冲 channel 替代无缓冲 channel。</p>
<h3 id="the-ncast-leak-多端读写泄漏">The NCast Leak /多端读写泄漏</h3>
<p>如果 channel 的读端只有一个，但是写端有多个，就会发生这种情况。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">Example</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">c</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">any</span><span class="p">)</span>
    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">items</span> <span class="p">{</span>
        <span class="k">go</span> <span class="kd">func</span><span class="p">(</span><span class="nx">c</span> <span class="kd">chan</span> <span class="nx">any</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">c</span> <span class="o">&lt;-</span> <span class="nx">result</span>
        <span class="p">}(</span><span class="nx">c</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="nx">data</span> <span class="o">:=</span> <span class="o">&lt;-</span> <span class="nx">c</span>
    <span class="k">return</span>
<span class="p">}</span>

</code></pre></td></tr></table>
</div>
</div><p>这种情况也适用于“多个写端一个读端”的情况，解决方法是把 channel 设置成和写或读数量一致的缓冲数。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">c</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">any</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">items</span><span class="p">))</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="channel-iteration-misuse-通道迭代误用">Channel Iteration Misuse /通道迭代误用</h3>
<p>Go 支持一种特性 <a href="https://gobyexample.com/range-over-channels" target="_blank" rel="noopener noreffer ">&ldquo;Range over channels&rdquo;</a>, 可以用 range 来循环读取 channel 的内容。</p>
<p>但是一旦读取不到内容，range 就会等待 channel 的写入，而 range 如果正好在 goroutine 内部，这个 goroutine 就会被阻塞。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">Example</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">wg</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span><span class="p">{}</span>
    <span class="nx">c</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">any</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>

    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">i</span> <span class="o">:=</span> <span class="nx">items</span> <span class="p">{</span>
        <span class="nx">wg</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
            <span class="nx">c</span> <span class="o">&lt;-</span> <span class="nx">data</span>
        <span class="p">}()</span>
    <span class="p">}</span>

    <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">for</span> <span class="nx">data</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">c</span> <span class="p">{</span>
            <span class="nx">wg</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
        <span class="p">}</span>
    <span class="p">}()</span>

    <span class="nx">wg</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>解决这个问题的方式手动定义关闭 channel。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">wg</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span><span class="p">{}</span>
<span class="nx">c</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">any</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="k">defer</span> <span class="nb">close</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span>
<span class="c1">//...
</span></code></pre></td></tr></table>
</div>
</div><p>这样在 WaitGroup 全部结束后，主程序会关闭 channel，从而让异步的 goroutine 内部的 range 退出循环等待。</p>
<h2 id="小结">小结</h2>
<p>Goroutine 内存泄漏是 Go 语言最容易发生的内存泄漏情况，它通常伴随着错误地使用 goroutine 和 channel。而 channel 的特殊用法如 select 和 range 又让 channel 阻塞变得更加隐蔽不易发现，进而增加排查内存泄漏的难度。</p>
<p>在写 goroutine 和调试内存泄漏问题时，要重点关注 channel 相关的操作，尤其涉及到文中列举的四类模式：功能过早返回、超时泄漏、多端读写泄漏、通道迭代误用。</p>
]]></description></item><item><title>Kong网关极简入门</title><link>https://sund.site/posts/2023/kong-gateway/</link><pubDate>Fri, 23 Jun 2023 10:36:36 +0800</pubDate><author>Steve Sun</author><guid>https://sund.site/posts/2023/kong-gateway/</guid><description><![CDATA[<h2 id="基本概念">基本概念</h2>
<blockquote>
<p>Kong Gateway is a Lua application running in Nginx. Kong Gateway is distributed along with OpenResty, which is a bundle of modules that extend the lua-nginx-module.</p>
</blockquote>
<p>Kong 是一个基于 Nginx 上运行的 Lua 程序。它改善了 Nginx 基于静态配置的缺点，可以动态添加插件和热部署。</p>
<p></p>
<h2 id="kong-的基础模块">Kong 的基础模块</h2>
<p><strong>Service</strong>是后端服务的抽象。</p>
<p><strong>Routes</strong>是 client 到后端服务的路由规则的抽象。如，为不同的 client 设置不同的认证规则。</p>
<p>Kong 的 routes 有两种模式 <code>traditional_compat</code> 和 <code>expressions</code> 。</p>
<ul>
<li><code>traditional_compat</code> ：旧的基于通配符等匹配优先级的模式。</li>
<li><code>expressions</code> ：新的基于表达式的匹配模式。</li>
</ul>
<p><strong>Upstreams</strong>是一个运维对象，在 Services 和真正的后台 API 服务之间，用来负载均衡。</p>
<p><strong>Plugins</strong>是用 lua 或 go 编写的插件，分为 Kong 官方提供的插件和第三方插件。</p>
<h2 id="kong-的工作原理">Kong 的工作原理</h2>
<p>Kong 支持三类协议：HTTP/HTTPS，TCL/TLS 和 GRPC/GRPCS。每种协议由不同的参数组成：</p>
<ul>
<li><code>http</code>: <code>methods</code>, <code>hosts</code>, <code>headers</code>, <code>paths</code> (and <code>snis</code>, if <code>https</code>)</li>
<li><code>tcp</code>: <code>sources</code>, <code>destinations</code> (and <code>snis</code>, if <code>tls</code>)</li>
<li><code>grpc</code>: <code>hosts</code>, <code>headers</code>, <code>paths</code> (and <code>snis</code>, if <code>grpcs</code>)</li>
</ul>
<p>Kong 支持按 HTTP header、URL、method、源地址、目标地址、<a href="https://en.wikipedia.org/wiki/Server_Name_Indication" target="_blank" rel="noopener noreffer ">Server Name Indication</a> 来路由请求。</p>
<p>Kong 默认以<a href="https://tools.ietf.org/html/rfc3986" target="_blank" rel="noopener noreffer ">RFC 3986</a>协议对请求的路径处理。</p>
<h3 id="kong-匹配规则的优先级">Kong 匹配规则的优先级</h3>
<p>按最多匹配的规则来路由。</p>
<blockquote>
<p>The rule is: <strong>when evaluating a request, Kong Gateway first tries to match the
routes with the most rules</strong>.</p>
</blockquote>
<p>当所有匹配规则检查完，Kong 会通过下层的 Nginx 模块发送请求。Response 返回之后，Kong 再经过<code>header_filter</code>和<code>body_filter</code>两个 hook 来修改 response header 和 body。</p>
<h3 id="对-websocket-的支持">对 WebSocket 的支持</h3>
<p>有两种配置方式来路由 wss 请求：</p>
<ul>
<li>HTTP(S) services and routes：把 wss 流量当作不透明的字节流。</li>
<li>WS(S) services and routes (<strong>企业版功能</strong>)：可以更好的用 websocket 插件控制流量。</li>
</ul>
<h3 id="负载均衡">负载均衡</h3>
<p>Kong 支持两类负载均衡方式</p>
<ul>
<li>基于 DNS （服务注册和发现是静态的）</li>
<li>基于哈希环的动态负载均衡（服务注册发现由 Kong 管理，可以动态增删）</li>
</ul>
<p>这部分跟 Nginx 类似。</p>
<h3 id="健康检查">健康检查</h3>
<ul>
<li><strong>active checks</strong>（心跳检查）</li>
<li><strong>passive checks</strong>（被动检查，即断路器，根据流量检查）</li>
</ul>
]]></description></item><item><title>用户故事地图</title><link>https://sund.site/posts/2023/user-story-mapping/</link><pubDate>Fri, 07 Apr 2023 06:37:53 +0800</pubDate><author>Steve Sun</author><guid>https://sund.site/posts/2023/user-story-mapping/</guid><description><![CDATA[<blockquote>
<p>用户故事是软件开发和项目管理中的常用术语。主旨是以日常语言或商务用语撰写句子，是一段简单的功能表述。以客户或使用者的观点撰写下有价值的功能、引导、框架来与使用者进行互动，进而推动工作进程。可以被认为是一种规格文件，但更精确而言，它代表客户的需求与方向。</p>
</blockquote>
<p>在敏捷开发需求分析阶段，要使用一些流程工具，如<strong>用户故事地图</strong>，来把那些抽象、模糊的用户需求，转化为具体的、分优先级的、模块化的用户故事。</p>
<p>一个用户地图看起来是这样的。</p>
<p></p>
<h2 id="绘制用户故事地图的过程">绘制用户故事地图的过程</h2>
<p>绘制用户故事地图应遵循一些基本原则：</p>
<ol>
<li>边思考边记录，把所有过程可视化到便签纸上</li>
<li>聚焦整体，不要过早陷入细节</li>
<li>为<strong>成果</strong>排优先级，而不是功能</li>
<li>验证产品要解决的问题是否真实存在</li>
<li>使用具象化方案，比如高保真原型或手绘</li>
<li>通过原型和用户测试来验证想法</li>
<li>用户地图的目的是让团队能达成有效沟通，提出问题和评估工作量</li>
<li>估算工作量时，度量越频繁，准确度越高</li>
</ol>
<h3 id="使用目标层级">使用目标层级</h3>
<p>在拆分用户故事时，应遵循逐层拆分的原则，每一层级只聚焦这一层级的任务颗粒度，不要过早陷入细节。</p>
<p>首先是设定宏观的<strong>活动</strong>，比如把用户需求分解为几个大的活动，如查看账户、存钱等。</p>
<p>接下来是梳理<strong>主干故事</strong>。针对每一个活动，拆分成一个个步骤，这些步骤就是主干故事。每一个主干故事：</p>
<ol>
<li>是一个动词短语</li>
<li>故事和故事之前应该保持同样的层级</li>
<li>从左到右按时间顺序排列，过程中想到任何中间环节都可以随时插入改变顺序</li>
</ol>
<p>第三步是针对每一个主干故事，通过头脑风暴的形式补充更多小的用户故事，用便签纸贴在下边。</p>
<p>最后按优先级，把重要的用户故事放在上面，不那么重要的放在下边。然后横向划分出不同的泳道，把故事按特定的<strong>目标成果</strong>划分为不同的阶段。</p>
<p></p>
<p>比如第一阶段完成基本的功能开发，那么横向的第一排所有用户故事就是第一个版本需要完成的工作。</p>
<p>这样就完成了用户故事的设计。我们重新梳理一下过程：</p>
<ol>
<li>划分重要的活动</li>
<li>梳理主干故事</li>
<li>完善用户故事</li>
<li>团队头脑风暴补充遗漏的用户故事</li>
<li>从上到下排优先级</li>
<li>横向切分用户故事，划分出每一个迭代的工作和关键成果</li>
</ol>
<h2 id="运用设计思维">运用设计思维</h2>
<p>上面介绍了用户故事的绘制过程，但是其实找到真正的用户需求点才是最难的。为了从特定领域的客户或用户那里挖掘出有价值的需求，通常需要使用<strong>设计思维</strong>（Design Thinking）来帮助团队沟通、寻找焦点问题。</p>
<p></p>
<p>设计思维一共有五步。</p>
<ul>
<li><strong>共情</strong>：沟通，找到问题。</li>
<li><strong>定义</strong>：聚焦若干重要问题，详细阐述。</li>
<li><strong>想法</strong>：每一个问题构思出多个解决方案。</li>
<li><strong>原型</strong>：制作具体的可视化的原型。</li>
<li><strong>测试</strong>：于用户一起完成测试，收集反馈。</li>
</ul>
<h2 id="组成探索团队">组成探索团队</h2>
<p>一个探索团队由三名重要角色组成：</p>
<ul>
<li>懂产品和需求的 Product Owner</li>
<li>懂设计和交互的 UX Designer</li>
<li>懂技术的 Senior Developer</li>
</ul>
<p>前期的需求探索阶段，应该由这支组成人数不超过 5 人的团队完成，要避免<strong>委员会设计</strong>（即团队多数成员参与到设计过程中，导致混乱和不一致）。</p>
<p>前期排列任务优先级时也应遵循这样的优先级：</p>
<blockquote>
<p>业务目标 &gt; 客户/用户目标 &gt; 功能</p>
</blockquote>
]]></description></item><item><title>Python 依赖管理工具的研究</title><link>https://sund.site/posts/2023/python-packaging/</link><pubDate>Thu, 19 Jan 2023 08:05:27 +0800</pubDate><author>Steve Sun</author><guid>https://sund.site/posts/2023/python-packaging/</guid><description><![CDATA[<h2 id="太长不读">太长不读</h2>
<p>如果你从事工程项目，<a href="https://python-poetry.org/" target="_blank" rel="noopener noreffer ">poetry</a> 是目前最好的方案，但是如果你不喜欢 Python 的 virtualenv，可以试试 <a href="https://pdm.fming.dev/latest/" target="_blank" rel="noopener noreffer ">pdm</a>。</p>
<h2 id="混乱的-python">混乱的 Python</h2>
<p>Python 的依赖管理工具 <code>pip</code> 一直被众多开发者吐槽。从我个人角度，<code>pip</code> 有三点致命缺陷：</p>
<ul>
<li>无法解决 Python 依赖环境的隔离问题</li>
<li>依赖管理文件 <code>requirements.txt</code> 无法真正开箱即用</li>
<li>打包部署非常麻烦，需要手动配置</li>
</ul>
<h3 id="环境隔离问题">环境隔离问题</h3>
<p>Python 的依赖库可以安装到系统全局，也可以安装到用户目录（<code>/home/${USER}/.local</code>）。但如果你同时管理多个 Python 项目，就需要将不同项目的依赖拆分到不同的文件夹分开管理。</p>
<p>传统方式是基于 virtualenv 创建隔离的 Python bin 文件和项目依赖的虚拟环境（所谓虚拟环境并不是虚拟机，只是个绑定 terminal session 的命令环境）。这种方式的缺点是：</p>
<ul>
<li>开发者需要经常关注“我现在处于哪个项目目录？我需要切换到当前虚拟环境里吗？”之类的问题。</li>
<li>virtualenv 只解决环境隔离，但是无法同步更新依赖文件、打包发布。</li>
</ul>
<h3 id="依赖安装问题">依赖安装问题</h3>
<p>Python 管理依赖的手段，最早是手动执行<code>pip install xxx</code>来安装依赖，最后 <code>pip freeze</code> 来导出依赖列表到一个 <code>requirements.txt</code> 文件里。但是这个 txt 文件非常令人困惑。</p>
<ul>
<li>不像 NodeJS 那么方便，想要升、降级某个依赖版本，无法自动同步到 txt 文件里。</li>
<li>平铺式地列出了所有一级、二级依赖包（即依赖包的依赖包）。因为 Python 某些依赖又基于系统上安装的 C 库版本，这就导致不同系统环境上执行 <code>pip install -r requirements.txt</code> 得到的效果并不一致，经常报错。</li>
</ul>
<h3 id="打包部署问题">打包部署问题</h3>
<p>Python 一般使用 <code>wheel</code> 打包二进制，它只解决打包问题，环境依赖是靠 pip 和 setuptools 完成，所以使用 wheel 你仍然要操心环境隔离和依赖管理问题。</p>
<p>另外基于 Python 各版本之间兼容性问题和底层实现上的不可抗拒力量，wheel 也经常会莫名其妙失败。</p>
<h2 id="现有的解决方案">现有的解决方案</h2>
<p>一直以来，出现过 <code>pipx</code>，<code>pipenv</code>， <code>conda</code>，<code>poetry</code> 以及我最近接触的 <code>pdm</code>。他们都在某种程度上解决了 Python 的问题，这篇文章：</p>
<p><a href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging" target="_blank" rel="noopener noreffer ">How to improve Python packaging, or why fourteen tools are at least twelve too many</a></p>
<p>对比了各种工具的利弊。最后得出结论是 poetry 和 pdm 是目前最合适的工具。而 pdm 是目前唯一支持 <a href="https://peps.python.org/pep-0582/" target="_blank" rel="noopener noreffer ">PEP 582</a> 的依赖管理工具。</p>
<h3 id="什么是-pep-582">什么是 PEP 582</h3>
<blockquote>
<p>This PEP proposes to add to Python a mechanism to automatically recognize a <code>__pypackages__</code> directory and prefer importing packages installed in this location over user or global site-packages. This will avoid the steps to create, activate or deactivate “virtual environments”. Python will use the <code>__pypackages__</code> from the base directory of the script when present.</p>
</blockquote>
<p>这个 PEP 的目的就是基于一个文件夹 <code>__pypackages__ </code>来管理 Python 的依赖，类似 nodejs 的<code>node_modules</code>，用户不需要再创建虚拟环境来隔离依赖包。Python 会自动识别和安装依赖。</p>
<blockquote>
<p>更新于 2023 年 7 月 2 日：PEP 582 提案已经被拒绝，PDM 暂时仍然支持，但是不建议开发者使用这一特性。</p>
</blockquote>
<h3 id="pdm">PDM</h3>
<p>PDM 实现了 PEP 582！这让我们在解决 Python 依赖问题时不用再考虑虚拟环境。</p>
<h4 id="初始化项目">初始化项目</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">pdm init
</code></pre></td></tr></table>
</div>
</div><p>之后 PDM 会问几个问题，记得选择<strong>不使用虚拟机环境</strong>，这样 PDM 就会默认使用 PEP 582 的解决方案，在项目下生成一个类似 NodeJS 的 <code>__pypackages__</code>。</p>
<p>剩下的操作就跟 NodeJS 的 npm 非常像了。</p>
<p>添加一个依赖之后，PDM 会自动更新<code>pyproject.toml</code>文件。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">pdm add requests
</code></pre></td></tr></table>
</div>
</div><h4 id="安装项目依赖">安装项目依赖</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">pdm install
</code></pre></td></tr></table>
</div>
</div><h4 id="启动项目">启动项目</h4>
<p>先在 <code>pyproject.toml</code>里添加</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="o">[</span>tool.pdm.scripts<span class="o">]</span>
<span class="nv">start</span> <span class="o">=</span> <span class="s2">&#34;flask run -p 54321&#34;</span>
</code></pre></td></tr></table>
</div>
</div><p>然后执行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">pdm run start
</code></pre></td></tr></table>
</div>
</div><h4 id="打包部署">打包部署</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">pdm build
pdm publish
</code></pre></td></tr></table>
</div>
</div><h2 id="总结">总结</h2>
<p>如果你从事科研工作，用 <code>conda</code>。</p>
<p>如果你从事工程项目，<code>poetry</code>是目前业内用的最多的方案，大多数情况下它是个不错的依赖管理工具。但是如果你不喜欢 Python 的 virtualenv，<code>pdm</code>是更好的选择。</p>
]]></description></item><item><title>构建一幅图景，了解一个环境</title><link>https://sund.site/posts/2022/essay-2022-12-04/</link><pubDate>Sun, 04 Dec 2022 07:10:32 +0800</pubDate><author>Steve Sun</author><guid>https://sund.site/posts/2022/essay-2022-12-04/</guid><description><![CDATA[<p>项飙在《把自己作为方法》里谈到怎么做农村调查时说，他有个三舅舅，是个非常精通农村社会生态的人。三舅舅知道村里发生的大小事，知道这个体系如何运作，权力结构是什么。项飙把这种对周遭环境的认识能力概括为<strong>图景</strong>：</p>
<blockquote>
<p>画这个图不是机械地反应世界，而是要精确地反应世界。什么是真正的精确？真正的精确就是你把握住它内在的未来方向…… ”图景“有两重意思，一是现在的概括，再一个是未来可能的走向。</p>
</blockquote>
<p>同样，昨天看社交媒体有人说，大众对当下发生的事情经常过度反应。就像股票每天涨涨跌跌，好的投资者不会把短期的波动太放在心上。但是社交媒体会对热点事件产生集体共鸣，导致大家对短期变化敏感，对事情发生的本质原因失去兴趣。</p>
<p>这让我想起最近读《禅与摩托车维修艺术》开头的一段话：</p>
<blockquote>
<p>有什么新鲜事？这是人们最感兴趣的问题，但是也最不着边际，可以没完没了问下去。如果真探讨它的答案，所得的只不过是一堆琐碎的跟风事物…我宁可问这样的问题，什么是最好的？</p>
</blockquote>
<p>这有点像软件架构，我们总说系统模型，模型是现状的反应吗？是，又不完全是，它是现状的抽象，是包含了未来走向的东西。</p>
<p>想起我前公司的同事朱老师常把系统性思考挂在嘴边。比如有一次我打电话问他：怎么做高并发场景的压力测试呢？朱老师先反问我：你们的测试基于哪一种模型呢？是“手机打电话”还是“银行提款”？</p>
<p>我问他这两种模型怎么讲？他说“手机打电话”就是客户端可以无限增加，流量和客户端增长成比例；“银行提款”是顾客无论怎么增加，接待窗口只有固定数量，多余的顾客只能排队。系统只开放有限的资源，无论流量怎么增长。</p>
<p>你看，这么一解释，图景就出来了。这就是跟明白人聊天的乐趣，不用花心思解释 context。</p>
<p>Alan Key 在一次技术演讲里说：</p>
<blockquote>
<p>You need to solve a context, not just a problem.</p>
</blockquote>
<p>我们生活中通常遇到两类问题，底下干活的人没有构建起工作内容的图景，上面管理的人没有构建起生态系统（企业发展方向、部门协作、社区运营）的图景。而大家着眼于问题本身，因为解决问题本身容易而快速。</p>
<p>另一方面，这种观点在与人相处时也适用。情绪控制不好的人通常对当下反应过度，听到不爱听的话、和自己相反的意见就勃然大怒。其实只要保持一定的<strong>钝感</strong>，对他人以更高的视角观察，心态就会平和很多。</p>
<p>还是回到项飙，他有一篇采访里讲到，中国低层社会的<strong>功能性过剩，而生态性不足</strong>。这句话怎么理解呢？你可以很方便地点外卖，外卖员不管多远都能快速送到你手里。但是楼下小区的保洁员是从哪来的你丝毫提不起兴趣，对身边发生的一切都漠不关心。</p>
<p>这是中国年轻人在城市中存在感微弱的真正原因，我们没把自己融入 context 里，也就构建不出三舅舅那样的图景。</p>
<p>回想我之前在 TW 工作时，同事关系是网状的，HR 会随时找我去面试，对于经常帮忙招聘的同事，HR 们也会回赠一些小礼物；每个人同时为不同的项目工作，既独立又联结。有时候会成为敏捷教练，有时会被临时拉去做咨询师。我翻看微信，200 多个好友里，有 104 个是 TW 的同事。
这种关系是生态性的，每个人对工作环境都有一幅完整的图景。而另一些企业，总强调责任意识，但是工作中的功能性压倒性地占据了上风。同事之间是机械地组织起来，完成上级分配的任务。这种状态是无从谈起什么协作、效率的。</p>
<p>沈奕斐在她自己的播客节目里和她老公谈到工作时说，同事关系是要高于朋友的，因为一天里大部分时间你要和同事度过，要完成高效的协作必须建立在深层的互相认同之上。</p>
<p>所以，我们是不是要多去体察周围的人和事呢。完成工作和生活的目标固然重要，但正如徒步旅行，如果只是两点一线地直达目标，就只是一名过客，而主动探索小路和岔路，才能构建起一幅对周遭环境的完整图景。</p>
]]></description></item><item><title>Implementing Prometheus Exporter for Fluentbit</title><link>https://sund.site/posts/2022/implementing-prometheus-exporter-for-fluentbit/</link><pubDate>Thu, 24 Nov 2022 12:26:23 +0800</pubDate><author>Steve Sun</author><guid>https://sund.site/posts/2022/implementing-prometheus-exporter-for-fluentbit/</guid><description><![CDATA[<h2 id="background">Background</h2>
<p>Fluent-bit is a great tool for logging and monitoring, many teams are using it to collect metrics and logs. Prometheus is also a popular tool for metrics analysis, but if you want to output Fluent-bit data to Prometheus, the only way is to use the node-exporter input plugin, which has fixed metrics and data format.</p>
<p>In our case, we want to export specific input data into Prometheus, therefore we have to implement our Prometheus exporter in a customized Fluent-bit output plugin.</p>
<p>Today I want to share the final solution for this case. The complete demo code can be found on this Github repo: <a href="https://github.com/stevedsun/fluent-bit-output-prometheus-demo">https://github.com/stevedsun/fluent-bit-output-prometheus-demo</a></p>
<h2 id="fluent-bit-output-plugin">Fluent-bit Output Plugin</h2>
<p>Fluent-bit provides a way to implement your Golang plugin. (See <a href="https://docs.fluentbit.io/manual/v/1.9-pre/development/golang-output-plugins" target="_blank" rel="noopener noreffer ">Fluent-bit Go Output Plugin</a>)</p>
<p>We can run an asynchronous HTTP server as the Prometheus exporter when Fluent-bit plugin initializing, and transform the Fluent-bit records to Prometheus metrics format when Fluent-bit flushes a record to the output plugin.</p>
<p>To implement a Fluent-bit output plugin, there are four call-back functions we need to overwrite.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">//export FLBPluginRegister
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">FLBPluginRegister</span><span class="p">(</span><span class="nx">def</span> <span class="nx">unsafe</span><span class="p">.</span><span class="nx">Pointer</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
    <span class="c1">// Here we define the plugin name and description.
</span><span class="c1"></span>	<span class="k">return</span> <span class="nx">output</span><span class="p">.</span><span class="nf">FLBPluginRegister</span><span class="p">(</span><span class="nx">def</span><span class="p">,</span> <span class="s">&#34;promexporter&#34;</span><span class="p">,</span> <span class="s">&#34;Prometheus Exporter&#34;</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">//export FLBPluginInit
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">FLBPluginInit</span><span class="p">(</span><span class="nx">plugin</span> <span class="nx">unsafe</span><span class="p">.</span><span class="nx">Pointer</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
    <span class="c1">// We can extract output plugin parameters from `FLBPlguinConfigKey`.
</span><span class="c1"></span>	<span class="nx">user</span> <span class="o">:=</span> <span class="nx">output</span><span class="p">.</span><span class="nf">FLBPluginConfigKey</span><span class="p">(</span><span class="nx">plugin</span><span class="p">,</span> <span class="s">&#34;username&#34;</span><span class="p">)</span>
	<span class="nx">passwd</span> <span class="o">:=</span> <span class="nx">output</span><span class="p">.</span><span class="nf">FLBPluginConfigKey</span><span class="p">(</span><span class="nx">plugin</span><span class="p">,</span> <span class="s">&#34;password&#34;</span><span class="p">)</span>
    <span class="c1">// Here we can run a new Prometheus exporter server.
</span><span class="c1"></span>	<span class="nf">NewExporter</span><span class="p">()</span>
	<span class="k">return</span> <span class="nx">output</span><span class="p">.</span><span class="nx">FLB_OK</span>
<span class="p">}</span>

<span class="c1">//export FLBPluginFlushCtx
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">FLBPluginFlushCtx</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">data</span> <span class="nx">unsafe</span><span class="p">.</span><span class="nx">Pointer</span><span class="p">,</span> <span class="nx">length</span> <span class="nx">C</span><span class="p">.</span><span class="kt">int</span><span class="p">,</span> <span class="nx">tag</span> <span class="o">*</span><span class="nx">C</span><span class="p">.</span><span class="nx">char</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
    <span class="c1">// Here we process every record, extract it and ship to exporter
</span><span class="c1"></span>	<span class="nx">dec</span> <span class="o">:=</span> <span class="nx">output</span><span class="p">.</span><span class="nf">NewDecoder</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="nx">length</span><span class="p">))</span>
	<span class="k">for</span> <span class="p">{</span>
		<span class="c1">// Extract Record
</span><span class="c1"></span>		<span class="nx">ret</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">record</span> <span class="o">:=</span> <span class="nx">output</span><span class="p">.</span><span class="nf">GetRecord</span><span class="p">(</span><span class="nx">dec</span><span class="p">)</span>
		<span class="k">if</span> <span class="nx">ret</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
			<span class="k">break</span>
		<span class="p">}</span>

		<span class="k">for</span> <span class="nx">k</span><span class="p">,</span> <span class="nx">v</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">record</span> <span class="p">{</span>
			<span class="c1">// You have to extract record here, ship them to exporter.
</span><span class="c1"></span>		<span class="p">}</span>
	<span class="p">}</span>

	<span class="k">return</span> <span class="nx">output</span><span class="p">.</span><span class="nx">FLB_OK</span>
<span class="p">}</span>

<span class="c1">//export FLBPluginExit
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">FLBPluginExit</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">server</span><span class="p">.</span><span class="nx">srv</span><span class="p">.</span><span class="nf">Shutdown</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">TODO</span><span class="p">());</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
	<span class="p">}</span>

    <span class="c1">// Here we have to close go channel and daemon exporter server.
</span><span class="c1"></span>	<span class="nb">close</span><span class="p">(</span><span class="nx">collector</span><span class="p">.</span><span class="nx">buff</span><span class="p">)</span>
	<span class="nx">server</span><span class="p">.</span><span class="nx">wg</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>

	<span class="k">return</span> <span class="nx">output</span><span class="p">.</span><span class="nx">FLB_OK</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
<span class="p">}</span>

</code></pre></td></tr></table>
</div>
</div><div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw" aria-hidden="true"></i>Note<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>You should not remove the comment lines above the function, they are important for building .so files.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">//export FLBPluginExit
</code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<h2 id="the-exporter-http-server">The Exporter HTTP Server</h2>
<p>The next step is to implement the HTTP server and make it run on a daemon.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">
<span class="c1">// Here we start a background server on port 8989, the server will handle `/metrics` path, prometheus exporter will implement the handler.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">startHttpServer</span><span class="p">(</span><span class="nx">wg</span> <span class="o">*</span><span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span><span class="p">,</span> <span class="nx">reg</span> <span class="o">*</span><span class="nx">prometheus</span><span class="p">.</span><span class="nx">Registry</span><span class="p">)</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Server</span> <span class="p">{</span>
	<span class="nx">srv</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">http</span><span class="p">.</span><span class="nx">Server</span><span class="p">{</span><span class="nx">Addr</span><span class="p">:</span> <span class="s">&#34;:8989&#34;</span><span class="p">}</span>

	<span class="nx">http</span><span class="p">.</span><span class="nf">Handle</span><span class="p">(</span><span class="s">&#34;/metrics&#34;</span><span class="p">,</span> <span class="nx">promhttp</span><span class="p">.</span><span class="nf">HandlerFor</span><span class="p">(</span>
		<span class="nx">reg</span><span class="p">,</span>
		<span class="nx">promhttp</span><span class="p">.</span><span class="nx">HandlerOpts</span><span class="p">{</span>
			<span class="nx">EnableOpenMetrics</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
			<span class="nx">Registry</span><span class="p">:</span>          <span class="nx">reg</span><span class="p">,</span>
		<span class="p">},</span>
	<span class="p">))</span>

	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
		<span class="k">defer</span> <span class="nx">wg</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">srv</span><span class="p">.</span><span class="nf">ListenAndServe</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ErrServerClosed</span> <span class="p">{</span>
			<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;ListenAndServe():&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
		<span class="p">}</span>
	<span class="p">}()</span>

	<span class="k">return</span> <span class="nx">srv</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">NewExporter</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">reg</span> <span class="o">:=</span> <span class="nx">prometheus</span><span class="p">.</span><span class="nf">NewRegistry</span><span class="p">()</span>
	<span class="nx">reg</span><span class="p">.</span><span class="nf">MustRegister</span><span class="p">(</span><span class="nx">collector</span><span class="p">)</span>

    <span class="c1">// Here, we start a new HTTP server and save the instance object into a golang sync.WaitGroup, so that we can watch its status in `FLBPluginExit`
</span><span class="c1"></span>	<span class="nx">server</span><span class="p">.</span><span class="nx">wg</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span><span class="p">{}</span>
	<span class="nx">server</span><span class="p">.</span><span class="nx">wg</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
	<span class="nx">server</span><span class="p">.</span><span class="nx">srv</span> <span class="p">=</span> <span class="nf">startHttpServer</span><span class="p">(</span><span class="nx">server</span><span class="p">.</span><span class="nx">wg</span><span class="p">,</span> <span class="nx">reg</span><span class="p">)</span>
<span class="p">}</span>

</code></pre></td></tr></table>
</div>
</div><h2 id="the-exporter-collector">The Exporter Collector</h2>
<p>Now we have an HTTP server, but if we want to make it an exporter, we have to define the <strong>collector</strong>. The collector is a Prometheus concept that implements two call-back functions:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">
<span class="c1">// Here for instance, we define metrics to collect cpu info, which reuses the default Fluent-bit CPU metrics input data
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">NewMyCollector</span><span class="p">()</span> <span class="o">*</span><span class="nx">myCollector</span> <span class="p">{</span>
	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">myCollector</span><span class="p">{</span>
		<span class="nx">metrics</span><span class="p">:</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">prometheus</span><span class="p">.</span><span class="nx">Desc</span><span class="p">{</span>
			<span class="s">&#34;cpu&#34;</span><span class="p">:</span> <span class="nx">prometheus</span><span class="p">.</span><span class="nf">NewDesc</span><span class="p">(</span>
				<span class="s">&#34;cpu&#34;</span><span class="p">,</span>
				<span class="s">&#34;Collect CPU usage&#34;</span><span class="p">,</span>
				<span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;cpu&#34;</span><span class="p">,</span> <span class="s">&#34;mode&#34;</span><span class="p">},</span> <span class="kc">nil</span><span class="p">,</span>
			<span class="p">),</span>
		<span class="p">},</span>
		<span class="c1">// this buff is a golang channel object, which receive data sending from `FLBPluginFlushCtx` function
</span><span class="c1"></span>		<span class="nx">buff</span><span class="p">:</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">cpuMetrics</span><span class="p">),</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="c1">// `Describe` send our metrics name and defination to Prometheus exporter
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">collector</span> <span class="o">*</span><span class="nx">myCollector</span><span class="p">)</span> <span class="nf">Describe</span><span class="p">(</span><span class="nx">ch</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="o">*</span><span class="nx">prometheus</span><span class="p">.</span><span class="nx">Desc</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">desc</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">collector</span><span class="p">.</span><span class="nx">metrics</span> <span class="p">{</span>
		<span class="nx">ch</span> <span class="o">&lt;-</span> <span class="nx">desc</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="c1">// `Collect` will read data from golang channel `buff` and send data to HTTP server handler
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">collector</span> <span class="o">*</span><span class="nx">myCollector</span><span class="p">)</span> <span class="nf">Collect</span><span class="p">(</span><span class="nx">ch</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="nx">prometheus</span><span class="p">.</span><span class="nx">Metric</span><span class="p">)</span> <span class="p">{</span>

	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">desc</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">collector</span><span class="p">.</span><span class="nx">metrics</span> <span class="p">{</span>
		<span class="k">select</span> <span class="p">{</span>
		<span class="k">case</span> <span class="nx">metric</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">collector</span><span class="p">.</span><span class="nx">buff</span><span class="p">:</span>
			<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">metric</span><span class="p">.</span><span class="nx">cpu</span><span class="p">,</span> <span class="nx">metric</span><span class="p">.</span><span class="nx">mode</span><span class="p">,</span> <span class="nx">metric</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span>
			<span class="nx">ch</span> <span class="o">&lt;-</span> <span class="nx">prometheus</span><span class="p">.</span><span class="nf">MustNewConstMetric</span><span class="p">(</span><span class="nx">desc</span><span class="p">,</span> <span class="nx">prometheus</span><span class="p">.</span><span class="nx">GaugeValue</span><span class="p">,</span> <span class="nx">metric</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span> <span class="nx">metric</span><span class="p">.</span><span class="nx">cpu</span><span class="p">,</span> <span class="nx">metric</span><span class="p">.</span><span class="nx">mode</span><span class="p">)</span>
		<span class="k">default</span><span class="p">:</span>
			<span class="k">return</span>
		<span class="p">}</span>
	<span class="p">}</span>

<span class="p">}</span>

<span class="kd">var</span> <span class="nx">collector</span> <span class="p">=</span> <span class="nf">NewMyCollector</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="building-so-file-and-running-in-fluent-bit">Building so file and running in Fluent-bit</h2>
<p>Last but not least, building Golang plugin into so file.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">go build -buildmode<span class="o">=</span>c-shared -o out_prom_exporter.so prom_exporter.go
</code></pre></td></tr></table>
</div>
</div><p>Run Fluent-bit with CLI flags:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">fluent-bit -v -e ./out_prom_exporter.so -i cpu -o promexporter
</code></pre></td></tr></table>
</div>
</div><p>That&rsquo;s all steps to implement a customized Fluent-bit Prometheus exporter plugin. To see more details, please go to the Github repo <a href="https://github.com/stevedsun/fluent-bit-output-prometheus-demo%3E">https://github.com/stevedsun/fluent-bit-output-prometheus-demo&gt;</a>.</p>
]]></description></item><item><title>渐进式地改变生活习惯——我对福格行为模型的理解</title><link>https://sund.site/posts/2022/fogg-behavior-model/</link><pubDate>Tue, 01 Nov 2022 20:23:55 +0800</pubDate><author>Steve Sun</author><guid>https://sund.site/posts/2022/fogg-behavior-model/</guid><description><![CDATA[<h2 id="我和失眠的斗争">我和失眠的斗争</h2>
<p>我经常被失眠折磨。也尝试过各种办法：睡前洗热水澡、手机定时关闭、每天跑步……我发现这些方法都或多或少发挥了作用，但是最终不是难以坚持，就是效果越来越差。我最近读到一本书——《福格行为模型》，让我重新审视这几年和失眠的斗争，从另一个角度认清<strong>习惯</strong>，了解它是如何兴致勃勃地启动，又如何在挫折过后被放弃。我觉得《福格行为模型》是一本讲到了问题本质的书，它的道理非常凝练，甚至可以用一个公式概括。但是它却有非常强的指导性，按照书中的方法，我已经在最近一个月大大改善了睡眠质量。也希望读完这篇文章，你也有兴趣看一看这本书。</p>
<p>下面为了方便理解，我把书的内容分为理论和实践两部分。</p>
<h2 id="理论部分人的行为可以被设计">理论部分：人的行为可以被设计</h2>
<p>在这个由商业主导的世界里，有一个道理显而易见：人的行为可以被设计。如何让顾客多在广告前停留从而提高销售业绩；游戏公司如何引导玩家沉迷游戏；抖音如何用短视频杀死人们的业余时间……这种种的商业行为，都经过精密的设计。这些使人无法自拔的行为设计，能不能反过来让我们养成好的习惯呢？答案是肯定的。</p>
<p>福格教授给出了一个公式，它代表行为（<strong>B</strong>ehavior）产生的三要素：动机（<strong>M</strong>otivation）、能力（<strong>A</strong>bility）、提示（<strong>P</strong>rompt）。</p>
<blockquote>
<p>B = M A P</p>
</blockquote>
<p><strong>动机 M 越强，行为越有可能发生；人自身达成行为的能力 A 越强，行为也越可能发生</strong>。即行为由动机和能力共同作用产生。此外，行为满足前边两种条件也不一定发生，<strong>它需要一个触发开关，即提示 P</strong>。</p>
<p></p>
<p>这张图展示了一条曲线，当（动机-能力）的坐标落在曲线上方，此时如果给行为一个提示，行为就会立刻发生。</p>
<p>比如，当一个母亲的孩子被熊攻击时，母亲会毅然去救孩子。此时，<strong>孩子被攻击</strong>是<strong>提示</strong>，母亲虽然<strong>能力</strong>很弱，但是保护孩子的<strong>动机</strong>极强，使得上图中母亲的坐标落在了曲线上方。这样<strong>救孩子</strong>的行为就自然而然产生了。</p>
<blockquote>
<p>黄金行为有三个标准：</p>
<ol>
<li>这个行为能让你实现愿望（影响）</li>
<li>你想做这个行为（动机）</li>
<li>你可以做到（能力）</li>
</ol>
</blockquote>
<p>这也能解释习惯的产生和磨灭。当一个人意识到自己肥胖（提示），他决定开始减肥，他的动机很强，此时虽然他（减肥的）能力很弱，但是他减肥的行为却因强烈的动机而发生了。但是随着时间推移，动机变弱，使得他的坐标滑落到曲线下方。这时减肥的行为就可能终止。这就是大部分人从捡起习惯到放弃习惯的过程。这里引出了另一个重要理论。</p>
<p><strong>人的动机是不稳定的，主观改变动机非常困难</strong>。</p>
<blockquote>
<p>你不能直接从动机入手去解决问题。——福格</p>
</blockquote>
<p>因为人心理状态这种不确定性，所以福格建议，最好按照提示 - 能力 - 动机的优先级，去打造（或是戒除）行为习惯。</p>
<p>首先是通过时间、空间、心情等条件，触发行为。<strong>福格称其为锚点。锚点必须是明确、不含糊的最后行为</strong>。当这个锚点出现时，就自动提示你去完成你要做的事情。</p>
<p>其次是降低能力门槛。<strong>如学习技能、购买工具、降低问题规模等，使能力满足行为触发的条件</strong>。其中降低问题规模的方法就是我们通常说的<strong>微习惯</strong>，如果想要每天锻炼身体，那么就应该从每天做一个俯卧撑开始，一点点提高运动量。这个行为必须是即便阴天下雨，你心情不好，工作疲惫，也能轻易做到的。</p>
<p>另外，<strong>重复做</strong>也是会降低行为的难度，作者鼓励大家用<strong>高频率的小成功</strong>来养成习惯。</p>
<p>最后也是最难的是正确的动机，<strong>动机必须出自你的真实意愿，你不能从网上或者成功人士那里获得动机</strong>。一个匹配我们行为的动机，必须能切实给我们带来好处。</p>
<h2 id="实践部分绘制地图重新设计我们的日常">实践部分：绘制地图，重新设计我们的日常</h2>
<p>讲完了理论，终于可以实操了。</p>
<h3 id="第一步围绕习惯找出行为">第一步，围绕习惯找出行为</h3>
<p>在一张白板或白纸中间写下你希望养成的习惯。以我自己为例，我希望保持固定节奏的健身习惯。</p>
<p></p>
<p>然后是头脑风暴。通过发散思维，把影响这个习惯的因素全部写下来。福格在原书中描述的是找出影响习惯的<strong>行为</strong>，但是直接写出行为很困难，所以我先把所有因素罗列出来，再一点点推导出行为。</p>
<p>比如，影响我保持健身频率的因素之一是天气冷容易感冒。我从这点入手分析了原因：一方面健身房人多导致换衣、器械使用需要长时间等待。另一方面衣服保暖做的不够。所以最后我得到两个影响健身的行为：</p>
<ol>
<li>在人相对少的时间段去健身房</li>
<li>购买轻薄但是保暖性较好的运动服（这是一次性任务）</li>
</ol>
<p>同理，上班疲惫也是影响因素，我得到了两个行为：</p>
<ol>
<li>拆分不同训练方式到一周里的不同工作日，以避免过度运动</li>
<li>利用居家办公的那几天时间下班去健身</li>
</ol>
<p></p>
<p>请你结合自己的特点，找出所有影响的因素并对应到多个行为上去。<strong>注意有些行为依赖于养成另外一些习惯</strong>， 比如要健身的前一天睡眠充足，就依赖好的睡眠习惯。作者建议最开始可以从三个最小的习惯开始培养，容易形成正反馈。我在训练这套方法的过程中发现，通常坏习惯都是由另外的坏习惯连锁产生的，所以从最小的习惯开始改变，慢慢会产生马太效应。</p>
<h3 id="第二步建立影响-容易程度坐标轴">第二步，建立【影响-容易程度】坐标轴</h3>
<p>把刚才拆分出来的行为，全部放在下图的坐标轴中。越容易做（执行的能力越强）、对你影响越大（动机越强）的行为，越靠近右上角。</p>
<p></p>
<p>通常一次性的行为最容易执行（比如采购运动服）；那些需要多个步骤（比如用手机记录健身状态）比较难执行。</p>
<p>最后，我挑选了三件对我影响最大也最容易的行为来执行：采购健身装备、拆分不同训练到不同时间、居家办公时去健身。</p>
<p></p>
<p>用同样的方法，我还制定了睡眠习惯的养成策略。</p>
<p></p>
<p>经过最近一个多月的练习，我也渐入佳境。我在坚持了一段时间后还买了专门记录健身的手机 App 来跟踪训练效果（虽然我也没寄希望能保持长期记录，但是能给我非常好的正向激励）。</p>
<p></p>
<h2 id="小结">小结</h2>
<ul>
<li>《福格行为模型》指出了人类行为产生的公式，即 行为 = 动机 · 能力 · 提示。</li>
<li>从三要素入手，养成最小的微习惯，从而快速得到正向激励，能够帮我们快速建立好习惯。</li>
<li>制定习惯养成计划时，先从习惯拆解出具体的，可执行的行为。再按行为的优先级选择最容易、影响最大的执行。</li>
<li>某些行为依赖其他习惯，逐级拆解，同时养成三个微小的习惯，渐进式地改变生活状态吧。</li>
</ul>
]]></description></item><item><title>规范的错误信息</title><link>https://sund.site/posts/2022/write-error-message/</link><pubDate>Tue, 23 Aug 2022 22:18:00 +0800</pubDate><author>Steve Sun</author><guid>https://sund.site/posts/2022/write-error-message/</guid><description><![CDATA[<p></p>
<p>本文整理了 Google 官方文档中关于错误信息的编写规范。适用于有一定编程经验，尤其从事业务开发的程序员。</p>
<p>通过本文你可以：</p>
<ul>
<li>写出风格统一、用户友好的错误信息</li>
<li>提高代码的可维护性，降低沟通成本</li>
</ul>
<p>Google 文档原文：<a href="https://developers.google.com/tech-writing/error-messages" target="_blank" rel="noopener noreffer ">Error Messages</a></p>
<h2 id="基本原则">基本原则</h2>
<ul>
<li>错误不应该被掩盖 (Don&rsquo;t fail silently)</li>
<li>遵循语言的规范 (Follow the programming language guides)</li>
<li>实现完整的错误模型 (Implement the full error model)
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw" aria-hidden="true"></i>Tips<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">包含错误码、错误内容、错误原因、处理方法</div>
        </div>
    </div></li>
<li>避免吞掉问题根源 (Avoid swallowing the root cause)</li>
<li>输出错误代码 (Log the error codes)</li>
<li>快速抛出错误 (Raise errors immediately)</li>
</ul>
<h2 id="解释错误原因">解释错误原因</h2>
<p>使用错误信息给用户解释原因时，应该遵循：</p>
<ul>
<li>具体，准确，避免含糊。</li>
<li>在错误信息中包含用户输入的错误内容。如果输入的内容特别长：
<ul>
<li>渐进地显示，提供一个可展开详情的省略号。</li>
<li>截断内容，只保留必要部分。</li>
</ul>
</li>
<li>明确告诉用户，系统的要求和限制</li>
</ul>
<h2 id="解释如何处理问题">解释如何处理问题</h2>
<ul>
<li>对用户来说，错误信息必须有可操作性。也就是说，在解释了问题的原因后，说明如何解决这个问题。</li>
<li>最好给用户提供一个例子。</li>
</ul>
<h2 id="清晰的错误信息">清晰的错误信息</h2>
<ul>
<li>简明扼要，使用主动语态。（这方面内容可以参考<a href="https://sund.site/posts/2022/technical-writing/" target="_blank" rel="noopener noreffer ">技术文档写作指南</a>）</li>
<li>避免出现双重否定句式。</li>
<li>让目标用户能够理解，即根据用户掌握的知识，提供有帮助的内容。</li>
<li>专业术语应前后一致。</li>
</ul>
<h2 id="错误信息的格式">错误信息的格式</h2>
<ul>
<li>使用链接提供更多信息。</li>
<li>渐进式呈现错误信息（比如可以展开详情的省略号）。</li>
<li>错误提示应该贴近错误发生的位置。</li>
<li>避免错误信息滥用字体或颜色。</li>
<li>使用正确的语气:
<ul>
<li>不要告诉用户错在哪，告诉用户应该做什么。</li>
<li>避免责备、幽默、道歉的语气。</li>
</ul>
</li>
</ul>
<h2 id="对后端开发的建议">对后端开发的建议</h2>
<ul>
<li>错误要有错误码</li>
<li>可以在错误信息结构里提供一个指向错误解释的 ID，如：
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&#34;error&#34;</span><span class="p">:</span> <span class="s2">&#34;Bad Request - Request is missing a required parameter: -collection_name. Update parameter and resubmit. Issue Reference Number BR0x0071&#34;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
]]></description></item><item><title>技术文档写作指南</title><link>https://sund.site/posts/2022/technical-writing/</link><pubDate>Sun, 21 Aug 2022 15:29:00 +0800</pubDate><author>Steve Sun</author><guid>https://sund.site/posts/2022/technical-writing/</guid><description><![CDATA[<p>本文内容摘录自 <a href="https://developers.google.com/tech-writing/overview" target="_blank" rel="noopener noreffer ">Technical Writing</a> （谷歌技术文档写作指南）的第一部分。</p>
<p>本文适用于想要提高技术文档写作、技术领域日常沟通能力的读者，对于一些商务的、非文学性质的英语办公场景沟通，也能起一定帮助作用。</p>
<p>阅读过本文的读者可以：</p>
<ul>
<li>提高在日常办公中清晰、准确、客观地传达概念和逻辑的能力。</li>
<li>掌握英文技术文档写作规范。</li>
</ul>
<h2 id="词汇words">词汇（Words）</h2>
<ul>
<li>
<p>对于已有的术语，不要重复发明新的词汇，可以用一个链接指向解释它的页面。</p>
</li>
<li>
<p>如果有必要，可以在文档中直接定义新的术语，但如果术语比较多，最好建立一个术语对照表。</p>
</li>
<li>
<p>文档各处出现的术语应该保持一致的名称或缩写。</p>
</li>
<li>
<p>关于缩写：第一次出现要用<strong>粗体</strong>写全称并用括号指明缩写，之后的文章中不要反复混用全称和缩写。</p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw" aria-hidden="true"></i>举例<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">This document is for engineers who are new to the <strong>Telekinetic Tactile Network</strong> (<strong>TTN</strong>) or need to understand how to order TTN replacement parts through finger motions.</div>
        </div>
    </div>
</li>
<li>
<p>如果一个术语出现频率不高，请不要使用缩写。</p>
</li>
<li>
<p>使用缩写的情况有：1. 缩写明显更简短；2. 该术语出现频率很高。</p>
</li>
<li>
<p>谨慎使用代名词（It，they，that 等）。</p>
<ul>
<li>代名词一定要出现在它所指代的名词之后。</li>
<li>如果代名词远离它指代的名词（超过 5 个单词），就不用代名词。</li>
<li>在名词和代名词之间出现第二个名词，会产生歧义，应避免这种情况。</li>
</ul>
</li>
</ul>
<p>类比计算机编程语言：</p>
<p>缩写 = 对术语的一层抽象。读者需要花费更多脑力去把它展开成对应的名词。</p>
<p>代名词 = 指针。它容易引起歧义，所以要避免在读者大脑中引起「空指针」错误。</p>
<h2 id="主动语态active-voice">主动语态（Active voice）</h2>
<ul>
<li>技术文档中应尽量使用主动语态。
<ul>
<li>被动语态在读者大脑中需要额外的加工转换才能被理解。</li>
<li>被动语态用来间接地表达行为，容易引起混乱。</li>
<li>有些被动语态省略了行为主体，会迫使读者猜测主语是谁。</li>
</ul>
</li>
<li>如果使用被动语态，应正确使用过去分词的各种形式和介词（如 as，by）。</li>
<li>祈使句的动词（命令式动词）应该使用主动语态。</li>
<li>科技论文中经常出现被动语态（如 It has been suggested that&hellip;），这种写法并不能传递更多信息，很多科学期刊也开始鼓励使用主动语态。</li>
</ul>
<h2 id="炼句clear-sentencesshort-sentences">炼句（Clear sentences，Short sentences）</h2>
<ul>
<li>
<p>选择准确、有力、具体的动词。减少不精确的、软弱的或通用的动词。
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw" aria-hidden="true"></i>错误的例子<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">is，are，occur，happen</div>
        </div>
    </div></p>
</li>
<li>
<p>Be 动词和通用动词可以用，但它们通常是一些不良写作习惯的信号，如</p>
<ul>
<li>句子中缺少行为主体</li>
<li>句子使用了被动语态</li>
</ul>
</li>
<li>
<p>减少 there be 句式，把 there be 句式中的主语和动词提炼出来
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw" aria-hidden="true"></i>错误的例子<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>避免这样用：There is no guarantee that the updates will be received in sequential order.</p>
<p>应改为：Clients might not receive the updates in sequential order.</p>
</div>
        </div>
    </div></p>
</li>
<li>
<p>尽量少用或不用形容词和副词，因为这些词汇过于主观。</p>
</li>
<li>
<p>尽量使用短的句子。短句比长句更易读、易维护、不易犯错。</p>
<ul>
<li>每一个句子只表达一个观点。</li>
<li>长句尽量转换成列表。</li>
<li>用简洁表达，去掉多余的词汇</li>
<li>减少从句。</li>
<li>正确区分 that 和 which 从句。</li>
</ul>
</li>
</ul>
<h2 id="列表和表格lists-and-tables">列表和表格（Lists and tables）</h2>
<ul>
<li>
<p>正确区分有序列表（数字列表，numbered lists）和无序列表（圆点列表，bulleted lists）。</p>
</li>
<li>
<p>把句内列举的项（embedded list）转换成无序列表，如：</p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw" aria-hidden="true"></i>举例<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>The llamacatcher API enables callers to create and query llamas, analyze alpacas, delete vicugnas, and track dromedaries.</p>
<p>应换成：</p>
<p>The llamacatcher API enables callers to do the following:</p>
<ul>
<li>Create and query llamas.</li>
<li>Analyze alpacas.</li>
<li>Delete vicugnas.</li>
<li>Track dromedaries.</li>
</ul>
</div>
        </div>
    </div>
</li>
<li>
<p>保持列表项之间的平行关系（避免把不同层级的东西混在一列）。</p>
</li>
<li>
<p>在使用有序列表时，用一个命令式动词开头，如：</p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw" aria-hidden="true"></i>举例<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><ol>
<li>Download the Frambus app from Google Play or iTunes.</li>
<li>Configure the Frambus app&rsquo;s settings.</li>
<li>Start the Frambus app.</li>
</ol>
</div>
        </div>
    </div>
</li>
<li>
<p>只有列表每一个项都是句子时，才使用首字母大写和句号，否则不需要。</p>
</li>
<li>
<p>使用表格应遵循的原则：</p>
<ul>
<li>每列都有标题</li>
<li>单元格字数尽量少</li>
<li>尽量保证每一列的数据类型相同</li>
</ul>
</li>
<li>
<p>表格或列表的前面，用一句话来介绍上下文</p>
</li>
</ul>
<h2 id="段落paragraphs">段落（Paragraphs）</h2>
<ul>
<li>以中心句开头。</li>
<li>每段只围绕一个主题写作，不要包含其他段落中出现的主题内容。</li>
<li>三到五句话一段，不要超过七句。</li>
<li>段落能够解释清楚三件事： what，why，how。</li>
</ul>
<h2 id="读者audience">读者（Audience）</h2>
<blockquote>
<p>好的文档 = 读者要完成任务所需的知识和技能 - 读者已有的知识和技能</p>
</blockquote>
<ul>
<li>
<p>定义读者的身份（开发者、科学家、技术经理、未毕业的工程专业学生、毕业生、非技术人员……）。</p>
</li>
<li>
<p>了解目标读者对不同知识的掌握程度。</p>
</li>
<li>
<p>确定读者需要什么，读过文档能学到什么。比如在设计规范开头这样写：
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw" aria-hidden="true"></i>举例<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">After reading the design spec, the audience will learn the following: …</div>
        </div>
    </div></p>
</li>
<li>
<p>满足读者：</p>
<ul>
<li>解释必要的词汇和概念。</li>
<li>对新手友好。</li>
<li>使用简单的英语词汇。</li>
<li>对不同文化、语言环境的读者友好，避免使用成语或俗语。</li>
</ul>
</li>
</ul>
<h2 id="文档documents">文档（Documents）</h2>
<ul>
<li>声明文档的适用场景（scope）。
<ul>
<li>最好能声明哪些场景不适用（non-scope），不适合哪些读者阅读。这不仅对读者有用，对写作者也能限制其写作的范围。</li>
</ul>
</li>
<li>声明目标读者。
<ul>
<li>最好能指出读者在阅读前应该具备的知识和经验。</li>
</ul>
</li>
<li>在开头部分概括文档的关键点
<ul>
<li>可以通过比较、对比旧观点的手法，让读者明白你要表达的新观点。</li>
</ul>
</li>
<li>按读者需要组织文档格式。
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw" aria-hidden="true"></i>好的大纲举例<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><ol>
<li>Overview of the algorithm
<ul>
<li>Compare and contrast with quicksort, including Big O comparisons
<ul>
<li>Link to Wikipedia article on quicksort</li>
</ul>
</li>
<li>Optimal datasets for the algorithm</li>
</ul>
</li>
<li>Implementing the algorithm
<ul>
<li>Implementation in pseudocode</li>
<li>Implementation tips, including common mistakes</li>
</ul>
</li>
<li>Deeper analysis of algorithm - Edge cases - Known unknowns</li>
</ol>
</div>
        </div>
    </div></li>
</ul>
<h2 id="标点符号punctuation">标点符号（Punctuation）</h2>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw" aria-hidden="true"></i>Note<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">这部分原文涉及英文标点符号的用法，大部分和汉语规则近似，略过不译。以下是我在排版方面的经验：
大多数中国人对英文排版易错的地方是空格的滥用。可以参考这篇文章： <a href="https://zhuanlan.zhihu.com/p/110266694" target="_blank" rel="noopener noreffer ">英文标点要如何排版？</a>。</div>
        </div>
    </div>
<p>概括起来：</p>
<ul>
<li><code>, ; : . ? !</code> 这些符号后加空格</li>
<li><code>() '' &quot;&quot;</code> 这些成对的符号左右加空格，内部不加空格</li>
<li><code>/ - _</code>不加空格</li>
</ul>
<h2 id="总结">总结</h2>
<ul>
<li>统一使用术语。</li>
<li>避免模棱两可的代名词。</li>
<li>主动语态优于被动语态。</li>
<li>选择具体的动词而不是模糊的动词。</li>
<li>每句话集中在一个想法上。</li>
<li>将一些长句子转化为列表。</li>
<li>消除不必要的词。</li>
<li>有顺序时使用有序（数字）列表，无顺序时使用无序（圆点）列表。</li>
<li>保持列表项目平行（概念层次相同）。</li>
<li>用祈使（命令性）的词作为有序列表项的开头。</li>
<li>适当地介绍列表和表格。</li>
<li>开宗明义，明确段落的中心点。</li>
<li>将每一段落集中在一个主题上。</li>
<li>确定你的读者需要学习什么。</li>
<li>使文档适应读者。</li>
<li>在文档的开头指出关键信息。</li>
</ul>
<h2 id="延伸阅读资料">延伸阅读资料</h2>
<ul>
<li><a href="https://docsfordevelopers.com/" target="_blank" rel="noopener noreffer ">Docs for Developers</a></li>
<li><a href="https://www.oreilly.com/library/view/software-engineering-at/9781492082781/" target="_blank" rel="noopener noreffer ">Software Engineering at Google</a></li>
<li><a href="https://about.gitlab.com/handbook/engineering/ux/technical-writing/fundamentals/" target="_blank" rel="noopener noreffer ">Gitlab Technical Writing Fundamentals courese</a></li>
</ul>
]]></description></item><item><title>《分手的决心》细节分析</title><link>https://sund.site/posts/2022/decision_to_leave/</link><pubDate>Sun, 14 Aug 2022 17:01:56 +0800</pubDate><author>Steve Sun</author><guid>https://sund.site/posts/2022/decision_to_leave/</guid><description><![CDATA[<blockquote>
<p>把那部手机丢进海里，让它陷入深处，没人能寻到。</p>
</blockquote>
<p>看完《分手的决心》，我决心水一篇。今天跟大家一起分析分析电影里的细节。</p>
<h2 id="影片开头的支线情节">影片开头的支线情节</h2>
<p>电影的一开头，刑警张海俊在追查两起凶杀案。分别是知九洞杀人案和女主宋瑞莱（汤唯饰）丈夫坠山案。第一次看时令我不解的是，前一起案件看似和整个剧情毫无关系，为什么导演要花那么多时间讲一个支线故事呢。</p>
<p>让我们回顾一下知九洞案：凶手洪山五曾经和女友吴佳人非常相爱，后来吴与小凡（后来的死者）偷情，得知被绿后的洪山五愤而刺死情敌。在刑警男主一番抓捕之后，洪山五被逼到天台边缘跳楼自杀。他在自杀前，特别希望转告女友吴佳人：「虽然我为了你受苦，但如果不是你，我的人生将是一场空」。</p>
<p></p>
<p>这里印证了前面情节中，知九洞案另一位嫌疑犯，洪山五的朋友（李智久）的口供。</p>
<blockquote>
<p>他那个人，宁可自杀也不会回监狱，因为回忆太过美好。</p>
</blockquote>
<p>这句话点出洪山五选择跳楼自杀的原因——当初和女友在一起时的美好回忆，令他陷在过去中，无法面对现实。</p>
<p>这是整个故事的基调，也暗示了男女主人公的结局。</p>
<p>而洪山五跳下的那栋楼，和女主丈夫奇都秀坠亡的那座山，在男主的俯视角镜头里形成了呼应。「山」在这里暗示了「稳固的关系」，洪山五为其而死，奇度秀被其所害。</p>
<h2 id="正篇">正篇</h2>
<p>下面是我画的一张主要人物关系图。如果忘了剧情可以参考一下。</p>
<p></p>
<h3 id="山与海的隐喻">山与海的隐喻</h3>
<p>回到主线，女主宋瑞莱的名字里已经透露了重要的信息，「瑞」字里有「山」，男主张海俊的名字里有「海」。中文译者把线索藏在两位主角的名字里，其用心真是让我惊叹啊。另外故事里也反复出现「山海经」、水纹封面的笔记等元素。</p>
<p>从女主宋瑞莱的角度看，片中反复出现她在「山」和「海」两种状态的摇摆。</p>
<p></p>
<p>第一次是在警局问话时，她提到「智者乐水，仁者乐山，我不是智者，所以我喜欢水」。这明显是撒谎，是为了解释她和丈夫吵架的借口。因为在后面情节中，她反复提到她的母亲在临死前跟她说「去找你姥爷在韩国老家的山吧」。这里出现的山，并不仅仅是现实中的锄头山，也是女主心里追寻的山。</p>
<p></p>
<p>而后半段中，女主和男主两人在雪中爬上锄头山之后，女主说，「母亲告诉我，去韩国吧，去那里就有这座山」。</p>
<p></p>
<p>可见，女主身世坎坷，来到韩国后心中一直追寻稳定的依靠，母亲的话冥冥中指引她「去那里吧，那里有你的山」。可是到韩国后第一任丈夫的长期虐待，让宋瑞莱仇恨眼前的山，而把男主张海俊视作是可以真正依靠的山。</p>
<p>而站在男主的视角，他的山，是枷锁。</p>
<p>山稳固有形，水流动无形。男主刑警张海俊，有个在核电站工作、周末同房的妻子。两人的关系是稳固的，同时也是空洞的。男主经常夜里一个人去看海。而他的妻子对此不屑一顾。</p>
<blockquote>
<p>男主：要我说，我是大海的男子汉！</p>
</blockquote>
<blockquote>
<p>夫人：什么大海的男子汉，明明内陆才是故乡。</p>
</blockquote>
<p></p>
<p></p>
<p>男主想要逃避的是眼前的山，在他和女主相遇的一瞬间，他就清晰地知道，他们是同一类人。</p>
<h3 id="两部手机">两部手机</h3>
<p>故事的第一个高潮，男主发现女主作案的铁证之后，陷入因自己沉迷感情而丧失破案机会的「崩溃」中。男主戳穿宋瑞莱的作案过程之后，仍然选择抛弃自己的身份，和宋瑞莱成为共犯（可能已经是他人生剧本中早已经注定的安排），他对宋瑞莱说：</p>
<blockquote>
<p>把那部手机丢进海里，让它陷入深处，没人能寻到。</p>
</blockquote>
<p>对于宋瑞莱来说，这句话击中了她心里最柔软的地方。当男主在她面前放弃了自己最重视的东西时，她发现自己也已经没有办法从这段关系里挣脱，她在男主离去后，留下一滴眼泪。</p>
<p>讲到这里，电影里最重要的线索就是手机。片中一共有两部手机，第一部女主的红色手机记录了宋瑞莱杀死丈夫的线索，另一部第二任丈夫的手机，记录了男主保护宋瑞莱，掩盖杀人线索的录音。</p>
<p>这两部手机的归宿也很耐人寻味。</p>
<p>第一部手机（记录女主罪证），男主希望丢掉，却被女主保留下来。</p>
<p>另一部手机（记录男主罪证）是宋瑞莱主动丢到大海里，但是被男主捞上来的。</p>
<p>这两部犯罪的证据，成为双方为了保护对方，丢不掉的羁绊。</p>
<p>故事的结局，宋瑞莱没有选择丢弃手机，而是带着这段回忆，和手机一起消失在无人知道的大海里。她在临别时说：</p>
<blockquote>
<p>海里捞出来的手机，你重新丢了吧，丢到更深的海里。</p>
</blockquote>
<p>没有说出的话，大概是「忘了我吧，但是我会记得你」。</p>
<h3 id="婚戒">婚戒</h3>
<p>电影的另一个反复出现的线索是婚戒。</p>
<p>影片里，男主与夫人羞羞之后，导演给了婚戒一个特写，男主有一个把婚戒握起来的小动作，暗示了男主和夫人之间看似恩爱的表面下，是双方都不愿意说破的冷漠。</p>
<p></p>
<p></p>
<p>而在发生丈夫坠山事件之后，宋瑞莱在警察局审问中途去了一趟洗手间，她发现手上的婚戒没有戴，然后悄悄戴上了。也说明她似乎在掩饰着什么。</p>
<p></p>
<p>在女主的第二任丈夫死后，男主押送女主的汽车上，男主的手上仍然有婚戒。</p>
<p></p>
<p>但是片尾，两个人第二次同坐一辆车时，男主的婚戒已经消失了，而宋瑞莱的手紧紧握住了张海俊：</p>
<p></p>
<h3 id="乌鸦的羽毛">乌鸦的羽毛</h3>
<p>另一个多次出现的暗示，是黑色羽毛。女主喂养的小猫为了报答主人，弄死了一只乌鸦叼到女主身边。这正是后半段女主杀夫护男主的伏笔。</p>
<p></p>
<p>片中第二次和第三次出现乌鸦羽毛，分别在男主调查两任丈夫死亡线索时一闪而过。其实男主早就把两任丈夫的死亡，同女主紧紧绑定在一起了。</p>
<p></p>
<p></p>
<h2 id="尾声">尾声</h2>
<p>其实电影里还有很多细节，比如女主的很多韩语对白都是从电视剧里学的；宋瑞莱两任丈夫分别死在山上和水里；影片里的城市以「雾」闻名，而雾是介于有形和无形之间的东西……等等。</p>
<p>最后送上汤唯的一段表情，宋瑞莱开车前往海边时，张海俊在电话里问她「我什么时候说过爱你？」，宋瑞莱在短短几秒钟内的四个眼神。</p>
<p></p>
<p></p>
<p></p>
<p></p>
]]></description></item></channel></rss>