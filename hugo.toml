# 生成页面链接时使用的基本 URL，设置为你网站的 URL
# The basic URL used to generate page links, set it to your website's URL.
baseURL = "https://sund.site/"
title = "Steve Sun"
description = "A blog of Steve Sun"
languageCode = "zh-CN"
enableRobotsTXT = true
disableKinds = ["taxonomy"]
ignoreErrors = ["error-disable-taxonomy"]

[module]
[[module.imports]]
path = 'github.com/rokcso/hugo-bearblog-neo'

[params]
# 你的网站描述，将应用到你生成的 HTML 元数据中
# Your website description, which will be applied to the HTML metadata generated by you.

# 你的 favicon 文件的路径，这应该是一个至少为 32px x 32px 的正方形 png 文件
# The path to your favicon file, which should be a square PNG file at least 32px x 32px.
# 提示：最好将 favicon.ico 文件放入你的 static 文件夹中
# Hint: It is best to place the favicon.ico file in your static folder.
favicon = "/favicon.ico"

# 这些图像用于结构化数据模板。这将显示为如 Twitter 或 Slack 想要为一个链接到你的网站的链接生成预览时
# These images are used for structured data templates. This will be displayed as when Twitter or Slack want to generate a preview for a link to your website.
# 请参见 https://gohugo.io/templates/embedded/#x-twitter-cards 和 https://gohugo.io/templates/internal#open-graph
# Please refer to https://gohugo.io/templates/embedded/#x-twitter-cards and https://gohugo.io/templates/internal#open-graph.
images = ["images/share.png"]

# 默认情况下，此主题以「02 Jan, 2006」的格式显示日期
# By default, this theme displays dates in the format '02 Jan, 2006'.
# 但你可以在网站的配置文件中通过设置 `dateFormat` 参数来自定义它
# But you can customize it by setting the `dateFormat` parameter in the website's configuration file.
# 请参见 https://gohugo.io/functions/format
# Please refer to https://gohugo.io/functions/format.
# 以下是一个使用 https://en.wikipedia.org/wiki/ISO_8601 格式的 TOML 配置示例
# The following is an example of a TOML configuration using the ISO 8601 format (https://en.wikipedia.org/wiki/ISO_8601).
# dateFormat = "1/2"

# 版权说明文案，将应用到 RSS 和页面底部
# Copyright notice text, to be applied to RSS and the bottom of the page.
copyright = "Copyright © 2013-2025, Steve Sun."

# 博客文章列表是否按年份分组，Bear Blog 样式为 false
# Is the list of blog articles grouped by year, the Bear Blog style is false.
groupByYear = true

# 博客文章列表是否显示文章数量（只统计未被隐藏的文章），Bear Blog 样式为 false
# The blog post list does not display the number of articles (only counts the articles that have not been hidden), the Bear Blog style is false.
showPostCount = true

# 博客文章列表页是否启用文章搜索功能
# Is the article search function enabled on the blog article list page?
postSearch = true

# 文章页是否启用 TOC
# Article page whether enabled TOC?
toc = true

# Post Upvote API 的配置，详见 https://github.com/rokcso/post-upvote-api
# Post Upvote API configuration, see https://github.com/rokcso/post-upvote-api for details.
upvote = false
# upvoteURL = "https://post-upvote-api.example.com/"

[params.footer]
# 是否隐藏版权说明文案，若不配置，默认 false
# Whether to hide the copyright notice text, if not configured, the default is false.
hideCopyright = false
# 是否隐藏 Sitemap 链接，不隐藏有利于 SEO，若不配置，默认 false
# Whether to hide the Sitemap link, not hiding is beneficial for SEO, if not configured, the default is false.
hideSitemap = false
# 是否隐藏 made-with-line，若不配置，默认 false，你可以关闭它，但如果你不这样做，我将非常感激 :-)
# Whether to hide made-with-line, if not configured, the default is false, you can turn it off, but if you don't, I will be very grateful :-)
hideMadeWithLine = false
# 是否隐藏 RSS 和 Email 链接，若不配置，默认 false
# Whether to hide RSS and Email links, if not configured, the default is false.
hideRSSAndEmail = false

[params.RSS]
# 是否启用 RSS，若不配置，默认 true
# Is RSS enabled? If not configured, the default is true.
enableRSS = true
# 生成的 RSS 文件中文章数量限制，若不配置，即不设限制
# The article quantity limit in the generated RSS file, if not configured, no limit is set.
pageLimit = 10
# Follow App 的 feedId 和 userId，用于在 Follow App 中 Claim 你的博客，参见：https://rokcso.com/p/follow-claim-feed/
# Follow App's feedId and userId are used to claim your blog in Follow App, see: https://rokcso.com/p/follow-claim-feed/.
followFeedId = "41397727810093074"
followUserId = "56666701051455488"

name = "Steve Sun"
# 若不配置，默认空
# If not configured, default is empty
email = ""

[markup]
# 配置 TOC 渲染规则
# Configure TOC rendering rules.
[markup.tableOfContents]
# 从 h2 开始到 h4 结束，后续的 h 等级将不会被渲染
# From h2 to h4, subsequent h levels will not be rendered.
startLevel = 2
endLevel = 4

# 生成的 URL 的结构
# Structure of the generated URL.
[permalinks]
# blog = "/p/:slug"
posts = "/posts/:year/:filename"
# tags = "/blog/:slug"
