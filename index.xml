<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>電波障害</title><link>https://sund.site/</link><description>電波障害 - Steve Sun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 18 Sep 2022 17:01:29 +0800</lastBuildDate><atom:link href="https://sund.site/index.xml" rel="self" type="application/rss+xml"/><item><title>边缘计算模式——数据管道</title><link>https://sund.site/posts/2022/pattern-of-edge-computing-data-pipeline/</link><pubDate>Sun, 18 Sep 2022 17:01:29 +0800</pubDate><author>Steve Sun</author><guid>https://sund.site/posts/2022/pattern-of-edge-computing-data-pipeline/</guid><description><![CDATA[<h2 id="问题">问题</h2>
<p>在物联网多层架构设计中，数据从终端设备流向云端，应该在哪一层做数据处理，哪一层做数据展示？分层的依据是什么？</p>
<h2 id="解决方案">解决方案</h2>
<h3 id="架构设计">架构设计</h3>
<p>边缘计算的三层数据管道。</p>
<ul>
<li><strong>数据源</strong>是由若干终端设备组成的，内置在设备中的 agent 负责采集设备的基础数据如 cpu，内存使用量，应用统计数据等。</li>
<li><strong>Edge（边缘）节点</strong>主要负责数据的处理，如 InfluxDB 通常设置在中间这一层。</li>
<li><strong>Cloud（云端）节点</strong>是地理位置无关的，有容灾和扩展能力的云端服务层，因为边缘节点的硬件限制，扩展性不如云端，因此通常经过加工的数据从边缘节点发送到云端做持久化和数据展示。云端节点也负责一部分复杂数据的加工和聚合。</li>
</ul>
<p></p>
<h2 id="edge-层">Edge 层</h2>
<p>Edge 层的通常由一个 <strong>gateway（网关）</strong>，数据处理服务，存储服务和若干的应用服务组成。因为硬件和维护的限制，Edge 层通常安装的服务数量和分配的资源有限。它主要负责数据的轻量级加工和聚合，减少从 Edge 层到 Cloud 层之间数据传输的带宽，同时快速地监控、反馈问题给终端设备。</p>
<p></p>
<h3 id="gateway">Gateway</h3>
<p>Gateway 通常要求能够根据终端设备数据自适应扩展。通常 gateway 还有设备 ID 识别，权限认证等功能。对于数据量较大的场景，gateway 需要缓存认证服务的状态，防止并发过大导致认证服务崩溃。</p>
<h3 id="data-processors">Data processors</h3>
<p>数据处理服务负责对终端发来的数据根据各种指标计算出复合指标存储到数据库或者数据仓库中。通常这一层会设置一个消息队列 MQ，如 Kafka，但是仍然因为 Edge 层设备资源的限制，消息队列最好是系统级别共享的并且能够缓存一段时期的数据，之后数据消费者（应用服务）可以根据自身需要订阅数据流。</p>
<p>常用的时序数据库，如 InfluxDB，内置了 Task 功能，将数据处理和存储合二为一。大大简化了这一层的开发工作。</p>
<h3 id="system-services--storage">System Services &amp; Storage</h3>
<p>这一层由数据库和若干系统服务组成。向上层提供系统级别的 API 和数据。值得注意的是，数据库通常不会存储长期数据，因为 Edge 层存储容量的限制和不易扩展的特性，会给数据库设置 <strong>retention period</strong> 参数，令过期数据自动销毁或通过定时任务<strong>Downloadsampling（降采样）</strong>。</p>
<p>系统服务一般由认证服务、数据 API、设备管理 API 等服务组成，这一层需要完成对设备的注册发现和管理。</p>
<h2 id="小结">小结</h2>
<p>以上就是对边缘计算的三层架构的概述和 Edge 层的设计。根据工作中的实际情况，应该重点关注几方面的问题：</p>
<ul>
<li>Edge 层的扩展性，当设备数据急速增长时是否有能力应对。</li>
<li>Edge 层的服务拆分和数据持久化策略。因为部署环境和性能的限制，开发人员并不能像 Cloud 端开发一样快速响应 Edge 节点的情况，因此 Edge 层最考验开发者根据实际用户场景调参，自动化扩展、恢复的能力。</li>
</ul>
]]></description></item><item><title>边缘计算模式——任务队列</title><link>https://sund.site/posts/2022/pattern-of-edge-computing-lock/</link><pubDate>Wed, 14 Sep 2022 08:46:21 +0800</pubDate><author>Steve Sun</author><guid>https://sund.site/posts/2022/pattern-of-edge-computing-lock/</guid><description><![CDATA[<h2 id="概述">概述</h2>
<p>在边缘计算中，边缘节点通常介于终端节点和云端节点之间，它的扩展性也介于两者之间。对于高并发或是高资源占用的业务场景，应该如何设计边缘节点的策略。</p>
<h2 id="问题">问题</h2>
<p>在边缘计算中，对于那些占用 CPU 和内存资源较大的请求，什么时候应该加锁？</p>
<h2 id="解决方案">解决方案</h2>
<p>边缘计算中有三类节点：终端节点（device），边缘节点（edge）,云端节点（cloud）。</p>
<ul>
<li>终端节点：通常应该加锁限制高资源占用。因为终端设备往往资源紧张，不可扩展。</li>
<li>云端节点：通常不需要加锁，而是扩展副本。</li>
</ul>
<p>对于情况比较复杂的边缘节点，通常要综合考虑当前系统资源分配策略和用户使用场景。</p>
<h3 id="一般情况">一般情况</h3>
<p>对于工业物联网环境，边缘节点的操作员通常较少，同一时间进行的操作不多，在这种情况下可以采用加锁的方式来限制资源占用。</p>
<h3 id="最佳实践全局任务队列">最佳实践——全局任务队列</h3>
<p>对于多用户或者并发稍高的情况，边缘节点可以实现全局的任务队列来缓解高资源占用的任务给系统造成的负担。在应用的架构设计上，应该将高资源占用的请求以事件形式发送到全局任务队列，由边缘节点系统统一调度这些任务，按顺序或特定的优先级依次执行。</p>
<p>对于任务队列已满的情况，再考虑扩展应用服务副本数量。</p>
]]></description></item><item><title>规范的错误信息</title><link>https://sund.site/posts/2022/write-error-message/</link><pubDate>Tue, 23 Aug 2022 22:18:00 +0800</pubDate><author>Steve Sun</author><guid>https://sund.site/posts/2022/write-error-message/</guid><description><![CDATA[<p></p>
<p>本文整理了 Google 官方文档中关于错误信息的编写规范。适用于有一定编程经验，尤其从事业务开发的程序员。</p>
<p>通过本文你可以：</p>
<ul>
<li>写出风格统一、用户友好的错误信息</li>
<li>提高代码的可维护性，降低沟通成本</li>
</ul>
<p>Google 文档原文：<a href="https://developers.google.com/tech-writing/error-messages" target="_blank" rel="noopener noreffer ">Error Messages</a></p>
<h2 id="基本原则">基本原则</h2>
<ul>
<li>错误不应该被掩盖 (Don&rsquo;t fail silently)</li>
<li>遵循语言的规范 (Follow the programming language guides)</li>
<li>实现完整的错误模型 (Implement the full error model)
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw" aria-hidden="true"></i>Tips<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">包含错误码、错误内容、错误原因、处理方法</div>
        </div>
    </div></li>
<li>避免吞掉问题根源 (Avoid swallowing the root cause)</li>
<li>输出错误代码 (Log the error codes)</li>
<li>快速抛出错误 (Raise errors immediately)</li>
</ul>
<h2 id="解释错误原因">解释错误原因</h2>
<p>使用错误信息给用户解释原因时，应该遵循：</p>
<ul>
<li>具体，准确，避免含糊。</li>
<li>在错误信息中包含用户输入的错误内容。如果输入的内容特别长：
<ul>
<li>渐进地显示，提供一个可展开详情的省略号。</li>
<li>截断内容，只保留必要部分。</li>
</ul>
</li>
<li>明确告诉用户，系统的要求和限制</li>
</ul>
<h2 id="解释如何处理问题">解释如何处理问题</h2>
<ul>
<li>对用户来说，错误信息必须有可操作性。也就是说，在解释了问题的原因后，说明如何解决这个问题。</li>
<li>最好给用户提供一个例子。</li>
</ul>
<h2 id="清晰的错误信息">清晰的错误信息</h2>
<ul>
<li>简明扼要，使用主动语态。（这方面内容可以参考<a href="https://sund.site/posts/2022/technical-writing/" target="_blank" rel="noopener noreffer ">技术文档写作指南</a>）</li>
<li>避免出现双重否定句式。</li>
<li>让目标用户能够理解，即根据用户掌握的知识，提供有帮助的内容。</li>
<li>专业术语应前后一致。</li>
</ul>
<h2 id="错误信息的格式">错误信息的格式</h2>
<ul>
<li>使用链接提供更多信息。</li>
<li>渐进式呈现错误信息（比如可以展开详情的省略号）。</li>
<li>错误提示应该贴近错误发生的位置。</li>
<li>避免错误信息滥用字体或颜色。</li>
<li>使用正确的语气:
<ul>
<li>不要告诉用户错在哪，告诉用户应该做什么。</li>
<li>避免责备、幽默、道歉的语气。</li>
</ul>
</li>
</ul>
<h2 id="对后端开发的建议">对后端开发的建议</h2>
<ul>
<li>错误要有错误码</li>
<li>可以在错误信息结构里提供一个指向错误解释的 ID，如：
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&#34;error&#34;</span><span class="p">:</span> <span class="s2">&#34;Bad Request - Request is missing a required parameter: -collection_name. Update parameter and resubmit. Issue Reference Number BR0x0071&#34;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
]]></description></item><item><title>技术文档写作指南</title><link>https://sund.site/posts/2022/technical-writing/</link><pubDate>Sun, 21 Aug 2022 15:29:00 +0800</pubDate><author>Steve Sun</author><guid>https://sund.site/posts/2022/technical-writing/</guid><description><![CDATA[<p>本文内容摘录自 <a href="https://developers.google.com/tech-writing/overview" target="_blank" rel="noopener noreffer ">Technical Writing</a> （谷歌技术文档写作指南）的第一部分。</p>
<p>本文适用于想要提高技术文档写作、技术领域日常沟通能力的读者，对于一些商务的、非文学性质的英语办公场景沟通，也能起一定帮助作用。</p>
<p>阅读过本文的读者可以：</p>
<ul>
<li>提高在日常办公中清晰、准确、客观地传达概念和逻辑的能力。</li>
<li>掌握英文技术文档写作规范。</li>
</ul>
<h2 id="词汇words">词汇（Words）</h2>
<ul>
<li>
<p>对于已有的术语，不要重复发明新的词汇，可以用一个链接指向解释它的页面。</p>
</li>
<li>
<p>如果有必要，可以在文档中直接定义新的术语，但如果术语比较多，最好建立一个术语对照表。</p>
</li>
<li>
<p>文档各处出现的术语应该保持一致的名称或缩写。</p>
</li>
<li>
<p>关于缩写：第一次出现要用<strong>粗体</strong>写全称并用括号指明缩写，之后的文章中不要反复混用全称和缩写。</p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw" aria-hidden="true"></i>举例<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">This document is for engineers who are new to the <strong>Telekinetic Tactile Network</strong> (<strong>TTN</strong>) or need to understand how to order TTN replacement parts through finger motions.</div>
        </div>
    </div>
</li>
<li>
<p>如果一个术语出现频率不高，请不要使用缩写。</p>
</li>
<li>
<p>使用缩写的情况有：1. 缩写明显更简短；2. 该术语出现频率很高。</p>
</li>
<li>
<p>谨慎使用代名词（It，they，that 等）。</p>
<ul>
<li>代名词一定要出现在它所指代的名词之后。</li>
<li>如果代名词远离它指代的名词（超过 5 个单词），就不用代名词。</li>
<li>在名词和代名词之间出现第二个名词，会产生歧义，应避免这种情况。</li>
</ul>
</li>
</ul>
<p>类比计算机编程语言：</p>
<p>缩写 = 对术语的一层抽象。读者需要花费更多脑力去把它展开成对应的名词。</p>
<p>代名词 = 指针。它容易引起歧义，所以要避免在读者大脑中引起「空指针」错误。</p>
<h2 id="主动语态active-voice">主动语态（Active voice）</h2>
<ul>
<li>技术文档中应尽量使用主动语态。
<ul>
<li>被动语态在读者大脑中需要额外的加工转换才能被理解。</li>
<li>被动语态用来间接地表达行为，容易引起混乱。</li>
<li>有些被动语态省略了行为主体，会迫使读者猜测主语是谁。</li>
</ul>
</li>
<li>如果使用被动语态，应正确使用过去分词的各种形式和介词（如 as，by）。</li>
<li>祈使句的动词（命令式动词）应该使用主动语态。</li>
<li>科技论文中经常出现被动语态（如 It has been suggested that&hellip;），这种写法并不能传递更多信息，很多科学期刊也开始鼓励使用主动语态。</li>
</ul>
<h2 id="炼句clear-sentencesshort-sentences">炼句（Clear sentences，Short sentences）</h2>
<ul>
<li>
<p>选择准确、有力、具体的动词。减少不精确的、软弱的或通用的动词。
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw" aria-hidden="true"></i>错误的例子<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">is，are，occur，happen</div>
        </div>
    </div></p>
</li>
<li>
<p>Be 动词和通用动词可以用，但它们通常是一些不良写作习惯的信号，如</p>
<ul>
<li>句子中缺少行为主体</li>
<li>句子使用了被动语态</li>
</ul>
</li>
<li>
<p>减少 there be 句式，把 there be 句式中的主语和动词提炼出来
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw" aria-hidden="true"></i>错误的例子<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>避免这样用：There is no guarantee that the updates will be received in sequential order.</p>
<p>应改为：Clients might not receive the updates in sequential order.</p>
</div>
        </div>
    </div></p>
</li>
<li>
<p>尽量少用或不用形容词和副词，因为这些词汇过于主观。</p>
</li>
<li>
<p>尽量使用短的句子。短句比长句更易读、易维护、不易犯错。</p>
<ul>
<li>每一个句子只表达一个观点。</li>
<li>长句尽量转换成列表。</li>
<li>用简洁表达，去掉多余的词汇</li>
<li>减少从句。</li>
<li>正确区分 that 和 which 从句。</li>
</ul>
</li>
</ul>
<h2 id="列表和表格lists-and-tables">列表和表格（Lists and tables）</h2>
<ul>
<li>
<p>正确区分有序列表（数字列表，numbered lists）和无序列表（圆点列表，bulleted lists）。</p>
</li>
<li>
<p>把句内列举的项（embedded list）转换成无序列表，如：</p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw" aria-hidden="true"></i>举例<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>The llamacatcher API enables callers to create and query llamas, analyze alpacas, delete vicugnas, and track dromedaries.</p>
<p>应换成：</p>
<p>The llamacatcher API enables callers to do the following:</p>
<ul>
<li>Create and query llamas.</li>
<li>Analyze alpacas.</li>
<li>Delete vicugnas.</li>
<li>Track dromedaries.</li>
</ul>
</div>
        </div>
    </div>
</li>
<li>
<p>保持列表项之间的平行关系（避免把不同层级的东西混在一列）。</p>
</li>
<li>
<p>在使用有序列表时，用一个命令式动词开头，如：</p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw" aria-hidden="true"></i>举例<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><ol>
<li>Download the Frambus app from Google Play or iTunes.</li>
<li>Configure the Frambus app&rsquo;s settings.</li>
<li>Start the Frambus app.</li>
</ol>
</div>
        </div>
    </div>
</li>
<li>
<p>只有列表每一个项都是句子时，才使用首字母大写和句号，否则不需要。</p>
</li>
<li>
<p>使用表格应遵循的原则：</p>
<ul>
<li>每列都有标题</li>
<li>单元格字数尽量少</li>
<li>尽量保证每一列的数据类型相同</li>
</ul>
</li>
<li>
<p>表格或列表的前面，用一句话来介绍上下文</p>
</li>
</ul>
<h2 id="段落paragraphs">段落（Paragraphs）</h2>
<ul>
<li>以中心句开头。</li>
<li>每段只围绕一个主题写作，不要包含其他段落中出现的主题内容。</li>
<li>三到五句话一段，不要超过七句。</li>
<li>段落能够解释清楚三件事： what，why，how。</li>
</ul>
<h2 id="读者audience">读者（Audience）</h2>
<blockquote>
<p>好的文档 = 读者要完成任务所需的知识和技能 - 读者已有的知识和技能</p>
</blockquote>
<ul>
<li>
<p>定义读者的身份（开发者、科学家、技术经理、未毕业的工程专业学生、毕业生、非技术人员……）。</p>
</li>
<li>
<p>了解目标读者对不同知识的掌握程度。</p>
</li>
<li>
<p>确定读者需要什么，读过文档能学到什么。比如在设计规范开头这样写：
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw" aria-hidden="true"></i>举例<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">After reading the design spec, the audience will learn the following: …</div>
        </div>
    </div></p>
</li>
<li>
<p>满足读者：</p>
<ul>
<li>解释必要的词汇和概念。</li>
<li>对新手友好。</li>
<li>使用简单的英语词汇。</li>
<li>对不同文化、语言环境的读者友好，避免使用成语或俗语。</li>
</ul>
</li>
</ul>
<h2 id="文档documents">文档（Documents）</h2>
<ul>
<li>声明文档的适用场景（scope）。
<ul>
<li>最好能声明哪些场景不适用（non-scope），不适合哪些读者阅读。这不仅对读者有用，对写作者也能限制其写作的范围。</li>
</ul>
</li>
<li>声明目标读者。
<ul>
<li>最好能指出读者在阅读前应该具备的知识和经验。</li>
</ul>
</li>
<li>在开头部分概括文档的关键点
<ul>
<li>可以通过比较、对比旧观点的手法，让读者明白你要表达的新观点。</li>
</ul>
</li>
<li>按读者需要组织文档格式。
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw" aria-hidden="true"></i>好的大纲举例<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><ol>
<li>Overview of the algorithm
<ul>
<li>Compare and contrast with quicksort, including Big O comparisons
<ul>
<li>Link to Wikipedia article on quicksort</li>
</ul>
</li>
<li>Optimal datasets for the algorithm</li>
</ul>
</li>
<li>Implementing the algorithm
<ul>
<li>Implementation in pseudocode</li>
<li>Implementation tips, including common mistakes</li>
</ul>
</li>
<li>Deeper analysis of algorithm - Edge cases - Known unknowns</li>
</ol>
</div>
        </div>
    </div></li>
</ul>
<h2 id="标点符号punctuation">标点符号（Punctuation）</h2>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw" aria-hidden="true"></i>Note<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">这部分原文涉及英文标点符号的用法，大部分和汉语规则近似，略过不译。以下是我在排版方面的经验：
大多数中国人对英文排版易错的地方是空格的滥用。可以参考这篇文章： <a href="https://zhuanlan.zhihu.com/p/110266694" target="_blank" rel="noopener noreffer ">英文标点要如何排版？</a>。</div>
        </div>
    </div>
<p>概括起来：</p>
<ul>
<li><code>, ; : . ? !</code> 这些符号后加空格</li>
<li><code>() '' &quot;&quot;</code> 这些成对的符号左右加空格，内部不加空格</li>
<li><code>/ - _</code>不加空格</li>
</ul>
<h2 id="总结">总结</h2>
<ul>
<li>统一使用术语。</li>
<li>避免模棱两可的代名词。</li>
<li>主动语态优于被动语态。</li>
<li>选择具体的动词而不是模糊的动词。</li>
<li>每句话集中在一个想法上。</li>
<li>将一些长句子转化为列表。</li>
<li>消除不必要的词。</li>
<li>有顺序时使用有序（数字）列表，无顺序时使用无序（圆点）列表。</li>
<li>保持列表项目平行（概念层次相同）。</li>
<li>用祈使（命令性）的词作为有序列表项的开头。</li>
<li>适当地介绍列表和表格。</li>
<li>开宗明义，明确段落的中心点。</li>
<li>将每一段落集中在一个主题上。</li>
<li>确定你的读者需要学习什么。</li>
<li>使文档适应读者。</li>
<li>在文档的开头指出关键信息。</li>
</ul>
<h2 id="延伸阅读资料">延伸阅读资料</h2>
<ul>
<li><a href="https://docsfordevelopers.com/" target="_blank" rel="noopener noreffer ">Docs for Developers</a></li>
<li><a href="https://www.oreilly.com/library/view/software-engineering-at/9781492082781/" target="_blank" rel="noopener noreffer ">Software Engineering at Google</a></li>
<li><a href="https://about.gitlab.com/handbook/engineering/ux/technical-writing/fundamentals/" target="_blank" rel="noopener noreffer ">Gitlab Technical Writing Fundamentals courese</a></li>
</ul>
]]></description></item><item><title>《分手的决心》细节分析</title><link>https://sund.site/posts/2022/decision_to_leave/</link><pubDate>Sun, 14 Aug 2022 17:01:56 +0800</pubDate><author>Steve Sun</author><guid>https://sund.site/posts/2022/decision_to_leave/</guid><description><![CDATA[<blockquote>
<p>把那部手机丢进海里，让它陷入深处，没人能寻到。</p>
</blockquote>
<p>看完《分手的决心》，我决心水一篇。今天跟大家一起分析分析电影里的细节。</p>
<h2 id="影片开头的支线情节">影片开头的支线情节</h2>
<p>电影的一开头，刑警张海俊在追查两起凶杀案。分别是知九洞杀人案和女主宋瑞莱（汤唯饰）丈夫坠山案。第一次看时令我不解的是，前一起案件看似和整个剧情毫无关系，为什么导演要花那么多时间讲一个支线故事呢。</p>
<p>让我们回顾一下知九洞案：凶手洪山五曾经和女友吴佳人非常相爱，后来吴与小凡（后来的死者）偷情，得知被绿后的洪山五愤而刺死情敌。在刑警男主一番抓捕之后，洪山五被逼到天台边缘跳楼自杀。他在自杀前，特别希望转告女友吴佳人：「虽然我为了你受苦，但如果不是你，我的人生将是一场空」。</p>
<p></p>
<p>这里印证了前面情节中，知九洞案另一位嫌疑犯，洪山五的朋友（李智久）的口供。</p>
<blockquote>
<p>他那个人，宁可自杀也不会回监狱，因为回忆太过美好。</p>
</blockquote>
<p>这句话点出洪山五选择跳楼自杀的原因——当初和女友在一起时的美好回忆，令他陷在过去中，无法面对现实。</p>
<p>这是整个故事的基调，也暗示了男女主人公的结局。</p>
<p>而洪山五跳下的那栋楼，和女主丈夫奇都秀坠亡的那座山，在男主的俯视角镜头里形成了呼应。「山」在这里暗示了「稳固的关系」，洪山五为其而死，奇度秀被其所害。</p>
<h2 id="正篇">正篇</h2>
<p>下面是我画的一张主要人物关系图。如果忘了剧情可以参考一下。</p>
<p></p>
<h3 id="山与海的隐喻">山与海的隐喻</h3>
<p>回到主线，女主宋瑞莱的名字里已经透露了重要的信息，「瑞」字里有「山」，男主张海俊的名字里有「海」。中文译者把线索藏在两位主角的名字里，其用心真是让我惊叹啊。另外故事里也反复出现「山海经」、水纹封面的笔记等元素。</p>
<p>从女主宋瑞莱的角度看，片中反复出现她在「山」和「海」两种状态的摇摆。</p>
<p></p>
<p>第一次是在警局问话时，她提到「智者乐水，仁者乐山，我不是智者，所以我喜欢水」。这明显是撒谎，是为了解释她和丈夫吵架的借口。因为在后面情节中，她反复提到她的母亲在临死前跟她说「去找你姥爷在韩国老家的山吧」。这里出现的山，并不仅仅是现实中的锄头山，也是女主心里追寻的山。</p>
<p></p>
<p>而后半段中，女主和男主两人在雪中爬上锄头山之后，女主说，「母亲告诉我，去韩国吧，去那里就有这座山」。</p>
<p></p>
<p>可见，女主身世坎坷，来到韩国后心中一直追寻稳定的依靠，母亲的话冥冥中指引她「去那里吧，那里有你的山」。可是到韩国后第一任丈夫的长期虐待，让宋瑞莱仇恨眼前的山，而把男主张海俊视作是可以真正依靠的山。</p>
<p>而站在男主的视角，他的山，是枷锁。</p>
<p>山稳固有形，水流动无形。男主刑警张海俊，有个在核电站工作、周末同房的妻子。两人的关系是稳固的，同时也是空洞的。男主经常夜里一个人去看海。而他的妻子对此不屑一顾。</p>
<blockquote>
<p>男主：要我说，我是大海的男子汉！</p>
</blockquote>
<blockquote>
<p>夫人：什么大海的男子汉，明明内陆才是故乡。</p>
</blockquote>
<p></p>
<p></p>
<p>男主想要逃避的是眼前的山，在他和女主相遇的一瞬间，他就清晰地知道，他们是同一类人。</p>
<h3 id="两部手机">两部手机</h3>
<p>故事的第一个高潮，男主发现女主作案的铁证之后，陷入因自己沉迷感情而丧失破案机会的「崩溃」中。男主戳穿宋瑞莱的作案过程之后，仍然选择抛弃自己的身份，和宋瑞莱成为共犯（可能已经是他人生剧本中早已经注定的安排），他对宋瑞莱说：</p>
<blockquote>
<p>把那部手机丢进海里，让它陷入深处，没人能寻到。</p>
</blockquote>
<p>对于宋瑞莱来说，这句话击中了她心里最柔软的地方。当男主在她面前放弃了自己最重视的东西时，她发现自己也已经没有办法从这段关系里挣脱，她在男主离去后，留下一滴眼泪。</p>
<p>讲到这里，电影里最重要的线索就是手机。片中一共有两部手机，第一部女主的红色手机记录了宋瑞莱杀死丈夫的线索，另一部第二任丈夫的手机，记录了男主保护宋瑞莱，掩盖杀人线索的录音。</p>
<p>这两部手机的归宿也很耐人寻味。</p>
<p>第一部手机（记录女主罪证），男主希望丢掉，却被女主保留下来。</p>
<p>另一部手机（记录男主罪证）是宋瑞莱主动丢到大海里，但是被男主捞上来的。</p>
<p>这两部犯罪的证据，成为双方为了保护对方，丢不掉的羁绊。</p>
<p>故事的结局，宋瑞莱没有选择丢弃手机，而是带着这段回忆，和手机一起消失在无人知道的大海里。她在临别时说：</p>
<blockquote>
<p>海里捞出来的手机，你重新丢了吧，丢到更深的海里。</p>
</blockquote>
<p>没有说出的话，大概是「忘了我吧，但是我会记得你」。</p>
<h3 id="婚戒">婚戒</h3>
<p>电影的另一个反复出现的线索是婚戒。</p>
<p>影片里，男主与夫人羞羞之后，导演给了婚戒一个特写，男主有一个把婚戒握起来的小动作，暗示了男主和夫人之间看似恩爱的表面下，是双方都不愿意说破的冷漠。</p>
<p></p>
<p></p>
<p>而在发生丈夫坠山事件之后，宋瑞莱在警察局审问中途去了一趟洗手间，她发现手上的婚戒没有戴，然后悄悄戴上了。也说明她似乎在掩饰着什么。</p>
<p></p>
<p>在女主的第二任丈夫死后，男主押送女主的汽车上，男主的手上仍然有婚戒。</p>
<p></p>
<p>但是片尾，两个人第二次同坐一辆车时，男主的婚戒已经消失了，而宋瑞莱的手紧紧握住了张海俊：</p>
<p></p>
<h3 id="乌鸦的羽毛">乌鸦的羽毛</h3>
<p>另一个多次出现的暗示，是黑色羽毛。女主喂养的小猫为了报答主人，弄死了一只乌鸦叼到女主身边。这正是后半段女主杀夫护男主的伏笔。</p>
<p></p>
<p>片中第二次和第三次出现乌鸦羽毛，分别在男主调查两任丈夫死亡线索时一闪而过。其实男主早就把两任丈夫的死亡，同女主紧紧绑定在一起了。</p>
<p></p>
<p></p>
<h2 id="尾声">尾声</h2>
<p>其实电影里还有很多细节，比如女主的很多韩语对白都是从电视剧里学的；宋瑞莱两任丈夫分别死在山上和水里；影片里的城市以「雾」闻名，而雾是介于有形和无形之间的东西……等等。</p>
<p>最后送上汤唯的一段表情，宋瑞莱开车前往海边时，张海俊在电话里问她「我什么时候说过爱你？」，宋瑞莱在短短几秒钟内的四个眼神。</p>
<p></p>
<p></p>
<p></p>
<p></p>
]]></description></item><item><title>3 Ways To Access Host System In Docker Container</title><link>https://sund.site/posts/2022/3_ways_to_access_host_system_in_container/</link><pubDate>Mon, 08 Aug 2022 20:04:00 +0800</pubDate><author>Steve Sun</author><guid>https://sund.site/posts/2022/3_ways_to_access_host_system_in_container/</guid><description><![CDATA[<p>When we are using Docker, we always access the host system by mounting the host folders as a volume. But sometimes we can not do that due to deployment reasons or security limits.</p>
<p>There are three workaround ways to access the host system.</p>
<h2 id="1-mount-dockersocks-into-container">1. Mount <code>docker.socks</code> into container</h2>
<p><code>docker.socks</code> is a Unix socket that Docker Engine API listens on. You can mount <code>/var/run/docker.socks</code> file to your container and call Docker Engine API through this socket.</p>
<p>For instance, If I want to get docker information by calling that API:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">curl -s --unix-socket /var/run/docker.sock http://localhost/info
</code></pre></td></tr></table>
</div>
</div><p>You can refer to <a href="https://docs.docker.com/engine/api/v1.41/" target="_blank" rel="noopener noreffer ">Docker Engine API</a> to find more useful details.</p>
<h2 id="2-using-pid-mode-host">2. Using PID mode <code>host</code></h2>
<p>By default, Docker uses the Linux PID namespace to isolate containers' filesystem view. It means if two processes have the same PID, they will share the filesystem permission.</p>
<p>Docker has a startup parameter <code>--pid=host</code> to change the PID namespace to its host process&rsquo;s namespace. You can use this parameter to make your docker container have the same privilege as the host process.</p>
<blockquote>
<p>When using <code>--pid=host</code>, you can list host system&rsquo;s processes by <code>ps -ef</code>.</p>
</blockquote>
<h2 id="3-by-docker---privileged">3. By <code>docker --privileged</code></h2>
<p>It is the last way you can access the host system, but it is not recommended for most cases.</p>
]]></description></item><item><title>品味和效率</title><link>https://sund.site/posts/2022/2022-08-04/</link><pubDate>Thu, 04 Aug 2022 07:59:00 +0800</pubDate><author>Steve Sun</author><guid>https://sund.site/posts/2022/2022-08-04/</guid><description><![CDATA[<p>早起又随性写点东西。</p>
<p>最近朋友圈被转载很多的一篇文章，来自 GQ 实验室对重轻老师的采访。里面有一段关于品味的叙述：</p>
<blockquote>
<p>……审美的底层逻辑是能感受到那些细微差别。这本身是非常非常幸福的，是一个“自我奖励”的事；另一方面它只能通过大量的自我训练来实现，没法让别人嚼好了喂给你，就是得自己重复喝很多咖啡、听很多唱片、看很多电影，然后试图去分辨。这个过程不会很舒服，甚至挺累的，是一个苦活，一种「爱的苦工」。</p>
<p>我相信审美、品味是值得向往的：“有品位”作为自我装点的标签没啥意义，是我们花费很多时间、经历大量摸索、甚至是克服了很多困难的那个过程，它很值得向往。</p>
</blockquote>
<p>品味是需要心甘情愿付出劳动的。陈丹青有一次接受采访时说：</p>
<blockquote>
<p>年轻人装逼没什么不好的，我年轻时候就喜欢装逼……只是现在装成了。（笑）</p>
</blockquote>
<p>「装成了」是结果，自我愉悦是过程，付出辛苦是前提。缺少任一条件，都是字面上的装逼。</p>
<p>延申地说，可能不仅是欣赏文化作品，每一件跟赚钱无关的事，都能达成「装成了」的境界。当你不把追求效率放在第一位时，「付出劳动」就和「自我愉悦」挂钩了。</p>
<p>另一件生活里的小事是，我发现那些工作很忙碌的人，往往是不追求效率的。真正追求工作效率的人，是为了解放时间留给业余生活，但是很多人只是沉迷工作本身，他们热爱这件事，能从中获得愉悦（或者满足感）。</p>
<p>「追求效率」不是为了享受，其实是为了更好的逃离某种状态。比如你刷了一小时抖音，这就是追求效率，而不是享受，你是想逃离工作状态，想逃离手机以外的烦心事。你如果真想享受生活，躺在沙发上刷短视频满足不了你。</p>
<p>有时候折腾效率软件也跟喝咖啡一样，效率（提神）只是这件事的副作用，它个寻找快乐的过程。真追求效率的人不在乎软件是什么，黑猫白猫抓住耗子就是好猫，这才是效率。</p>
<p>最后奉上一张 Twitter 上的梗图。</p>
<p></p>
]]></description></item><item><title>Notion As A Dashboard</title><link>https://sund.site/posts/2022/using_notion_as_a_dashboard/</link><pubDate>Sun, 31 Jul 2022 21:01:56 +0800</pubDate><author>Steve Sun</author><guid>https://sund.site/posts/2022/using_notion_as_a_dashboard/</guid><description><![CDATA[<p>I have built a Chrome extension <a href="https://chrome.google.com/webstore/detail/%E6%97%A0%E7%94%A8%E4%B8%BB%E6%84%8F%E6%A0%87%E7%AD%BE%E9%A1%B5/lieiofhdejclfpflofeooilpeaphlcgd?hl=zh-CN" target="_blank" rel="noopener noreffer ">无用主意</a> during the last month. The backend service implemented by Flask is using Notion as a dashboard.</p>
<p></p>
<h2 id="notion-api">Notion API</h2>
<p>If you want your service to connect to Notion, you have to create a Notion integration on <a href="https://www.notion.so/my-integrations" target="_blank" rel="noopener noreffer ">this page</a>. Afterward, you have to share a specific Notion page to the integration you just created.</p>
<p></p>
<p>Now, you can call <a href="https://developers.notion.com/reference/intro" target="_blank" rel="noopener noreffer ">Notion API</a> to visit your page.</p>
<p>Once the service has permission to write and read data to Notion, we can sync data between them.</p>
<p>I&rsquo;m using a <code>status</code> column to let me know which row has been updated into the service&rsquo;s SQLite database.</p>
<p></p>
<p>And also, I can update this row&rsquo;s content, then mark <code>status</code> as &ldquo;To Update&rdquo; to tell Flask service to sync this line later. At every night, Flask service sync data from Notion page to SQLite and marks <code>status</code> as &ldquo;Done&rdquo;.</p>
<p>In this way, I am making Notion as my backend service dashboard.</p>
]]></description></item><item><title>Building A File Parser</title><link>https://sund.site/posts/2022/2022-5-8_lexer_design/</link><pubDate>Sun, 08 May 2022 14:00:00 +0800</pubDate><author>Steve Sun</author><guid>https://sund.site/posts/2022/2022-5-8_lexer_design/</guid><description><![CDATA[<p>Last week, after reading this article - <a href="https://www.aaronraff.dev/blog/how-to-write-a-lexer-in-go" target="_blank" rel="noopener noreffer ">How to Write a Lexer in Go</a>, I found that it is not so difficult to design a configuration file parser by this article&rsquo;s mind-set. Then I tried to write a fluent-bit configuration parser, finally got this <a href="https://github.com/stevedsun/go-fluentbit-conf-parser" target="_blank" rel="noopener noreffer ">Fluent-Bit configuration parser for Golang</a>.</p>
<p>In this article, I want to introduce how to parse Fluent-bit configuration <code>.conf</code> file, and the thinking behind it.</p>
<h2 id="fluent-bit-configuration-format-and-schema">Fluent-bit configuration format and schema</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">[FIRST_SECTION]
    Key1  some value
    Key2  another value

[SECOND_SECTION]
    KeyN  3.14
</code></pre></td></tr></table>
</div>
</div><p>Here is a classic mode configuration of Fluent-bit, it includes two parts:</p>
<ul>
<li>Section</li>
<li>Key/value pair</li>
</ul>
<p>First of all, we need to define a struct which represents the Fluent-bit configuration file.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">type</span> <span class="nx">FluentBitConf</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">Sections</span> <span class="p">[]</span><span class="nx">Section</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">Section</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">Name</span>    <span class="kt">string</span>
	<span class="nx">Entries</span> <span class="p">[]</span><span class="nx">Entry</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">Entry</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">Key</span>   <span class="kt">string</span>
	<span class="nx">Value</span> <span class="kd">interface</span><span class="p">{}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Once we have a struct, the next step is to parse tokens from the file and save their values into golang struct. We can copy the logic of the lexer to develop our fluentbit parser.</p>
<p>In a lexer program, the target characters which we want to parse out are called &ldquo;Token&rdquo;, Token is also the keyword that our parser program is searching for. A parser program will read characters in a file one by one, whenever it found a token, the parser saves the value between tokens into the final structure and go ahead.</p>
<h2 id="parse-a-single-token">Parse a single token</h2>
<p>If we want to parse Section, we have to make the parser read characters one by one and stop at <code>[</code> character, which means the beginning of a Section. The parser must save the current state as <code>t_section</code> and keep parser reading until <code>]</code> character, the word between <code>[</code> and <code>]</code> is the Section value we need to persist into go struct.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go">
<span class="c1">// define some tag to tell parser state
</span><span class="c1"></span><span class="kd">const</span> <span class="p">(</span>
	<span class="nx">t_section</span> <span class="p">=</span> <span class="kc">iota</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">parser</span> <span class="o">*</span><span class="nx">FluentBitConfParser</span><span class="p">)</span> <span class="nf">Parse</span><span class="p">()</span> <span class="o">*</span><span class="nx">FluentBitConf</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">currSection</span> <span class="o">*</span><span class="nx">Section</span> <span class="p">=</span> <span class="kc">nil</span>

	<span class="k">for</span> <span class="p">{</span>
        <span class="c1">// read charector one by one
</span><span class="c1"></span>		<span class="nx">r</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">parser</span><span class="p">.</span><span class="nx">reader</span><span class="p">.</span><span class="nf">ReadRune</span><span class="p">()</span>
		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
            <span class="c1">// stop at the end of file
</span><span class="c1"></span>			<span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span> <span class="p">{</span>
				<span class="k">if</span> <span class="nx">currSection</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
					<span class="nx">parser</span><span class="p">.</span><span class="nx">Conf</span><span class="p">.</span><span class="nx">Sections</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">parser</span><span class="p">.</span><span class="nx">Conf</span><span class="p">.</span><span class="nx">Sections</span><span class="p">,</span> <span class="o">*</span><span class="nx">currSection</span><span class="p">)</span>
				<span class="p">}</span>
				<span class="k">return</span> <span class="nx">parser</span><span class="p">.</span><span class="nx">Conf</span>
			<span class="p">}</span>
			<span class="k">return</span> <span class="nx">parser</span><span class="p">.</span><span class="nx">Conf</span>
		<span class="p">}</span>
		<span class="k">switch</span> <span class="nx">r</span> <span class="p">{</span>
		<span class="k">case</span> <span class="sc">&#39;\n&#39;</span><span class="p">:</span>
			<span class="k">continue</span>
		<span class="k">case</span> <span class="sc">&#39;[&#39;</span><span class="p">:</span>
			<span class="c1">// save last config item
</span><span class="c1"></span>			<span class="k">if</span> <span class="nx">currSection</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
				<span class="nx">parser</span><span class="p">.</span><span class="nx">Conf</span><span class="p">.</span><span class="nx">Sections</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">parser</span><span class="p">.</span><span class="nx">Conf</span><span class="p">.</span><span class="nx">Sections</span><span class="p">,</span> <span class="o">*</span><span class="nx">currSection</span><span class="p">)</span>
			<span class="p">}</span>
			<span class="c1">// create new config item
</span><span class="c1"></span>			<span class="nx">currSection</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">Section</span><span class="p">{</span>
				<span class="nx">Name</span><span class="p">:</span>    <span class="s">&#34;&#34;</span><span class="p">,</span>
				<span class="nx">Entries</span><span class="p">:</span> <span class="p">[]</span><span class="nx">Entry</span><span class="p">{},</span>
			<span class="p">}</span>
			<span class="nx">parser</span><span class="p">.</span><span class="nx">token</span> <span class="p">=</span> <span class="nx">t_section</span>
		<span class="k">default</span><span class="p">:</span>
			<span class="k">if</span> <span class="nx">unicode</span><span class="p">.</span><span class="nf">IsSpace</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span> <span class="p">{</span>
				<span class="k">continue</span>
			<span class="p">}</span>

            <span class="c1">// here is important function, read the charectors after token-chareactor and save them into struct
</span><span class="c1"></span>			<span class="nx">strValue</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">parser</span><span class="p">.</span><span class="nf">parseString</span><span class="p">()</span>
			<span class="k">switch</span> <span class="nx">parser</span><span class="p">.</span><span class="nx">token</span> <span class="p">{</span>
			<span class="k">case</span> <span class="nx">t_section</span><span class="p">:</span>
				<span class="nx">currSection</span><span class="p">.</span><span class="nx">Name</span> <span class="p">=</span> <span class="nx">strValue</span>
				<span class="nx">parser</span><span class="p">.</span><span class="nx">token</span> <span class="p">=</span> <span class="nx">t_entry_key</span>
		<span class="p">}</span>

	<span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>In function <code>parser.parseString()</code>, we have to read until the end of a value (for section, it&rsquo;s <code>]</code>), then return the value.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="p">(</span><span class="nx">parser</span> <span class="o">*</span><span class="nx">FluentBitConfParser</span><span class="p">)</span> <span class="nf">parseString</span><span class="p">()</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">val</span> <span class="kt">string</span> <span class="p">=</span> <span class="s">&#34;&#34;</span>

	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">parser</span><span class="p">.</span><span class="nx">reader</span><span class="p">.</span><span class="nf">UnreadRune</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="nx">err</span>
	<span class="p">}</span>
	<span class="k">for</span> <span class="p">{</span>
		<span class="nx">r</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">parser</span><span class="p">.</span><span class="nx">reader</span><span class="p">.</span><span class="nf">ReadRune</span><span class="p">()</span>
		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
			<span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span> <span class="p">{</span>
				<span class="k">return</span> <span class="nx">val</span><span class="p">,</span> <span class="kc">nil</span>
			<span class="p">}</span>
			<span class="k">return</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="nx">err</span>
		<span class="p">}</span>

		<span class="k">if</span> <span class="nx">parser</span><span class="p">.</span><span class="nx">token</span> <span class="o">==</span> <span class="nx">t_section</span> <span class="o">&amp;&amp;</span> <span class="nx">r</span> <span class="o">==</span> <span class="sc">&#39;]&#39;</span> <span class="p">{</span>
			<span class="k">return</span> <span class="nx">val</span><span class="p">,</span> <span class="kc">nil</span>
		<span class="p">}</span>

		<span class="nx">val</span> <span class="p">=</span> <span class="nx">val</span> <span class="o">+</span> <span class="nb">string</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>That&rsquo;s all logic for parsing a section. To parse key/value pair is the same process, just note to make parser know which state it is and save values between whitespace or <code>\n</code>, you can see the code at <a href="https://github.com/stevedsun/go-fluentbit-conf-parser/blob/master/parser.go" target="_blank" rel="noopener noreffer ">the github repo</a>.</p>
<h2 id="conclusion">Conclusion</h2>
<p>To parse a configuration file, we have to</p>
<ul>
<li>Defining token (key characters)</li>
<li>Reading characters and looking for a token</li>
<li>Saving current state to tell parser which struct the following characters belong</li>
</ul>
]]></description></item><item><title>分布式缓存系统的设计</title><link>https://sund.site/posts/2021/distributed-cache/</link><pubDate>Thu, 18 Mar 2021 15:32:57 +0800</pubDate><author>Steve Sun</author><guid>https://sund.site/posts/2021/distributed-cache/</guid><description><![CDATA[<p>很久不写技术文章了。这是一篇关于 Redis 构建分布式缓存系统的总结，结合之前项目上的使用场景，做一个系统性的梳理。</p>
<p>下面就以我做过的商品预约平台项目作为引子，引出分布式缓存设计的一些要点。</p>
<p>该商品预约平台的背景如下：</p>
<ul>
<li>该系统由多个微服务组成</li>
<li>预约的过程：用户可以选择指定门店，指定日期到店提领商品，如果对应门店和日期没有库存，则不能预约</li>
<li>因为“预约”的是未来时刻的库存，所以门店的未来某个时间剩余库存是通过一系列公式计算得出的。这个公式比较复杂，考虑到了用户指定的日期是否在配货周期内等因素，这里省略掉细节</li>
<li>每年节日高峰时期，用户会集中预约商品，导致服务压力骤增。又因为未来日期的库存需要动态计算的特点（比如 A 预约了 1 月 1 日的最后一件商品，B 就会无法在该日预约），不同用户的预约操作会互相影响，严重时导致数据库死锁、数据不一致等问题</li>
</ul>
<p>基于以上背景，这个预约系统的设计必须将性能作为主要优化目标，而缓存作为性能优化的不二选择，就承担了重要职责。</p>
<h2 id="识别热点数据">识别热点数据</h2>
<p>并不是所有数据都有必要被缓存，往往缓存的数据具有以下几个特点：</p>
<ul>
<li>读写比很高。如果写操作比读操作还多，缓存系统频繁更新会大大降低可用性</li>
<li>是热点数据。因为内存的价格昂贵，所以按照 2-8 原则，20%热点数据才值得被缓存</li>
<li>能够容忍短时间的不一致</li>
</ul>
<p>结合项目需要，排除掉一些不适合缓存的数据：</p>
<ul>
<li>对于那些只读的、配置相关的数据，只需要做进程缓存（使用 Guava Cache），在服务启动时加载数据到内存就可以了</li>
<li>尽量用 CDN 和 Nginx 静态缓存来解决大部分不常更新的资源</li>
</ul>
<p>对于该预约项目，用户最频繁查询的数据是不同门店在不同日期下的库存数量。这类数据是缓存设计的重点照顾对象：</p>
<ul>
<li>用户选择了指定城市、指定门店后，系统会返回最近 30 天的库存信息，用户只可能修改其中一条信息。所以读写比很高</li>
<li>库存信息是预约订单流程的必备步骤，而且是跨服务调用（预约服务 -&gt; 库存服务）的数据，所以涉及到大量网络请求、数据库查询。</li>
</ul>
<h2 id="指定性能优化的指标">指定性能优化的指标</h2>
<p>在即将完成业务系统开发时，我们就根据 <a href="https://sre.google/books/" target="_blank" rel="noopener noreffer ">Google SRE Books</a> 提到的四个黄金指标，制定了监控系统性能的四个维度：</p>
<ul>
<li>请求率</li>
<li>错误数，非 200 返回结果数量</li>
<li>响应时间</li>
<li>资源利用率（CPU、内存）</li>
</ul>
<p>我们使用 Prometheus + Grafana 的组合实现监控可视化，这样每次测试人员进行压力测试时，都可以通过这些指标对系统进行调整。缓存影响最大的指标是<strong>请求率</strong>（一般用 TPS 或者 QPS）和<strong>响应时间</strong>。所以在设计缓存系统时，要不断参照这两个指标进行优化。</p>
<h2 id="缓存的设计的实践">缓存的设计的实践</h2>
<h3 id="分级缓存">分级缓存</h3>
<p>为了不让某一接口或者微服务的缓存失效导致其他接口或服务的并发量暴增，就要针对不同来源（数据库的表、接口等）的数据做分级缓存。比如用户在一次查询中涉及到“附近可预约门店”的查询、“活动期间不同日期剩余库存”的查询、“已预约数量“的查询，这三种查询逐层依赖后边的查询结果。</p>
<p>假设如果只针对库存数量做缓存，一旦这部分缓存失效，那么“附近可预约门店”的查询就会直接访问数据库查询全部门店的剩余库存来确定哪个门店可以预约。这样就导致查询库存的接口并发量骤增。所以<strong>分级缓存一定程度上缓解了缓存雪崩的问题</strong>。</p>
<h3 id="自动化测试-api-参数合法性">自动化测试 API 参数合法性</h3>
<p>我们的 QA 通常会写自动化脚本对后端 API 做定期的扫描，检查哪些接口的数据输入、输出有不合法的类型或是数值范围。除了巩固系统的健壮性，还能帮助缓存系统抵御<strong>缓存穿透</strong>的风险。</p>
<h3 id="缓存和数据库双写问题">缓存和数据库双写问题</h3>
<p>这是一个“先淘汰缓存&quot;还是”先写数据库“的问题。通常没有明确的最佳方法。我们采用 <a href="https://dzone.com/articles/cache-aside-pattern" target="_blank" rel="noopener noreffer "><strong>Cache-Aside Pattern</strong></a> 的方式：</p>
<blockquote>
<ul>
<li><strong>失效</strong>：应用程序先从 cache 取数据，没有得到，则从数据库中取数据，成功后，放到缓存中。</li>
<li><strong>命中</strong>：应用程序从 cache 中取数据，取到后返回。</li>
<li><strong>更新</strong>：先把数据存到数据库中，成功后，再让缓存失效。</li>
</ul>
<p><strong>缺点：可能有小概率脏数据</strong>。比如，一个是读操作，但是没有命中缓存，然后就到数据库中取数据，此时来了一个写操作，写完数据库后，让缓存失效，然后，之前的那个读操作再把老的数据放进去，所以，会造成脏数据。</p>
</blockquote>
<p>考虑到写操作通常比读操作时间更长，所以 Cache-Aside Pattern 中的脏数据概率非常小，即便发生，用户在实际下单时系统仍然会去数据库里做数据校验，不会影响业务数据的正确性。</p>
<p>如果对缓存一致性有更高要求，可以采用<a href="https://juejin.cn/post/6844903805641818120" target="_blank" rel="noopener noreffer ">延时双删策略或异步更新缓存</a>。不过这两种方式本质都是用一定程度的串行化操作来解决并发造成的问题。</p>
<h3 id="预热">预热</h3>
<p>预加载热点数据时需要注意的点是，要考虑好服务一旦重启或是生产环境发生事故，要避免服务重启后再次造成二次事故。</p>
<h2 id="缓存系统常见的问题和应对思路">缓存系统常见的问题和应对思路</h2>
<p>首先要保证应用服务能做好熔断、限流、降级的措施。然后再针对不同情况做应对处理。</p>
<h3 id="缓存雪崩">缓存雪崩</h3>
<p>原因：热点缓存数据批量过期，导致大量缓存失效。</p>
<p>解决思路：</p>
<ul>
<li>错开过期时间、随机过期时间</li>
<li>构建多级缓存</li>
<li>避免热点数据频繁淘汰（如修改 Redis 淘汰策略为 LRU）</li>
<li>必要时限流、降级</li>
</ul>
<h3 id="缓存击穿">缓存击穿</h3>
<p>原因：热点 Key 突然过期。</p>
<p>解决思路：</p>
<ul>
<li>设计系统时针对性预防措施，比如热点 Key 的更新策略不依据时间，而是程序控制</li>
<li>配合监控和后台调整，保证高峰时段热点 key 可用</li>
<li>必要时限流、降级</li>
</ul>
<h3 id="缓存穿透">缓存穿透</h3>
<p>原因：黑客通过访问缓存中不存在的数据，将大量请求直达数据库。</p>
<p>解决思路：</p>
<ul>
<li>监控报警</li>
<li>在服务层做好熔断</li>
</ul>
<h2 id="小结">小结</h2>
<p>在设计缓存系统时优先排除掉大部分不需要缓存或者通过进程本地缓存的数据。搭建合理的监控手段，自动化测试框架，再结合预热、缓存淘汰策略、双写策略等最佳实践方法，不断优化缓存性能。</p>
<p>尤其要注意缓存的集中常见问题：雪崩、击穿和穿透。做好应用服务的熔断、降级、限流措施，保证在事故发生时针对每种情况都有预案。</p>
]]></description></item></channel></rss>