<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on The Context Works</title><link>https://sund.site/posts/</link><description>Recent content in Posts on The Context Works</description><generator>Hugo</generator><language>en</language><copyright>Copyright © 2024, Steve Sun; all rights reserved.</copyright><lastBuildDate>Thu, 21 Nov 2024 11:26:22 +0800</lastBuildDate><atom:link href="https://sund.site/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Go 语言的依赖倒置</title><link>https://sund.site/posts/2024/go-dependency-inject/</link><pubDate>Thu, 21 Nov 2024 11:26:22 +0800</pubDate><guid>https://sund.site/posts/2024/go-dependency-inject/</guid><description>&lt;blockquote>
&lt;p>这篇文章比较基础，是我在给 Java 程序员做 go 语言培训时用到的。&lt;/p>
&lt;/blockquote>
&lt;h2 id="为什么要做依赖倒置dip">为什么要做依赖倒置（DIP）？&lt;/h2>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Dependency_inversion_principle">依赖倒置&lt;/a>，或叫依赖反转、DIP，是软件开发非常重要的设计原则。很多程序员没有了解过相关知识，或者只从 Java Spring 知道大致思想。我今天想用一篇简短的文章，用 Go 语言做一个简单的例子，讲解一下怎么最简单地实现依赖倒置。&lt;/p>
&lt;p>如果你还不知道它是什么，可以参考 wiki 中的描述，或者阅读&lt;a href="https://martinfowler.com/articles/dipInTheWild.html">马丁福勒关于 DIP 的文章&lt;/a>。&lt;/p>
&lt;p>依赖倒置原则要解决一个软件开发中常见的风险：依赖。&lt;/p>
&lt;p>尝试回忆一下：&lt;/p>
&lt;ol>
&lt;li>当你尝试通过 Mock 方式屏蔽底层细节做测试时，你发现你要测试的类引用了大量框架提供的接口，导致你需要 mock 大量底层的实现。&lt;/li>
&lt;li>当你尝试修改一个旧的底层类，但是依赖该类的上层服务类太多，你一边担心造成副作用，一边在所有依赖的位置重构上层代码。&lt;/li>
&lt;/ol>
&lt;p>我们分析一下这两个场景：&lt;/p>
&lt;p>场景 1 里，应用类依赖于框架提供的实现，导致应用类很难从框架上剥离出来，业内处理这种问题的方法叫&lt;strong>控制反转&lt;/strong>（IoC, Inversion of Control）。即应用类不应该依赖框架，而是框架提供插槽一样，把应用类注册给框架，由框架统一调度应用，执行对应的方法。&lt;/p>
&lt;p>场景 2 里，服务类依赖底层类，导致底层修改难度越来越大。解决办法是&lt;strong>依赖注入&lt;/strong>（DI, Dependency Injection）。即上层类不直接引用底层类，而是在使用的地方把上层类依赖的底层类注入进来。&lt;/p>
&lt;p>把这两个场景结合起来，就是依赖倒置原则的核心：&lt;/p>
&lt;ul>
&lt;li>高层次的模块不应该依赖于低层次的模块，两者都应该依赖于抽象接口。&lt;/li>
&lt;li>抽象接口不应该依赖于具体实现。而具体实现则应该依赖于抽象接口。&lt;/li>
&lt;/ul>
&lt;p>这两个原则保证了代码中模块的高内聚、低耦合，同时给 Mock、迭代更新模块创造了条件。&lt;/p>
&lt;h2 id="用-go-语言实现它">用 Go 语言实现它&lt;/h2>
&lt;p>假设现在要从一个用户的服务中查询用户的信息。有两个接口，UserRepository 作为数据层负责查询数据库， UserService 负责业务逻辑，它依赖 UserRepository。同时为了方便测试，我们还要写一个 Mock 的数据层实现。 整个结构如下图。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/go-dependency-inject/example.png" alt="Go example">&lt;/p>
&lt;p>接下来非常轻松地，我们实现两个接口，并写了他们的实现类。同时我们还在 UserService 的实现类里写了一个 NewUserService，来把它依赖的 UserRepository 实现注入进来。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 在 user_repository.go 中实现具体的接口
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">UserRepository&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">GetByID&lt;/span>(&lt;span style="color:#a6e22e">id&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">User&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Save&lt;/span>(&lt;span style="color:#a6e22e">user&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">User&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// ... 具体实现 UserRepository，略
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// user_service.go 中实现
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">UserService&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">GetUser&lt;/span>(&lt;span style="color:#a6e22e">id&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">User&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">CreateUser&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">age&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// ... 具体实现 UserService，略
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">NewUserService&lt;/span>(&lt;span style="color:#a6e22e">repo&lt;/span> &lt;span style="color:#a6e22e">UserRepository&lt;/span>) &lt;span style="color:#a6e22e">UserService&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">UserServiceImpl&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">repo&lt;/span>: &lt;span style="color:#a6e22e">repo&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>那么问题来了，可不可以直接在 &lt;code>user_service.go&lt;/code> 中直接把 repository 引用进来呢？显然不行，因为这样，两个模块就形成了依赖关系。&lt;/p></description></item><item><title>监控系统项目复盘</title><link>https://sund.site/posts/2024/metrics-project-retro/</link><pubDate>Thu, 24 Oct 2024 15:52:22 +0800</pubDate><guid>https://sund.site/posts/2024/metrics-project-retro/</guid><description>&lt;p>这篇文章对我过去 3 年的一大块工作内容进行复盘。我作为项目组的架构师，在下文中也对项目早期遗留的一些问题进行反思，并分享我个人的解决思路。&lt;/p>
&lt;h2 id="项目核心依赖开源组件定制化过度">项目核心依赖开源组件，定制化过度&lt;/h2>
&lt;p>我们的项目是一个运行在边缘设备上的日志、软硬件性能指标的采集/监控系统。考虑到边缘计算设备（IPC）的性能，选择开源组件时就侧重于轻量化、支持丰富的输出标准。早期部门架构师采用了 Fluent-Bit 作为项目的核心组件。Fluent-Bit 是 C 编写的开源、轻量、可轻度扩展的数据收集器。它最开始用作日志收集，后来逐渐发展成全功能的 Agent。对比流行的&lt;a href="https://github.com/open-telemetry">OpenTelemetry&lt;/a>，Fluent-Bit 更开箱即用、更轻量，但是不易于修改和扩展。&lt;/p>
&lt;p>最开始整个团队都没接触过监控系统，所以在设计系统时挖了不少坑。首先，用户在 UI 上操作过度繁琐，需要依次配置输出的目标（地址、端口、协议、格式、加密方式等等）、采集的指标类型，最后还要手动点击 Apply （应用）一下。&lt;/p>
&lt;p>经过几轮迭代，适当简化了操作逻辑。但是像大部分工业 PC 上运行的程序一样，用户在初始化配置过后，通常不会主动去 UI 上修改配置。终端用户更关心占用系统资源多少、稳定性如何。所以最开始团队把这个项目做成了一个重交互的 C 端产品，这是个教训。&lt;/p>
&lt;p>第二，后端开发为了满足 UI 设计的流程（比如，用户可以创建多份不同的配置项到不同的目标地址），做了复杂的 Work-around。因为 Fluent-Bit 是单进程事件驱动模型，只有单一配置文件，每次修改配置文件都要重启 Fluent-bit 进程。这就造成了 UI 上用户添加一个配置项，后台就要重新生成整个配置文件并重启 Fluent-Bit。这对于一个稳定运行的监控系统来说，无疑增加了&lt;strong>重启过程中数据丢失&lt;/strong>的风险。另外，如果&lt;strong>新增的配置项出错，就会让整个生成的配置文件报错，导致 Fluent-Bit 进程假死&lt;/strong>等问题。&lt;/p>
&lt;p>为了解决这些问题，后端工程师又对 Fluent-Bit 的各项参数玩出各种花活儿。比如利用不同 tag 来分流不同用户配置项，为每个配置项单独配置参数和过滤规则。再比如设定缓存数据包大小和缓存 timeout 时间为 0，这样 Fluent-Bit 重启之后会首先尝试重发缓存在文件系统里的数据，这样间接防止用户数据丢失。&lt;/p>
&lt;p>这些花活儿不但提高了维护难度，从用户角度看，也并没有带来任何真正的价值提升。&lt;/p>
&lt;p>回顾来看，&lt;strong>如果早期的 UI 设计改成单独的配置页面，不但简化的操作流程，还给业务代码降低的复杂度。&lt;/strong>&lt;/p>
&lt;p>第三，核心项目依赖 Fluent-Bit 造成项目迁移到其他开源组件非常困难。加上 Fluent-Bit 更新频率高，公司对安全性合规要求使得我们团队每隔一段时间要对 Fluent-Bit 进行升级，同时对所有配置选项做回归测试。加上 Fluent-Bit 订制性很差，它虽然支持使用 Go 语言实现 Output 插件，但是只能用 C 语言编写 Input 插件。导致我们采集内部应用的数据，不得不用到它的 TCP 和 HTTP 插件来中转。部署多个 Agent 采集不同的内部服务。这让后期集成测试更添难度。&lt;/p></description></item><item><title>磨合</title><link>https://sund.site/posts/2024/symbiosis/</link><pubDate>Mon, 16 Sep 2024 23:31:14 +0800</pubDate><guid>https://sund.site/posts/2024/symbiosis/</guid><description>&lt;p>前几天买了一辆公路车，车店老板说，新买的自行车要骑一段时间，需要慢慢磨合。&lt;/p>
&lt;p>我不知道老板说的「磨合」，是人适应车，还是车适应人。也可能两者都有。&lt;/p>
&lt;p>这让我联想起书里这段话：&lt;/p>
&lt;blockquote>
&lt;p>我一直都是从一个十分理性的角度来谈论一切有关机械的事物，因为机械是零部件、是各种关系、是分析、是组合、是明了事物的原委，但它并不真的在此处。它总是在别处，我们都以为别处即此处，但是实际上它却远在千里之外，这就是机械的本质。
── 禅与摩托车维修艺术&lt;/p>
&lt;/blockquote>
&lt;p>当一个车手骑上一辆陌生的车，自行车机械结构也在慢慢适应车手：螺丝的松紧、齿轮的咬合程度、转轴的润滑程度……这些自行车上的无数个「参数」和骑车的人一起被重塑。你骑车越久，车对你的拟合程度就越高。而人身上的骨骼、肌肉也在慢慢适应车。&lt;/p>
&lt;p>这大概就是所谓的磨合。&lt;/p>
&lt;p>&lt;a href="https://world.hey.com/dhh/why-don-t-more-people-use-linux-33b75f53">DHH&lt;/a>前几个月搞了一个项目，他用 Linux 系统篡了一个开箱即用的开源工具：用一行命令把电脑变成充满快捷键、工作效率拉满的编程环境。也有国外程序员批评他，说他把自己那套习惯搞成了开源项目让大家学。可 DHH 把这种设计哲学称为「Omakase」（お任せ），意为「交给您了」，是日本餐厅点菜时，食客完全交给厨师作决定的一种文化。我管它叫专家级预制菜。&lt;/p>
&lt;p>从零开始调校，对大部分人来说门槛太高。那循着专家的指引，再磨合出一套自己的东西，也未尝不可。&lt;/p>
&lt;p>DHH 不止是知名开源框架 Ruby on Rails 的作者，也是个作家、赛车手。也许身为多重身份的天才，他对工具和环境有一种控制欲，或者说，与其共生的欲望。&lt;/p>
&lt;p>与某物共生，前提是它必须足够复杂。需要你认真去理解，去体会。简单就意味着「参数」太少，它无法向你拟合，你只能傻傻地向它拟合，适应它。&lt;/p>
&lt;p>为了让某物达到你预期的状态，你要经过漫长的、名为磨合的旅程。这期间，你看到了和预期中不同的风景，最初预设的目标不那么重要了，无尽的可能性在前方等着你。&lt;/p>
&lt;p>这就是最佳状态，不用纠结于完美，完美是平衡，旅程本身就是目的地。&lt;/p>
&lt;p>朋友们，像车手训练自己耐力那样，不断去和你周遭的一切磨合吧，因为磨合就是人生的全部意义。&lt;/p></description></item><item><title>Windows Efficient Setup</title><link>https://sund.site/posts/2024/windows-efficient-setup/</link><pubDate>Sat, 31 Aug 2024 00:23:37 +0800</pubDate><guid>https://sund.site/posts/2024/windows-efficient-setup/</guid><description>&lt;p>Last month I read DHH&amp;rsquo;s blog post &lt;a href="https://world.hey.com/dhh/introducing-omakub-354db366">Introducing Omakub&lt;/a>. Omakub is a project that helps you to setup your Ubuntu machine by running a single command. DHH composed a list of tools he uses on his Ubuntu.&lt;/p>
&lt;p>In spirit of the post, I decided to setup my Windows machine efficiently like Omakub.&lt;/p>
&lt;p>You can find the full setup script &lt;a href="https://gist.github.com/stevedsun/319f0c05b02e739207743dd441b6239a">here&lt;/a>.&lt;/p>
&lt;p>Following is the keyboard Layout I am using.&lt;/p>
&lt;h2 id="keyboard-layout">Keyboard Layout&lt;/h2>
&lt;p>&lt;strong>Tool&lt;/strong>: AutoHotKey, PowerToys&lt;/p></description></item><item><title>RESTful Web Service Cookbook 笔记</title><link>https://sund.site/posts/2024/restful-api-cookbook/</link><pubDate>Sat, 13 Jul 2024 16:12:34 +0800</pubDate><guid>https://sund.site/posts/2024/restful-api-cookbook/</guid><description>&lt;p>&lt;a href="https://www.oreilly.com/library/view/restful-web-services/9780596809140/">RESTful Web Service Cookbook&lt;/a> 是一本简短、精炼的 RESTful 接口设计指南。这篇文章（笔记）用来记录这本书中提到的重点。&lt;/p>
&lt;blockquote>
&lt;p>因为 RESTful 对后端开发来说实在太熟悉不过，所以我会省略掉那些习以为常的约定，只记录书中提到的、大多数开发者没有注意到的细节。&lt;/p>
&lt;/blockquote>
&lt;h2 id="http-method">HTTP Method&lt;/h2>
&lt;h3 id="get">GET&lt;/h3>
&lt;p>进行&lt;strong>安全&lt;/strong>与&lt;strong>幂等&lt;/strong>的信息获取。&lt;/p>
&lt;h3 id="post">POST&lt;/h3>
&lt;p>执行的目标是一个资源集合（工厂），而不是具体的 URI。&lt;/p>
&lt;p>适用场景：&lt;/p>
&lt;ul>
&lt;li>创建新的资源,把资源作为一个工厂。&lt;/li>
&lt;li>通过一个控制器资源来修改一个或多个资源。&lt;/li>
&lt;li>执行需要大数据输入（参数较多）的查询。&lt;/li>
&lt;li>&lt;strong>在其他 HTTP 方法看上去不合适时，执行不安全或非幂等的操作&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;p>解决方案：&lt;/p>
&lt;ul>
&lt;li>将一个已存在的资源标识为创建新资源的工厂。虽然您可以把任意资源用做工厂,但常见的做法是使用一个集合资源。&lt;/li>
&lt;li>让客户端向工厂资源提交附有需要创建资源的表述的 POST 请求。通过可选支持的 &lt;strong>Slug&lt;/strong> 头, 客户端可以向服务器建议一个名字,作为被创建资源的 URI 的一部分。&lt;/li>
&lt;li>资源创建之后,返回响应码 &lt;strong>201(Created)&lt;/strong>,并在 &lt;strong>Location&lt;/strong> 头中包含新创建资源的 URI。&lt;/li>
&lt;li>如果响应正文包含了新创建资源的完整表述,那么在 &lt;strong>Content-Location&lt;/strong> 头中包含新创建资源的 URI。&lt;/li>
&lt;/ul>
&lt;h3 id="put">PUT&lt;/h3>
&lt;p>仅在客户端可以控制 URI 的构成时,才使用 PUT 方法创建新资源。&lt;strong>（换句话说，PUT 也可以创建资源，但是仅限于客户端可以指定 URI）&lt;/strong>&lt;/p>
&lt;h2 id="确定资源对象的粒度">确定资源对象的粒度&lt;/h2>
&lt;p>应该以适合客户端使用模式的方式来设计资源,而不是基于现有的数据库或对象模型。&lt;/p>
&lt;ul>
&lt;li>可缓存性&lt;/li>
&lt;li>减小修改频率&lt;/li>
&lt;li>可变性——分离可变和不可变数据&lt;/li>
&lt;/ul>
&lt;h3 id="如何设计复合资源">如何设计复合资源?&lt;/h3>
&lt;p>&lt;strong>复合资源&lt;/strong>降低了统一接口的可见性,因为它们的表述中包含了和其他资源相重叠的数据。&lt;/p>
&lt;ul>
&lt;li>如果符合资源使用&lt;strong>频率不高&lt;/strong>，可以考虑用&lt;strong>缓存&lt;/strong>替代。&lt;/li>
&lt;li>考虑网络开销，复合资源会不会降低服务端吞吐量，增大延时。&lt;/li>
&lt;/ul>
&lt;h2 id="http-body">HTTP Body&lt;/h2>
&lt;p>以 JSON 格式的 Body 为例：&lt;/p>
&lt;ol>
&lt;li>最好包含一个指向 self 的链接&lt;/li>
&lt;li>如果分页，最好包含下一页的链接&lt;/li>
&lt;li>如果分页，要指示集合的大小（总数）&lt;/li>
&lt;li>如果查询对象是本地化的，添加一个属性来表示本地化内容的语言&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;John&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;urn:example:user:1234&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;link&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;rel&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;self&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;href&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;http://www.example.org/person/john&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;address&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;urn:example:address:4567&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;link&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;rel&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;self&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;href&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;http://www.example.org/person/john/address&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="http-response">HTTP Response&lt;/h2>
&lt;ol>
&lt;li>对于客户端错误，返回 4xx 状态码 + Date （错误发生的时间）。&lt;/li>
&lt;li>对于服务端错误，返回 5xx 状态码 + Date （错误发生的时间）。&lt;/li>
&lt;li>Body 中要描述错误，如果有外部文档和链接可参考，在 Header 提供一个 Link 头或直接把链接写在 Body 里。&lt;/li>
&lt;li>为了后期追踪或分析，在服务器上记录了错误日志，应该提供一个可以找到该错误的标识符或链接。&lt;/li>
&lt;/ol>
&lt;h2 id="设计查询结构">设计查询结构&lt;/h2>
&lt;h3 id="设计查询请求">设计查询请求&lt;/h3>
&lt;ol>
&lt;li>为了缓存和性能，尽量避免范围查询。解决方法包括：
&lt;ul>
&lt;li>使用预定义查询&lt;/li>
&lt;li>也可以使用 HTTP Header： Range&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>避免使用通用语言（SQL、XPATH）的查询。&lt;/li>
&lt;li>避免 URI 和数据存储方式的紧耦合（前端把后端当作数据库）。&lt;/li>
&lt;li>对于参数较多，可以考虑使用 POST（因为 URI 长度有最大限制）
&lt;ul>
&lt;li>POST 接口的缺点是丧失了缓存能力&lt;/li>
&lt;li>POST 请求是不可缓存的，所以 Cache-Control 和 Expires 头无济于事&lt;/li>
&lt;li>解决缓存问题，可以让 POST 创建一个临时资源，把 link 返回前端，前端下次用 GET 获取该资源&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="设计查询响应结果">设计查询响应结果&lt;/h3>
&lt;ol>
&lt;li>返回集合。添加合理的缓存过期头。&lt;/li>
&lt;li>如果没有结果，应该返回&lt;strong>空集合&lt;/strong>。&lt;/li>
&lt;/ol></description></item><item><title>乐山游记</title><link>https://sund.site/posts/2024/leshan/</link><pubDate>Sun, 23 Jun 2024 18:50:51 +0800</pubDate><guid>https://sund.site/posts/2024/leshan/</guid><description>&lt;p>&lt;img src="https://sund.site/images/leshan/1.jpg" alt="">&lt;/p>
&lt;p>最近工作节奏放缓，业余时间也多了。我决定去乐山看看。久闻小吃之都的美名，但是来成都之后一直在全国出差，对这座高铁只要 50 分钟就能到达的城市，一次面都没见过，实在说不过去。&lt;/p>
&lt;p>作为时间管理小能手，我星期六早上 6 点就从家出发，8 点多到了乐山站。先找个早餐店弄一碗乐山豆腐脑吧，这是我在成都最爱的小吃之一，很期待原产地的风味。很多店铺都还没开门，一直走到了火车站对面的美食街才找到一家。坐下，一碗酥肉豆腐脑，一个牛肉咔饼。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/leshan/2.jpg" alt="">&lt;/p>
&lt;p>乐山豆腐脑和北方豆腐脑不太一样。它的主食是豆花和红薯粉丝。在粘稠的豆花粉丝汤里，加上炸黄豆、花生、牛肉（或者酥肉、鸡丝）、香菜。洒上辣椒油。有时候再放点薄脆。吃到嘴里是滑滑的咸辣汤汁裹着肉和黄豆的酥脆口感。乐山本地的豆腐脑用的豆花似乎和成都小店里有区别，是比嫩豆腐要稍微老一点的豆腐，汤也更入味。&lt;/p>
&lt;p>牛肉咔饼其实就是肉夹馍的四川版。把牛肉剁碎，再用葱姜蒜等调料用粉蒸肉的手法蒸熟，夹在一个软软的面饼里。一大早肉刚出锅，眼看老板夹着带热气的蒸肉放到饼里，香得很！&lt;/p>
&lt;p>吃饱喝足之后，第一个要去的地方是乐山大佛。&lt;/p>
&lt;p>乐山大佛在地图上很容易找到。乐山市面积不大，整个城市位于三江交汇处。乐山大佛就坐在三江口，眼观峨眉山。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/leshan/3.png" alt="">&lt;/p>
&lt;p>从地图上就能看出，大渡河泥沙更多，河水偏黄色。而岷江水是青绿色。在大佛前的交汇点，形成一条非常明显的分界线。&lt;/p>
&lt;p>打车 40 分钟到了景区，门票分两种：坐船和爬山。小小一座凌云山，被当地开辟出山和水两条收费路线，颇有四川小吃的特色，一菜多吃。&lt;/p>
&lt;p>我选择了更轻松的坐船。船从岷江的嘉州渡开船，行至大渡河交汇处，江水已经开始由青泛黄。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/leshan/4.jpg" alt="">&lt;/p>
&lt;p>复行十几分钟，就到了大佛脚下。大佛的左脚先映入眼帘，大佛身边左右护法已经被千年的江风磨平了棱角。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/leshan/5.jpg" alt="">&lt;/p>
&lt;p>乐山大佛项目立项于唐代，经过了三代项目经理才完工。到现代也在不断修缮。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/leshan/6.jpg" alt="">&lt;/p>
&lt;p>大佛周围的山崖有很多方孔，是用来搭建脚手架的。据说大佛外层原本有一座叫“大像阁”的七层建筑罩住大佛本体。但在历史上被毁掉了。在乐山博物馆还能看到很多相关资料。博物馆里还有一些有趣的豆知识：大佛头上的每一个圆圈都是一根长条状的石头，工匠先于大佛头部开凿出一个个插槽，再把这些长条状的“慧根”嵌进去。这可能是最早期的模块化设计。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/leshan/7.jpg" alt="">&lt;/p>
&lt;p>继续前行，绕过大佛，就能看到凌云山的栈道和像蚂蚁穴一样的山路，如果选了登山门票，你就会和其他游客像小蚂蚁一样出现在这里。凌云山其实只是江上的一座小山丘，能在这样一个光滑无附着的地方凿出道路，很佩服古人的毅力。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/leshan/8.jpg" alt="">&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/leshan/9.jpg" alt="">&lt;/p>
&lt;p>船往回开时，站在船尾能看到凌云山的远影形成一尊向右躺平的卧佛形象。这个躺平的形象，就是乐山的精神图腾。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/leshan/10.jpg" alt="">&lt;/p>
&lt;p>离开乐山大佛景区，继续探索乐山的美食吧！坐公交车前往上中顺特色街区。&lt;/p>
&lt;p>上中顺有很多小吃，比如叶婆婆钵钵鸡，但是因为排队人太多，一个人吃钵钵鸡又浪费了一大锅锅底，所以我这次就放弃了。直奔海汇源纸皮烧麦。&lt;/p>
&lt;p>海汇源的烧麦有鲜肉、牛肉、羊肉三种馅，还可以加钱把烧麦做成锅贴。我这次买的就是锅贴烧麦。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/leshan/11.jpg" alt="">&lt;/p>
&lt;p>乐山纸皮烧麦跟成都的烧麦、北方的烧麦都不一样。成都烧麦的馅是肉粒和糯米混合的，味道像广式粽子；北方是牛羊肉馅。乐山烧麦肉馅更像北方，皮非常薄，用油煎一下口感脆香。我过去吃烧麦最不喜欢吃它顶端的褶皱。因为蒸烧麦时那里经常蒸不熟，会有生面渣的口感。但是海汇源的烧麦完全没有这个问题，它把服务态度以外的卖点都做足了（服务态度不好也是四川小吃的特色）。海汇源的烧麦不但皮薄馅大，小料（四川叫蘸水）也很有特色，辣椒油里似乎还能吃出一点点柠檬汁的味道。&lt;/p>
&lt;p>从海汇源出来，我又在街边买了三串糖醋酱裹着的炸豆腐，算是乐山近年和绵绵冰（中式 Gelato）一样流行的街边小吃，不过味道一般，不作推荐。&lt;/p>
&lt;p>从上中顺街区往东南方向走，就能看到大渡河。沿着大渡河有几座渡口，可以眺望对面的凌云山。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/leshan/12.jpg" alt="">&lt;/p>
&lt;p>沿江有很多小亭子，当地老年人会聚到这里打一种叫“贰柒拾”的四川桥牌。这种牌有 1~10 十种数字和红黑两类花色。像打麻将一样可以吃碰胡，本质是个凑牌型算番数的概率计分游戏。&lt;/p>
&lt;p>据说之所以用这种长条形的纸牌，是因为过去物质匮乏，人们用工厂里填物料用的废纸来制作纸牌。这种乐山“贰柒拾”应该是四川长牌的一个变种，四川长牌在湖广地区也曾经流行，很多老年人都会打。但是现如今当地的年轻人也都沉迷王者荣耀了，再过几年只能在非遗博物馆听讲解员讲解玩法。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/leshan/13.jpg" alt="">&lt;/p>
&lt;p>我很欣赏乐山街头这种随处可见的景象：茶馆、打牌的小桌子。根本不需要特别的场地，一棵树周围的三米圈出一个阴凉，就是当地老年人的天然棋牌馆。随着年纪增长，我也越来越享受这种不容易变质的快乐，像下班回家看看体育运动，或者打开斗鱼看魔兽争霸比赛。这些赛事最大的特点是规则几乎不会变化，它们不像王者荣耀，几天不玩就陌生了，不会时不时给你更新个玩法，增加个人物。人不是计算机，更不是所谓“用户”，我不需要经常更新。年纪越大，多巴胺越是依赖那些简单、不变的东西。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/leshan/14.jpg" alt="">&lt;/p>
&lt;p>沿着大渡河：远处是镇坐千年的大佛，脚下三江汇聚，水花在岷江与大渡河之间，像用粉笔划出的分界线。近处是急流中游泳的老人。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/leshan/15.jpg" alt="">&lt;/p>
&lt;p>结束了乐山之行，赶回成都已经困得睁不开眼了，一觉睡到第二天下午两点。发现上午朋友在微信群里发了张图片。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/leshan/16.jpg" alt="">&lt;/p>
&lt;p>从乐山回来我突然领悟了那句话：如果浪费时间能让你感到快乐，那时间就没有浪费。&lt;/p></description></item><item><title>Ricoh GR 2 使用心得</title><link>https://sund.site/posts/2024/ricoh_gr2_sharing/</link><pubDate>Fri, 17 May 2024 23:07:29 +0800</pubDate><guid>https://sund.site/posts/2024/ricoh_gr2_sharing/</guid><description>&lt;p>&lt;img src="https://i.imgur.com/XrMKTCC.png" alt="">&lt;/p>
&lt;p>买 GR2 已经很多年了，几年前写过一篇&lt;a href="https://sund.site/posts/2019/ricoh-gr2-settings/">Ricol GR 2 参数说明&lt;/a>，作为初学者分享了参数的说明。今天这篇分享一下这几年的使用心得。&lt;/p>
&lt;h2 id="机内裁剪">机内裁剪&lt;/h2>
&lt;p>GR2 作为 28mm 相机，对于普通人扫街来说，最大的痛点就是经常抓不到合适的构图。28mm 的优点是取景范围更大，可以捕捉更多环境信息，但是相对地，用它拍摄时经常混入太多杂乱的场景元素。&lt;/p>
&lt;p>但是好在 GR2 支持机内裁剪，可以把 28mm 裁切成 35mm 或 47mm 镜头。这让街拍时的构图更加灵活（当然以牺牲画质为代价）。&lt;/p>
&lt;h2 id="不同光圈的适合场景">不同光圈的适合场景&lt;/h2>
&lt;ul>
&lt;li>F2.8 室内的人物和场景&lt;/li>
&lt;li>F4 静物&lt;/li>
&lt;li>F5.6 均衡&lt;/li>
&lt;li>F8 图像最锐利的光圈设定&lt;/li>
&lt;li>F11 漂亮的星芒效果&lt;/li>
&lt;/ul>
&lt;h2 id="自定义参数">自定义参数&lt;/h2>
&lt;h3 id="fuji-胶片风格">FUJI 胶片风格&lt;/h3>
&lt;ul>
&lt;li>滤镜模式：正片。 饱和度：4、对比度：5、鲜明度：6&lt;/li>
&lt;li>白平衡：复合 AWB&lt;/li>
&lt;li>白平衡补偿：A：3、G：4&lt;/li>
&lt;li>曝光补偿：-1.0 ~ -1.0&lt;/li>
&lt;/ul>
&lt;p>上面这套参数模仿富士相机的胶片效果。对比鲜明度较高，有淡淡的绿色调。&lt;/p>
&lt;h3 id="日常蓝色调">日常蓝色调&lt;/h3>
&lt;ul>
&lt;li>滤镜模式：正片。 饱和度：7、对比度：3、鲜明度：7&lt;/li>
&lt;li>白平衡：复合 AWB&lt;/li>
&lt;li>白平衡补偿：B：7、M：0&lt;/li>
&lt;li>曝光补偿：-1.0 ~ -1.0&lt;/li>
&lt;/ul>
&lt;p>这套参数画面干净，呈现静谧的蓝色。适合拍摄日常冷色调题材的画面。&lt;/p>
&lt;h3 id="自然风小清新">自然风小清新&lt;/h3>
&lt;ul>
&lt;li>滤镜模式：正片。 饱和度：2、对比度：4、鲜明度：3&lt;/li>
&lt;li>白平衡：复合 AWB&lt;/li>
&lt;li>白平衡补偿：B：8、M：0&lt;/li>
&lt;li>曝光补偿：-1.0 ~ -1.0&lt;/li>
&lt;/ul>
&lt;p>适合旅行拍摄低对比度的小清新画面。&lt;/p>
&lt;h3 id="性冷淡">性冷淡&lt;/h3>
&lt;ul>
&lt;li>滤镜模式：轻微。 饱和度：9、对比度：5、鲜明度：9&lt;/li>
&lt;li>白平衡：CT：4200K&lt;/li>
&lt;li>白平衡补偿：B：8、M：2&lt;/li>
&lt;li>曝光补偿：-0.3 ~ -1.0&lt;/li>
&lt;/ul>
&lt;p>这套参数适合拍摄山脉、沙漠、城市人文等低静默、低色调的景物。&lt;/p></description></item><item><title>如何设计一个符合工业标准的审计系统</title><link>https://sund.site/posts/2024/audit-system-design/</link><pubDate>Mon, 15 Apr 2024 16:44:40 +0800</pubDate><guid>https://sund.site/posts/2024/audit-system-design/</guid><description>&lt;p>审计追踪（Audit Trail）是指一个系统中用于记录用户行为日志、控制组件的活动日志等关键安全信息的服务。日志通常以时间顺序排列，记录了“谁在什么时间做了什么”。&lt;/p>
&lt;p>下面是 kubernetes 官方文档对其审计服务的描述：&lt;/p>
&lt;blockquote>
&lt;p>Kubernetes 审计（Auditing） 功能提供了与安全相关的、按时间顺序排列的记录集，记录每个用户、使用 Kubernetes API 的应用以及控制面自身引发的活动。&lt;/p>
&lt;p>审计功能使得集群管理员能够回答以下问题：&lt;/p>
&lt;ul>
&lt;li>发生了什么？&lt;/li>
&lt;li>什么时候发生的？&lt;/li>
&lt;li>谁触发的？&lt;/li>
&lt;li>活动发生在哪个（些）对象上？&lt;/li>
&lt;li>在哪观察到的？&lt;/li>
&lt;li>它从哪触发的？&lt;/li>
&lt;li>活动的后续处理行为是什么？&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="审计系统应该具备哪些能力">审计系统应该具备哪些能力？&lt;/h2>
&lt;ol>
&lt;li>日志内容不可篡改。&lt;/li>
&lt;li>日志链结构完整：不可任意添加或删除单独的日志条目。&lt;/li>
&lt;li>兼容性：发送日志的客户端应该避免侵入式设计。&lt;/li>
&lt;li>系统的加密服务应该尽早初始化，以减少未受保护的日志。&lt;/li>
&lt;li>服务重启/关闭不应导致审核日志不一致。如果服务因紧急情况而关闭，审计日志应该是可验证的。&lt;/li>
&lt;li>密钥安全性：加密密钥（用于计算完整性检查）应存储在专用密钥存储中，并在内存中驻留最短的时间。&lt;/li>
&lt;li>性能：能够在几秒钟内验证受保护日志。&lt;/li>
&lt;li>日志轮换友好性：审核日志应与分布式系统典型的日志轮换策略兼容。&lt;/li>
&lt;li>可观测性：日志易于被解析（machine-readable）、人类可读（human-readable）。兼容主流日志处理程序的格式，维度设计便于日后做过滤筛选。&lt;/li>
&lt;/ol>
&lt;h2 id="涉及的行业标准">涉及的行业标准&lt;/h2>
&lt;p>与审计相关的，常见的工业标准有 IEC62443、NIST SP 800-92。下面是 IEC 中涉及到审计相关的章节。&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>工业标准&lt;/th>
 &lt;th>章节&lt;/th>
 &lt;th>安全级别&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>IEC 62443-4-2:2019&lt;/td>
 &lt;td>CR2.8&lt;/td>
 &lt;td>SL-C 1&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>IEC 62443-4-2:2019&lt;/td>
 &lt;td>CR6.1&lt;/td>
 &lt;td>SL-C 1&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>IEC 62443-4-2:2019&lt;/td>
 &lt;td>CR6.2&lt;/td>
 &lt;td>SL_C 2&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>IEC 62443-4-2:2019&lt;/td>
 &lt;td>CR1.13&lt;/td>
 &lt;td>SL_C 1&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>IEC 62443-4-2:2019&lt;/td>
 &lt;td>CR2.9&lt;/td>
 &lt;td>SL_C 1&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>IEC 62443-4-2:2019&lt;/td>
 &lt;td>CR2.10&lt;/td>
 &lt;td>SL_C 1&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>IEC 62443-4-2:2019&lt;/td>
 &lt;td>CR3.7&lt;/td>
 &lt;td>SL_C 1&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>IEC 62443-4-2:2019&lt;/td>
 &lt;td>CR3.9&lt;/td>
 &lt;td>SL_C 2&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="审计日志的格式应遵循哪些协议或标准">审计日志的格式应遵循哪些协议或标准？&lt;/h2>
&lt;p>对于本地运行的软件，通常 Syslog 具有更好的系统兼容性。对于使用 ELK 采集日志的项目更适合用 CEF，其他情况建议使用自定义的 JSON。&lt;/p></description></item><item><title>2023 年终个人总结</title><link>https://sund.site/posts/2023/2023-year-summary/</link><pubDate>Mon, 25 Dec 2023 13:05:52 +0800</pubDate><guid>https://sund.site/posts/2023/2023-year-summary/</guid><description>&lt;p>又到年底了，现在一年过得像小时候一个月那么快。今年是从疫情走出来的第一年，似乎恢复正常了又似乎没有。不知道哪里出了问题。&lt;/p>
&lt;p>这篇年终总结我将分享一些今年我遇到的问题和困惑。既是整理一些生活经历，也分享一些解决问题的思路。&lt;/p>
&lt;h2 id="相亲婚姻爱是什么">相亲、婚姻、爱是什么&lt;/h2>
&lt;p>今年没少相亲，可以说每一个遇到的人都很真诚。但是很遗憾，没有结果。这件事我最在意所以第一个拿出来聊。&lt;/p>
&lt;p>我们想要的爱是什么样子？我想了很久，也跟很多人聊天：女性朋友、男性朋友、未婚的、已婚的、还有准备离婚的。&lt;/p>
&lt;p>每个人都有自己的答案。大多数人的答案倾向于认可一种观点：爱是某种程度的等价交换。如果我希望别人爱我，我应该首先爱他；如果我付出了爱，我应得到爱。&lt;/p>
&lt;p>我的前同事推荐我读《爱的艺术》（作者艾里希·弗洛姆），这本书颠覆了很多我的固有思维，让我重新审视什么是好的关系，不管对家人、朋友还是陌生人。&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>爱不是等价交换。好的关系是互相给予，是一种积极的行动，并且通过行动让对方也产生爱&lt;/strong>。&lt;/p>
&lt;/blockquote>
&lt;p>在商品社会，爱被视为一种靠“吸引力”不期而遇的幸运，人们把激素催生的满足感视作爱。追求这种爱的过程本质是一种“自恋”——即爱的缘由是为了自己、为了获取。而真正的爱，往往被人们忽视的。爱不是开盲盒，它需要不断学习和实践。或者说，爱是耕耘出来的，学会“给予”需要对抗天性。婚礼誓词“无论贫穷、疾病……我都将不离不弃”之所以令人感动是因为它违背天性，需要努力才能实现。&lt;/p>
&lt;p>爱是个过程，就像养花。相亲的目的，既不是一见钟情，也不是把双方条件置于天平两侧寻找平衡。相亲只是创造一个契机遇到跟我一样有耐心去培育这株花的人。过早或过晚期待它开出花来都会让它枯萎。微小但是日积月累的给予，抱有平常心而不去过度索取。&lt;/p>
&lt;blockquote>
&lt;p>世界上有千千万万朵玫瑰花，而只有小王子星球上的玫瑰花是独一无二的。因为小王子花费了时间去浇灌它，才让它变得与众不同。&lt;/p>
&lt;/blockquote>
&lt;p>这是前同事静子老师教我的道理。&lt;/p>
&lt;h2 id="病毒咽炎关爱油腻中年">病毒、咽炎、关爱油腻中年&lt;/h2>
&lt;p>本命年犯太岁这个事我过去是不信的。&lt;/p>
&lt;p>3 月份去德国出差。之前在国内躲过了两轮变种，可是心存侥幸必有回响啊，还是感染了德国本土毒株。&lt;/p>
&lt;p>发烧那三天，我躲在酒店的屋里，反复用淋浴降温。过来打扫卫生的德国大姨看了我的精神状态，怀疑我在屋里吸毒。&lt;/p>
&lt;p>没有温度计、没有药、没有热水，三天吃了 6 个苹果，一份泡面。好在回国前退烧了并且顺利登机。中途因为改航班签证过期，被德国海关拉进小黑屋写了非法滞留的“认罪书”，相比之下都是小事了。&lt;/p>
&lt;p>在之后半年多时间，我的支气管炎和咽炎反复发作。怀疑有肺结节（体检发现确实有很小的结节），但是医生表示肺结节通常没有症状，我就是咽炎。尝试了很多治疗手段，比较有效的是下面列出来的方法，希望对咽炎病友有所帮助。&lt;/p>
&lt;ul>
&lt;li>要辨别是否混合了咽炎和支气管炎（咳嗽、胸闷），要先治疗支气管炎，一般去小诊所做雾化。&lt;/li>
&lt;li>要祛痰，口服氨溴索。早期痰多会让想清嗓子、咳嗽。这都会破坏粘膜修复。多喝水，不要咳。&lt;/li>
&lt;li>吃刺激性食物、喝咖啡之后用生理盐水漱口，咖啡因、甜食会持续刺激咽喉，造成充血痰多。&lt;/li>
&lt;li>要提高免疫力，咽炎的另一个发作因素是过敏：温度变化、空气质量、睡眠都有影响。&lt;/li>
&lt;li>烟酸、维生素 B2 有助于修复粘膜，维生素 C 提高免疫力。成都奥特乐卖的维生素咀嚼片只要十几块钱，好用得很。&lt;/li>
&lt;/ul>
&lt;p>咽炎好的差不多，后背又有问题。长期伏案办公，圆肩驼背，腰酸脖子疼。我今年买了升降桌和人体工学椅。同时查了一些资料，研究哪些方法能改善体态问题。&lt;/p>
&lt;p>其实正常人的手臂自然下垂时，手掌是朝向身体的。但是长期用键盘的人，会肩胛骨内翻，形成含胸驼背。所以第一步是改变手臂放松状态时的姿态。同时，去健身房训练，也要保证训练胸、背肌肉的频率在 1：2，也就是大量的背部训练，这样才能让背部肌肉把肩膀向后拉。更多可以参考 shuaisoserious 的视频 - &lt;a href="https://www.youtube.com/watch?v=sbDWiWyg-QM">【纠正体态】3 步教你快速告别圆肩驼背!&lt;/a>。&lt;/p>
&lt;h2 id="房子财富业余项目">房子、财富、业余项目&lt;/h2>
&lt;p>春天一波房地产回暖让身边不少人都在成都买了房子。我差不多从 5 月开始关注房产信息，二手房、新房看了差不多几十套吧。现在还在观望（选择困难 😂）。&lt;/p>
&lt;p>我过去对债务有一种错误的认知，债应该越少越好。这让我错过了最好的买房时机。但是今年经济不好，大家开始化债了，没有债的人于是一身轻松（塞翁失马焉知非福）。&lt;/p>
&lt;p>关于买房我也给不了什么建议，我年初的判断是经济会更差，所以观望就是最好的投资。推荐大家一期播客节目&lt;a href="https://www.xiaoyuzhoufm.com/episode/650d22859687557971f61bde">房子，买还是不买，卖还是不卖，这都是问题&lt;/a>，两位嘉宾是支持房产投资的老钱和认为短期不需要着急投资的大卫翁。两种不同观点的碰撞十分精彩。这期节目可算作我年度最喜爱播客。对房产有疑惑的朋友不妨听听。&lt;/p>
&lt;p>另外我也学习了一下宏观经济，从看小 Lin 说的视频，到《置身事内》这本火出圈的书。但是对我理解问题帮助最大的，一个是东北证券的付鹏老师在经济论坛的一系列演讲（尤其年初关于宏观经济的预测）；另一个是网友推荐的书《中央帝国的财政密码》，这本书从财政角度剖析各个朝代兴盛到衰败的过程，有分析利益格局和官僚体系如何影响国家命运，有研究朝代后继者如何解决前朝遗留问题。可以把这本书看作理解现实经济问题切入点，也可以当作茶余饭后的消遣。历史是一面镜子，人都是复读机。&lt;/p>
&lt;p>关于业余项目，今年进展不多。10 月份计划做个微信读书笔记相关的 Web App，后来发现有人做了而且超出我预期，遂放弃。唯一欣慰的是维护的一个 Python 的工具库在 github star 超过了 300 并且被一个法国的实验室引用了，于是又有热情偶尔上去修点 bug。下半年认识了几位独立开发的大佬，其中 MazzyStar 给我印象最深。他过去是算法工程师，辞职后去韩国生活闭关开发，做了很多 AI 相关的 App，月流水已经可以满足日常花销，十分厉害。2024 年希望有机会线下见见这些独立开发的朋友。&lt;/p>
&lt;p>今年也看了一些关于独立项目的书，推荐《简约至上-交互设计四策略》，想把产品做得小而美，这本书值得一读。&lt;/p>
&lt;h2 id="工作人际关系">工作、人际关系&lt;/h2>
&lt;p>今年工作平平淡淡，现在的工作环境在不断改变我的性格。&lt;/p>
&lt;p>上一家公司开放、进取的学习环境给我带来非常正面的影响，但是缺少扎实的项目锻炼。如今这家公司的这两年多时间里，经手的项目工业标准越来越严格，对软件的安全、合规性要求更高。这也让我学习了不少欧洲和美国的行业标准。我经常想起已经去世的陈皓老师的一句话，取法其上，得乎其中。做软件，首先要看看有没有工业标准，其次是参考行业标准，一把钉枪解决全屋装修的草台班子要不得。&lt;/p>
&lt;p>现在的工作环境也有很多问题，突出的一个就是沟通成本极高，印度、土耳其、德国的同事远程协作，又没有规范的开发流程，部门里又缺少鼓励分享知识、提高工作质量的文化。这让本来简单的工作要经过十几个会议才能推进一点点。好的一面是，我在这种折磨人的沟通工作中也积累了一些工作技巧。大企业利益冲突多，大多数人的目标并不是把事情做好，而是要把位置坐稳。所谓有的人负责做蛋糕，有的人负责分蛋糕。推进一个工作最好要把蛋糕提前分好。对于难推进的事情（尤其涉及利益），很多问题不应该在集体会议上抛出。比如关于发展、跨团队协作。而是要提前私下沟通好，保证关键角色背书，提高会议上被采纳的概率。另外，集体会议上被打岔是常事，每个人说话的分量不同，越是后发言的人越占据主动，所以要适当抑制自己的表达欲。&lt;/p></description></item><item><title>Go Server Side Events</title><link>https://sund.site/posts/2023/go-server-side-events/</link><pubDate>Wed, 13 Sep 2023 09:19:18 +0800</pubDate><guid>https://sund.site/posts/2023/go-server-side-events/</guid><description>&lt;p>Server-Sent Events (&lt;strong>SSE&lt;/strong>) is a technology that enables real-time communication between a web browser and a server. It allows the server to send updates or event notifications to the browser without the need for the browser to repeatedly make requests.&lt;/p>
&lt;p>SSE is often used in applications that require real-time updates, such as chat applications, social media feeds, stock market tickers, or notifications systems. It provides a lightweight and efficient way to deliver server-side updates to clients, improving responsiveness and reducing unnecessary network traffic.&lt;/p></description></item><item><title>Go 内存泄漏常见模式</title><link>https://sund.site/posts/2023/goroutine-leak/</link><pubDate>Tue, 27 Jun 2023 14:46:59 +0800</pubDate><guid>https://sund.site/posts/2023/goroutine-leak/</guid><description>&lt;p>最近在工作中排查 Go 语言内存泄漏问题时，发现&lt;a href="https://www.uber.com/blog/leakprof-featherlight-in-production-goroutine-leak-detection/">这篇 Uber 写的博客&lt;/a>，其中分享了几种常见的 goroutine 内存泄漏模式，于是把整理了 goroutine 的相关问题，希望更多人搜索到到这篇文章，帮助大家快速定位内存泄漏问题。&lt;/p>
&lt;h2 id="goroutine-内存泄漏的原因">Goroutine 内存泄漏的原因&lt;/h2>
&lt;p>Go 语言的内存泄漏通常因为错误地使用 goroutine 和 channel。例如以下几种情况：&lt;/p>
&lt;ol>
&lt;li>在 goroutine 里打开一个连接（如 gRPC）但是忘记 close&lt;/li>
&lt;li>在 goroutine 里的全局变量对象没有释放&lt;/li>
&lt;li>在 goroutine 里读 channel， 但是没有写入端，而被阻塞&lt;/li>
&lt;li>在 goroutine 里写入无缓冲的 channel，但是由于 channel 的读端被其他协程关闭而阻塞&lt;/li>
&lt;li>在 goroutine 里写入有缓冲的 channel，但是 channel 缓冲已满&lt;/li>
&lt;/ol>
&lt;p>这几种情况，通常掺杂在复杂的代码里逻辑里，很难调试发现问题。因此衍生出以下几种日常工作中&lt;strong>最容易出现问题的模式&lt;/strong>。&lt;/p>
&lt;h2 id="常见-goroutine-内存泄漏模式">常见 Goroutine 内存泄漏模式&lt;/h2>
&lt;h3 id="premature-function-return-功能过早返回">Premature Function Return /功能过早返回&lt;/h3>
&lt;p>一个 goroutine 要写入 channel，但是在另一个端意外退出导致 channel 读取的代码没有执行。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Example&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// do something
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">a&lt;/span> &amp;gt; &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// do something
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">c&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>代码中主进程在&lt;code>if a &amp;gt; 0&lt;/code> 处 return，导致 channel 无法写入而被阻塞。&lt;/p></description></item><item><title>Kong网关极简入门</title><link>https://sund.site/posts/2023/kong-gateway/</link><pubDate>Fri, 23 Jun 2023 10:36:36 +0800</pubDate><guid>https://sund.site/posts/2023/kong-gateway/</guid><description>&lt;h2 id="基本概念">基本概念&lt;/h2>
&lt;blockquote>
&lt;p>Kong Gateway is a Lua application running in Nginx. Kong Gateway is distributed along with OpenResty, which is a bundle of modules that extend the lua-nginx-module.&lt;/p>
&lt;/blockquote>
&lt;p>Kong 是一个基于 Nginx 上运行的 Lua 程序。它改善了 Nginx 基于静态配置的缺点，可以动态添加插件和热部署。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/kong-gateway/Kong.png" alt="">&lt;/p>
&lt;h2 id="kong-的基础模块">Kong 的基础模块&lt;/h2>
&lt;p>&lt;strong>Service&lt;/strong>是后端服务的抽象。&lt;/p>
&lt;p>&lt;strong>Routes&lt;/strong>是 client 到后端服务的路由规则的抽象。如，为不同的 client 设置不同的认证规则。&lt;/p>
&lt;p>Kong 的 routes 有两种模式 &lt;code>traditional_compat&lt;/code> 和 &lt;code>expressions&lt;/code> 。&lt;/p>
&lt;ul>
&lt;li>&lt;code>traditional_compat&lt;/code> ：旧的基于通配符等匹配优先级的模式。&lt;/li>
&lt;li>&lt;code>expressions&lt;/code> ：新的基于表达式的匹配模式。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Upstreams&lt;/strong>是一个运维对象，在 Services 和真正的后台 API 服务之间，用来负载均衡。&lt;/p>
&lt;p>&lt;strong>Plugins&lt;/strong>是用 lua 或 go 编写的插件，分为 Kong 官方提供的插件和第三方插件。&lt;/p>
&lt;h2 id="kong-的工作原理">Kong 的工作原理&lt;/h2>
&lt;p>Kong 支持三类协议：HTTP/HTTPS，TCL/TLS 和 GRPC/GRPCS。每种协议由不同的参数组成：&lt;/p></description></item><item><title>用户故事地图</title><link>https://sund.site/posts/2023/user-story-mapping/</link><pubDate>Fri, 07 Apr 2023 06:37:53 +0800</pubDate><guid>https://sund.site/posts/2023/user-story-mapping/</guid><description>&lt;blockquote>
&lt;p>用户故事是软件开发和项目管理中的常用术语。主旨是以日常语言或商务用语撰写句子，是一段简单的功能表述。以客户或使用者的观点撰写下有价值的功能、引导、框架来与使用者进行互动，进而推动工作进程。可以被认为是一种规格文件，但更精确而言，它代表客户的需求与方向。&lt;/p>
&lt;/blockquote>
&lt;p>在敏捷开发需求分析阶段，要使用一些流程工具，如&lt;strong>用户故事地图&lt;/strong>，来把那些抽象、模糊的用户需求，转化为具体的、分优先级的、模块化的用户故事。&lt;/p>
&lt;p>一个用户地图看起来是这样的。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/user-story-mapping/user-story.png" alt="">&lt;/p>
&lt;h2 id="绘制用户故事地图的过程">绘制用户故事地图的过程&lt;/h2>
&lt;p>绘制用户故事地图应遵循一些基本原则：&lt;/p>
&lt;ol>
&lt;li>边思考边记录，把所有过程可视化到便签纸上&lt;/li>
&lt;li>聚焦整体，不要过早陷入细节&lt;/li>
&lt;li>为&lt;strong>成果&lt;/strong>排优先级，而不是功能&lt;/li>
&lt;li>验证产品要解决的问题是否真实存在&lt;/li>
&lt;li>使用具象化方案，比如高保真原型或手绘&lt;/li>
&lt;li>通过原型和用户测试来验证想法&lt;/li>
&lt;li>用户地图的目的是让团队能达成有效沟通，提出问题和评估工作量&lt;/li>
&lt;li>估算工作量时，度量越频繁，准确度越高&lt;/li>
&lt;/ol>
&lt;h3 id="使用目标层级">使用目标层级&lt;/h3>
&lt;p>在拆分用户故事时，应遵循逐层拆分的原则，每一层级只聚焦这一层级的任务颗粒度，不要过早陷入细节。&lt;/p>
&lt;p>首先是设定宏观的&lt;strong>活动&lt;/strong>，比如把用户需求分解为几个大的活动，如查看账户、存钱等。&lt;/p>
&lt;p>接下来是梳理&lt;strong>主干故事&lt;/strong>。针对每一个活动，拆分成一个个步骤，这些步骤就是主干故事。每一个主干故事：&lt;/p>
&lt;ol>
&lt;li>是一个动词短语&lt;/li>
&lt;li>故事和故事之前应该保持同样的层级&lt;/li>
&lt;li>从左到右按时间顺序排列，过程中想到任何中间环节都可以随时插入改变顺序&lt;/li>
&lt;/ol>
&lt;p>第三步是针对每一个主干故事，通过头脑风暴的形式补充更多小的用户故事，用便签纸贴在下边。&lt;/p>
&lt;p>最后按优先级，把重要的用户故事放在上面，不那么重要的放在下边。然后横向划分出不同的泳道，把故事按特定的&lt;strong>目标成果&lt;/strong>划分为不同的阶段。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/user-story-mapping/user-story-2.png" alt="">&lt;/p>
&lt;p>比如第一阶段完成基本的功能开发，那么横向的第一排所有用户故事就是第一个版本需要完成的工作。&lt;/p>
&lt;p>这样就完成了用户故事的设计。我们重新梳理一下过程：&lt;/p>
&lt;ol>
&lt;li>划分重要的活动&lt;/li>
&lt;li>梳理主干故事&lt;/li>
&lt;li>完善用户故事&lt;/li>
&lt;li>团队头脑风暴补充遗漏的用户故事&lt;/li>
&lt;li>从上到下排优先级&lt;/li>
&lt;li>横向切分用户故事，划分出每一个迭代的工作和关键成果&lt;/li>
&lt;/ol>
&lt;h2 id="运用设计思维">运用设计思维&lt;/h2>
&lt;p>上面介绍了用户故事的绘制过程，但是其实找到真正的用户需求点才是最难的。为了从特定领域的客户或用户那里挖掘出有价值的需求，通常需要使用&lt;strong>设计思维&lt;/strong>（Design Thinking）来帮助团队沟通、寻找焦点问题。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/user-story-mapping/design-thinking.png" alt="">&lt;/p>
&lt;p>设计思维一共有五步。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>共情&lt;/strong>：沟通，找到问题。&lt;/li>
&lt;li>&lt;strong>定义&lt;/strong>：聚焦若干重要问题，详细阐述。&lt;/li>
&lt;li>&lt;strong>想法&lt;/strong>：每一个问题构思出多个解决方案。&lt;/li>
&lt;li>&lt;strong>原型&lt;/strong>：制作具体的可视化的原型。&lt;/li>
&lt;li>&lt;strong>测试&lt;/strong>：于用户一起完成测试，收集反馈。&lt;/li>
&lt;/ul>
&lt;h2 id="组成探索团队">组成探索团队&lt;/h2>
&lt;p>一个探索团队由三名重要角色组成：&lt;/p>
&lt;ul>
&lt;li>懂产品和需求的 Product Owner&lt;/li>
&lt;li>懂设计和交互的 UX Designer&lt;/li>
&lt;li>懂技术的 Senior Developer&lt;/li>
&lt;/ul>
&lt;p>前期的需求探索阶段，应该由这支组成人数不超过 5 人的团队完成，要避免&lt;strong>委员会设计&lt;/strong>（即团队多数成员参与到设计过程中，导致混乱和不一致）。&lt;/p>
&lt;p>前期排列任务优先级时也应遵循这样的优先级：&lt;/p>
&lt;blockquote>
&lt;p>业务目标 &amp;gt; 客户/用户目标 &amp;gt; 功能&lt;/p>
&lt;/blockquote></description></item><item><title>Python 依赖管理工具的研究</title><link>https://sund.site/posts/2023/python-packaging/</link><pubDate>Thu, 19 Jan 2023 08:05:27 +0800</pubDate><guid>https://sund.site/posts/2023/python-packaging/</guid><description>&lt;h2 id="太长不读">太长不读&lt;/h2>
&lt;p>如果你从事工程项目，&lt;a href="https://python-poetry.org/">poetry&lt;/a> 是目前最好的方案，但是如果你不喜欢 Python 的 virtualenv，可以试试 &lt;a href="https://pdm.fming.dev/latest/">pdm&lt;/a>。&lt;/p>
&lt;h2 id="混乱的-python">混乱的 Python&lt;/h2>
&lt;p>Python 的依赖管理工具 &lt;code>pip&lt;/code> 一直被众多开发者吐槽。从我个人角度，&lt;code>pip&lt;/code> 有三点致命缺陷：&lt;/p>
&lt;ul>
&lt;li>无法解决 Python 依赖环境的隔离问题&lt;/li>
&lt;li>依赖管理文件 &lt;code>requirements.txt&lt;/code> 无法真正开箱即用&lt;/li>
&lt;li>打包部署非常麻烦，需要手动配置&lt;/li>
&lt;/ul>
&lt;h3 id="环境隔离问题">环境隔离问题&lt;/h3>
&lt;p>Python 的依赖库可以安装到系统全局，也可以安装到用户目录（&lt;code>/home/${USER}/.local&lt;/code>）。但如果你同时管理多个 Python 项目，就需要将不同项目的依赖拆分到不同的文件夹分开管理。&lt;/p>
&lt;p>传统方式是基于 virtualenv 创建隔离的 Python bin 文件和项目依赖的虚拟环境（所谓虚拟环境并不是虚拟机，只是个绑定 terminal session 的命令环境）。这种方式的缺点是：&lt;/p>
&lt;ul>
&lt;li>开发者需要经常关注“我现在处于哪个项目目录？我需要切换到当前虚拟环境里吗？”之类的问题。&lt;/li>
&lt;li>virtualenv 只解决环境隔离，但是无法同步更新依赖文件、打包发布。&lt;/li>
&lt;/ul>
&lt;h3 id="依赖安装问题">依赖安装问题&lt;/h3>
&lt;p>Python 管理依赖的手段，最早是手动执行&lt;code>pip install xxx&lt;/code>来安装依赖，最后 &lt;code>pip freeze&lt;/code> 来导出依赖列表到一个 &lt;code>requirements.txt&lt;/code> 文件里。但是这个 txt 文件非常令人困惑。&lt;/p>
&lt;ul>
&lt;li>不像 NodeJS 那么方便，想要升、降级某个依赖版本，无法自动同步到 txt 文件里。&lt;/li>
&lt;li>平铺式地列出了所有一级、二级依赖包（即依赖包的依赖包）。因为 Python 某些依赖又基于系统上安装的 C 库版本，这就导致不同系统环境上执行 &lt;code>pip install -r requirements.txt&lt;/code> 得到的效果并不一致，经常报错。&lt;/li>
&lt;/ul>
&lt;h3 id="打包部署问题">打包部署问题&lt;/h3>
&lt;p>Python 一般使用 &lt;code>wheel&lt;/code> 打包二进制，它只解决打包问题，环境依赖是靠 pip 和 setuptools 完成，所以使用 wheel 你仍然要操心环境隔离和依赖管理问题。&lt;/p></description></item><item><title>构建一幅图景，了解一个环境</title><link>https://sund.site/posts/2022/essay-2022-12-04/</link><pubDate>Sun, 04 Dec 2022 07:10:32 +0800</pubDate><guid>https://sund.site/posts/2022/essay-2022-12-04/</guid><description>&lt;p>项飙在《把自己作为方法》里谈到怎么做农村调查时说，他有个三舅舅，是个非常精通农村社会生态的人。三舅舅知道村里发生的大小事，知道这个体系如何运作，权力结构是什么。项飙把这种对周遭环境的认识能力概括为&lt;strong>图景&lt;/strong>：&lt;/p>
&lt;blockquote>
&lt;p>画这个图不是机械地反应世界，而是要精确地反应世界。什么是真正的精确？真正的精确就是你把握住它内在的未来方向…… ”图景“有两重意思，一是现在的概括，再一个是未来可能的走向。&lt;/p>
&lt;/blockquote>
&lt;p>同样，昨天看社交媒体有人说，大众对当下发生的事情经常过度反应。就像股票每天涨涨跌跌，好的投资者不会把短期的波动太放在心上。但是社交媒体会对热点事件产生集体共鸣，导致大家对短期变化敏感，对事情发生的本质原因失去兴趣。&lt;/p>
&lt;p>这让我想起最近读《禅与摩托车维修艺术》开头的一段话：&lt;/p>
&lt;blockquote>
&lt;p>有什么新鲜事？这是人们最感兴趣的问题，但是也最不着边际，可以没完没了问下去。如果真探讨它的答案，所得的只不过是一堆琐碎的跟风事物…我宁可问这样的问题，什么是最好的？&lt;/p>
&lt;/blockquote>
&lt;p>这有点像软件架构，我们总说系统模型，模型是现状的反应吗？是，又不完全是，它是现状的抽象，是包含了未来走向的东西。&lt;/p>
&lt;p>想起我前公司的同事朱老师常把系统性思考挂在嘴边。比如有一次我打电话问他：怎么做高并发场景的压力测试呢？朱老师先反问我：你们的测试基于哪一种模型呢？是“手机打电话”还是“银行提款”？&lt;/p>
&lt;p>我问他这两种模型怎么讲？他说“手机打电话”就是客户端可以无限增加，流量和客户端增长成比例；“银行提款”是顾客无论怎么增加，接待窗口只有固定数量，多余的顾客只能排队。系统只开放有限的资源，无论流量怎么增长。&lt;/p>
&lt;p>你看，这么一解释，图景就出来了。这就是跟明白人聊天的乐趣，不用花心思解释 context。&lt;/p>
&lt;p>Alan Key 在一次技术演讲里说：&lt;/p>
&lt;blockquote>
&lt;p>You need to solve a context, not just a problem.&lt;/p>
&lt;/blockquote>
&lt;p>我们生活中通常遇到两类问题，底下干活的人没有构建起工作内容的图景，上面管理的人没有构建起生态系统（企业发展方向、部门协作、社区运营）的图景。而大家着眼于问题本身，因为解决问题本身容易而快速。&lt;/p>
&lt;p>另一方面，这种观点在与人相处时也适用。情绪控制不好的人通常对当下反应过度，听到不爱听的话、和自己相反的意见就勃然大怒。其实只要保持一定的&lt;strong>钝感&lt;/strong>，对他人以更高的视角观察，心态就会平和很多。&lt;/p>
&lt;p>还是回到项飙，他有一篇采访里讲到，中国低层社会的&lt;strong>功能性过剩，而生态性不足&lt;/strong>。这句话怎么理解呢？你可以很方便地点外卖，外卖员不管多远都能快速送到你手里。但是楼下小区的保洁员是从哪来的你丝毫提不起兴趣，对身边发生的一切都漠不关心。&lt;/p>
&lt;p>这是中国年轻人在城市中存在感微弱的真正原因，我们没把自己融入 context 里，也就构建不出三舅舅那样的图景。&lt;/p>
&lt;p>回想我之前在 TW 工作时，同事关系是网状的，HR 会随时找我去面试，对于经常帮忙招聘的同事，HR 们也会回赠一些小礼物；每个人同时为不同的项目工作，既独立又联结。有时候会成为敏捷教练，有时会被临时拉去做咨询师。我翻看微信，200 多个好友里，有 104 个是 TW 的同事。
这种关系是生态性的，每个人对工作环境都有一幅完整的图景。而另一些企业，总强调责任意识，但是工作中的功能性压倒性地占据了上风。同事之间是机械地组织起来，完成上级分配的任务。这种状态是无从谈起什么协作、效率的。&lt;/p>
&lt;p>沈奕斐在她自己的播客节目里和她老公谈到工作时说，同事关系是要高于朋友的，因为一天里大部分时间你要和同事度过，要完成高效的协作必须建立在深层的互相认同之上。&lt;/p>
&lt;p>所以，我们是不是要多去体察周围的人和事呢。完成工作和生活的目标固然重要，但正如徒步旅行，如果只是两点一线地直达目标，就只是一名过客，而主动探索小路和岔路，才能构建起一幅对周遭环境的完整图景。&lt;/p></description></item><item><title>Implementing a Prometheus Exporter for Fluent-bit</title><link>https://sund.site/posts/2022/implementing-prometheus-exporter-for-fluentbit/</link><pubDate>Thu, 24 Nov 2022 12:26:23 +0800</pubDate><guid>https://sund.site/posts/2022/implementing-prometheus-exporter-for-fluentbit/</guid><description>&lt;h2 id="background">Background&lt;/h2>
&lt;p>Fluent-bit is a great tool for logging and monitoring, many teams are using it to collect metrics and logs. Prometheus is also a popular tool for metrics analysis, but if you want to output Fluent-bit data to Prometheus, the only way is to use the node-exporter input plugin, which has fixed metrics and data format.&lt;/p>
&lt;p>In our case, we want to export specific input data into Prometheus, therefore we have to implement our Prometheus exporter in a customized Fluent-bit output plugin.&lt;/p></description></item><item><title>渐进式地改变生活习惯——我对福格行为模型的理解</title><link>https://sund.site/posts/2022/fogg-behavior-model/</link><pubDate>Tue, 01 Nov 2022 20:23:55 +0800</pubDate><guid>https://sund.site/posts/2022/fogg-behavior-model/</guid><description>&lt;h2 id="我和失眠的斗争">我和失眠的斗争&lt;/h2>
&lt;p>我经常被失眠折磨。也尝试过各种办法：睡前洗热水澡、手机定时关闭、每天跑步……我发现这些方法都或多或少发挥了作用，但是最终不是难以坚持，就是效果越来越差。我最近读到一本书——《福格行为模型》，让我重新审视这几年和失眠的斗争，从另一个角度认清&lt;strong>习惯&lt;/strong>，了解它是如何兴致勃勃地启动，又如何在挫折过后被放弃。我觉得《福格行为模型》是一本讲到了问题本质的书，它的道理非常凝练，甚至可以用一个公式概括。但是它却有非常强的指导性，按照书中的方法，我已经在最近一个月大大改善了睡眠质量。也希望读完这篇文章，你也有兴趣看一看这本书。&lt;/p>
&lt;p>下面为了方便理解，我把书的内容分为理论和实践两部分。&lt;/p>
&lt;h2 id="理论部分人的行为可以被设计">理论部分：人的行为可以被设计&lt;/h2>
&lt;p>在这个由商业主导的世界里，有一个道理显而易见：人的行为可以被设计。如何让顾客多在广告前停留从而提高销售业绩；游戏公司如何引导玩家沉迷游戏；抖音如何用短视频杀死人们的业余时间……这种种的商业行为，都经过精密的设计。这些使人无法自拔的行为设计，能不能反过来让我们养成好的习惯呢？答案是肯定的。&lt;/p>
&lt;p>福格教授给出了一个公式，它代表行为（&lt;strong>B&lt;/strong>ehavior）产生的三要素：动机（&lt;strong>M&lt;/strong>otivation）、能力（&lt;strong>A&lt;/strong>bility）、提示（&lt;strong>P&lt;/strong>rompt）。&lt;/p>
&lt;blockquote>
&lt;p>B = M A P&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>动机 M 越强，行为越有可能发生；人自身达成行为的能力 A 越强，行为也越可能发生&lt;/strong>。即行为由动机和能力共同作用产生。此外，行为满足前边两种条件也不一定发生，&lt;strong>它需要一个触发开关，即提示 P&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/fogg-behavior-model/image-20221101210156089.png" alt="">&lt;/p>
&lt;p>这张图展示了一条曲线，当（动机-能力）的坐标落在曲线上方，此时如果给行为一个提示，行为就会立刻发生。&lt;/p>
&lt;p>比如，当一个母亲的孩子被熊攻击时，母亲会毅然去救孩子。此时，&lt;strong>孩子被攻击&lt;/strong>是&lt;strong>提示&lt;/strong>，母亲虽然&lt;strong>能力&lt;/strong>很弱，但是保护孩子的&lt;strong>动机&lt;/strong>极强，使得上图中母亲的坐标落在了曲线上方。这样&lt;strong>救孩子&lt;/strong>的行为就自然而然产生了。&lt;/p>
&lt;blockquote>
&lt;p>黄金行为有三个标准：&lt;/p>
&lt;ol>
&lt;li>这个行为能让你实现愿望（影响）&lt;/li>
&lt;li>你想做这个行为（动机）&lt;/li>
&lt;li>你可以做到（能力）&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>这也能解释习惯的产生和磨灭。当一个人意识到自己肥胖（提示），他决定开始减肥，他的动机很强，此时虽然他（减肥的）能力很弱，但是他减肥的行为却因强烈的动机而发生了。但是随着时间推移，动机变弱，使得他的坐标滑落到曲线下方。这时减肥的行为就可能终止。这就是大部分人从捡起习惯到放弃习惯的过程。这里引出了另一个重要理论。&lt;/p>
&lt;p>&lt;strong>人的动机是不稳定的，主观改变动机非常困难&lt;/strong>。&lt;/p>
&lt;blockquote>
&lt;p>你不能直接从动机入手去解决问题。——福格&lt;/p>
&lt;/blockquote>
&lt;p>因为人心理状态这种不确定性，所以福格建议，最好按照提示 - 能力 - 动机的优先级，去打造（或是戒除）行为习惯。&lt;/p>
&lt;p>首先是通过时间、空间、心情等条件，触发行为。&lt;strong>福格称其为锚点。锚点必须是明确、不含糊的最后行为&lt;/strong>。当这个锚点出现时，就自动提示你去完成你要做的事情。&lt;/p>
&lt;p>其次是降低能力门槛。&lt;strong>如学习技能、购买工具、降低问题规模等，使能力满足行为触发的条件&lt;/strong>。其中降低问题规模的方法就是我们通常说的&lt;strong>微习惯&lt;/strong>，如果想要每天锻炼身体，那么就应该从每天做一个俯卧撑开始，一点点提高运动量。这个行为必须是即便阴天下雨，你心情不好，工作疲惫，也能轻易做到的。&lt;/p>
&lt;p>另外，&lt;strong>重复做&lt;/strong>也是会降低行为的难度，作者鼓励大家用&lt;strong>高频率的小成功&lt;/strong>来养成习惯。&lt;/p>
&lt;p>最后也是最难的是正确的动机，&lt;strong>动机必须出自你的真实意愿，你不能从网上或者成功人士那里获得动机&lt;/strong>。一个匹配我们行为的动机，必须能切实给我们带来好处。&lt;/p>
&lt;h2 id="实践部分绘制地图重新设计我们的日常">实践部分：绘制地图，重新设计我们的日常&lt;/h2>
&lt;p>讲完了理论，终于可以实操了。&lt;/p>
&lt;h3 id="第一步围绕习惯找出行为">第一步，围绕习惯找出行为&lt;/h3>
&lt;p>在一张白板或白纸中间写下你希望养成的习惯。以我自己为例，我希望保持固定节奏的健身习惯。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/fogg-behavior-model/image-20221101220730758.png" alt="">&lt;/p>
&lt;p>然后是头脑风暴。通过发散思维，把影响这个习惯的因素全部写下来。福格在原书中描述的是找出影响习惯的&lt;strong>行为&lt;/strong>，但是直接写出行为很困难，所以我先把所有因素罗列出来，再一点点推导出行为。&lt;/p>
&lt;p>比如，影响我保持健身频率的因素之一是天气冷容易感冒。我从这点入手分析了原因：一方面健身房人多导致换衣、器械使用需要长时间等待。另一方面衣服保暖做的不够。所以最后我得到两个影响健身的行为：&lt;/p>
&lt;ol>
&lt;li>在人相对少的时间段去健身房&lt;/li>
&lt;li>购买轻薄但是保暖性较好的运动服（这是一次性任务）&lt;/li>
&lt;/ol>
&lt;p>同理，上班疲惫也是影响因素，我得到了两个行为：&lt;/p>
&lt;ol>
&lt;li>拆分不同训练方式到一周里的不同工作日，以避免过度运动&lt;/li>
&lt;li>利用居家办公的那几天时间下班去健身&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://sund.site/images/fogg-behavior-model/image-20221101222608765.png" alt="">&lt;/p>
&lt;p>请你结合自己的特点，找出所有影响的因素并对应到多个行为上去。&lt;strong>注意有些行为依赖于养成另外一些习惯&lt;/strong>， 比如要健身的前一天睡眠充足，就依赖好的睡眠习惯。作者建议最开始可以从三个最小的习惯开始培养，容易形成正反馈。我在训练这套方法的过程中发现，通常坏习惯都是由另外的坏习惯连锁产生的，所以从最小的习惯开始改变，慢慢会产生马太效应。&lt;/p>
&lt;h3 id="第二步建立影响-容易程度坐标轴">第二步，建立【影响-容易程度】坐标轴&lt;/h3>
&lt;p>把刚才拆分出来的行为，全部放在下图的坐标轴中。越容易做（执行的能力越强）、对你影响越大（动机越强）的行为，越靠近右上角。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/fogg-behavior-model/image-20221101222235671.png" alt="">&lt;/p>
&lt;p>通常一次性的行为最容易执行（比如采购运动服）；那些需要多个步骤（比如用手机记录健身状态）比较难执行。&lt;/p>
&lt;p>最后，我挑选了三件对我影响最大也最容易的行为来执行：采购健身装备、拆分不同训练到不同时间、居家办公时去健身。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/fogg-behavior-model/image-20221101223148524.png" alt="">&lt;/p>
&lt;p>用同样的方法，我还制定了睡眠习惯的养成策略。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/fogg-behavior-model/image-20221101223333662.png" alt="">&lt;/p>
&lt;p>经过最近一个多月的练习，我也渐入佳境。我在坚持了一段时间后还买了专门记录健身的手机 App 来跟踪训练效果（虽然我也没寄希望能保持长期记录，但是能给我非常好的正向激励）。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/fogg-behavior-model/image-20221101230558693.png" alt="训记App">&lt;/p>
&lt;h2 id="小结">小结&lt;/h2>
&lt;ul>
&lt;li>《福格行为模型》指出了人类行为产生的公式，即 行为 = 动机 · 能力 · 提示。&lt;/li>
&lt;li>从三要素入手，养成最小的微习惯，从而快速得到正向激励，能够帮我们快速建立好习惯。&lt;/li>
&lt;li>制定习惯养成计划时，先从习惯拆解出具体的，可执行的行为。再按行为的优先级选择最容易、影响最大的执行。&lt;/li>
&lt;li>某些行为依赖其他习惯，逐级拆解，同时养成三个微小的习惯，渐进式地改变生活状态吧。&lt;/li>
&lt;/ul></description></item><item><title>规范的错误信息</title><link>https://sund.site/posts/2022/write-error-message/</link><pubDate>Tue, 23 Aug 2022 22:18:00 +0800</pubDate><guid>https://sund.site/posts/2022/write-error-message/</guid><description>&lt;p>&lt;img src="https://sund.site/images/20221031083917.png" alt="">&lt;/p>
&lt;p>本文整理了 Google 官方文档中关于错误信息的编写规范。适用于有一定编程经验，尤其从事业务开发的程序员。&lt;/p>
&lt;p>通过本文你可以：&lt;/p>
&lt;ul>
&lt;li>写出风格统一、用户友好的错误信息&lt;/li>
&lt;li>提高代码的可维护性，降低沟通成本&lt;/li>
&lt;/ul>
&lt;p>Google 文档原文：&lt;a href="https://developers.google.com/tech-writing/error-messages">Error Messages&lt;/a>&lt;/p>
&lt;h2 id="基本原则">基本原则&lt;/h2>
&lt;ul>
&lt;li>错误不应该被掩盖 (Don&amp;rsquo;t fail silently)&lt;/li>
&lt;li>遵循语言的规范 (Follow the programming language guides)&lt;/li>
&lt;li>实现完整的错误模型 (Implement the full error model)
&lt;blockquote>
&lt;p>包含错误码、错误内容、错误原因、处理方法&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>避免吞掉问题根源 (Avoid swallowing the root cause)&lt;/li>
&lt;li>输出错误代码 (Log the error codes)&lt;/li>
&lt;li>快速抛出错误 (Raise errors immediately)&lt;/li>
&lt;/ul>
&lt;h2 id="解释错误原因">解释错误原因&lt;/h2>
&lt;p>使用错误信息给用户解释原因时，应该遵循：&lt;/p>
&lt;ul>
&lt;li>具体，准确，避免含糊。&lt;/li>
&lt;li>在错误信息中包含用户输入的错误内容。如果输入的内容特别长：
&lt;ul>
&lt;li>渐进地显示，提供一个可展开详情的省略号。&lt;/li>
&lt;li>截断内容，只保留必要部分。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>明确告诉用户，系统的要求和限制&lt;/li>
&lt;/ul>
&lt;h2 id="解释如何处理问题">解释如何处理问题&lt;/h2>
&lt;ul>
&lt;li>对用户来说，错误信息必须有可操作性。也就是说，在解释了问题的原因后，说明如何解决这个问题。&lt;/li>
&lt;li>最好给用户提供一个例子。&lt;/li>
&lt;/ul>
&lt;h2 id="清晰的错误信息">清晰的错误信息&lt;/h2>
&lt;ul>
&lt;li>简明扼要，使用主动语态。（这方面内容可以参考&lt;a href="https://sund.site/posts/2022/technical-writing/">技术文档写作指南&lt;/a>）&lt;/li>
&lt;li>避免出现双重否定句式。&lt;/li>
&lt;li>让目标用户能够理解，即根据用户掌握的知识，提供有帮助的内容。&lt;/li>
&lt;li>专业术语应前后一致。&lt;/li>
&lt;/ul>
&lt;h2 id="错误信息的格式">错误信息的格式&lt;/h2>
&lt;ul>
&lt;li>使用链接提供更多信息。&lt;/li>
&lt;li>渐进式呈现错误信息（比如可以展开详情的省略号）。&lt;/li>
&lt;li>错误提示应该贴近错误发生的位置。&lt;/li>
&lt;li>避免错误信息滥用字体或颜色。&lt;/li>
&lt;li>使用正确的语气:
&lt;ul>
&lt;li>不要告诉用户错在哪，告诉用户应该做什么。&lt;/li>
&lt;li>避免责备、幽默、道歉的语气。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="对后端开发的建议">对后端开发的建议&lt;/h2>
&lt;ul>
&lt;li>错误要有错误码&lt;/li>
&lt;li>可以在错误信息结构里提供一个指向错误解释的 ID，如：
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;error&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Bad Request - Request is missing a required parameter: -collection_name. Update parameter and resubmit. Issue Reference Number BR0x0071&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul></description></item><item><title>技术文档写作指南</title><link>https://sund.site/posts/2022/technical-writing/</link><pubDate>Sun, 21 Aug 2022 15:29:00 +0800</pubDate><guid>https://sund.site/posts/2022/technical-writing/</guid><description>&lt;p>本文内容摘录自 &lt;a href="https://developers.google.com/tech-writing/overview">Technical Writing&lt;/a> （谷歌技术文档写作指南）的第一部分。&lt;/p>
&lt;p>本文适用于想要提高技术文档写作、技术领域日常沟通能力的读者，对于一些商务的、非文学性质的英语办公场景沟通，也能起一定帮助作用。&lt;/p>
&lt;p>阅读过本文的读者可以：&lt;/p>
&lt;ul>
&lt;li>提高在日常办公中清晰、准确、客观地传达概念和逻辑的能力。&lt;/li>
&lt;li>掌握英文技术文档写作规范。&lt;/li>
&lt;/ul>
&lt;h2 id="词汇words">词汇（Words）&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>对于已有的术语，不要重复发明新的词汇，可以用一个链接指向解释它的页面。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果有必要，可以在文档中直接定义新的术语，但如果术语比较多，最好建立一个术语对照表。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>文档各处出现的术语应该保持一致的名称或缩写。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>关于缩写：第一次出现要用&lt;strong>粗体&lt;/strong>写全称并用括号指明缩写，之后的文章中不要反复混用全称和缩写。&lt;/p>
&lt;p>例如：&lt;/p>
&lt;blockquote>
&lt;p>This document is for engineers who are new to the &lt;strong>Telekinetic Tactile Network&lt;/strong> (&lt;strong>TTN&lt;/strong>) or need to understand how to order TTN replacement parts through finger motions.&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>如果一个术语出现频率不高，请不要使用缩写。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用缩写的情况有：1. 缩写明显更简短；2. 该术语出现频率很高。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>谨慎使用代名词（It，they，that 等）。&lt;/p>
&lt;ul>
&lt;li>代名词一定要出现在它所指代的名词之后。&lt;/li>
&lt;li>如果代名词远离它指代的名词（超过 5 个单词），就不用代名词。&lt;/li>
&lt;li>在名词和代名词之间出现第二个名词，会产生歧义，应避免这种情况。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>类比计算机编程语言：&lt;/p>
&lt;p>缩写 = 对术语的一层抽象。读者需要花费更多脑力去把它展开成对应的名词。&lt;/p>
&lt;p>代名词 = 指针。它容易引起歧义，所以要避免在读者大脑中引起「空指针」错误。&lt;/p>
&lt;h2 id="主动语态active-voice">主动语态（Active voice）&lt;/h2>
&lt;ul>
&lt;li>技术文档中应尽量使用主动语态。
&lt;ul>
&lt;li>被动语态在读者大脑中需要额外的加工转换才能被理解。&lt;/li>
&lt;li>被动语态用来间接地表达行为，容易引起混乱。&lt;/li>
&lt;li>有些被动语态省略了行为主体，会迫使读者猜测主语是谁。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>如果使用被动语态，应正确使用过去分词的各种形式和介词（如 as，by）。&lt;/li>
&lt;li>祈使句的动词（命令式动词）应该使用主动语态。&lt;/li>
&lt;li>科技论文中经常出现被动语态（如 It has been suggested that&amp;hellip;），这种写法并不能传递更多信息，很多科学期刊也开始鼓励使用主动语态。&lt;/li>
&lt;/ul>
&lt;h2 id="炼句clear-sentencesshort-sentences">炼句（Clear sentences，Short sentences）&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>选择准确、有力、具体的动词。减少不精确的、软弱的或通用的动词。&lt;/p></description></item><item><title>《分手的决心》细节分析</title><link>https://sund.site/posts/2022/decision_to_leave/</link><pubDate>Sun, 14 Aug 2022 17:01:56 +0800</pubDate><guid>https://sund.site/posts/2022/decision_to_leave/</guid><description>&lt;blockquote>
&lt;p>把那部手机丢进海里，让它陷入深处，没人能寻到。&lt;/p>
&lt;/blockquote>
&lt;p>看完《分手的决心》，我决心水一篇。今天跟大家一起分析分析电影里的细节。&lt;/p>
&lt;h2 id="影片开头的支线情节">影片开头的支线情节&lt;/h2>
&lt;p>电影的一开头，刑警张海俊在追查两起凶杀案。分别是知九洞杀人案和女主宋瑞莱（汤唯饰）丈夫坠山案。第一次看时令我不解的是，前一起案件看似和整个剧情毫无关系，为什么导演要花那么多时间讲一个支线故事呢。&lt;/p>
&lt;p>让我们回顾一下知九洞案：凶手洪山五曾经和女友吴佳人非常相爱，后来吴与小凡（后来的死者）偷情，得知被绿后的洪山五愤而刺死情敌。在刑警男主一番抓捕之后，洪山五被逼到天台边缘跳楼自杀。他在自杀前，特别希望转告女友吴佳人：「虽然我为了你受苦，但如果不是你，我的人生将是一场空」。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/image-20220814134440634.png" alt="">&lt;/p>
&lt;p>这里印证了前面情节中，知九洞案另一位嫌疑犯，洪山五的朋友（李智久）的口供。&lt;/p>
&lt;blockquote>
&lt;p>他那个人，宁可自杀也不会回监狱，因为回忆太过美好。&lt;/p>
&lt;/blockquote>
&lt;p>这句话点出洪山五选择跳楼自杀的原因——当初和女友在一起时的美好回忆，令他陷在过去中，无法面对现实。&lt;/p>
&lt;p>这是整个故事的基调，也暗示了男女主人公的结局。&lt;/p>
&lt;p>而洪山五跳下的那栋楼，和女主丈夫奇都秀坠亡的那座山，在男主的俯视角镜头里形成了呼应。「山」在这里暗示了「稳固的关系」，洪山五为其而死，奇度秀被其所害。&lt;/p>
&lt;h2 id="正篇">正篇&lt;/h2>
&lt;p>下面是我画的一张主要人物关系图。如果忘了剧情可以参考一下。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/%E5%88%86%E6%89%8B%E7%9A%84%E5%86%B3%E5%BF%83%E5%85%B3%E7%B3%BB%E5%9B%BE.png" alt="">&lt;/p>
&lt;h3 id="山与海的隐喻">山与海的隐喻&lt;/h3>
&lt;p>回到主线，女主宋瑞莱的名字里已经透露了重要的信息，「瑞」字里有「山」，男主张海俊的名字里有「海」。中文译者把线索藏在两位主角的名字里，其用心真是让我惊叹啊。另外故事里也反复出现「山海经」、水纹封面的笔记等元素。&lt;/p>
&lt;p>从女主宋瑞莱的角度看，片中反复出现她在「山」和「海」两种状态的摇摆。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/image-20220814140654675.png" alt="">&lt;/p>
&lt;p>第一次是在警局问话时，她提到「智者乐水，仁者乐山，我不是智者，所以我喜欢水」。这明显是撒谎，是为了解释她和丈夫吵架的借口。因为在后面情节中，她反复提到她的母亲在临死前跟她说「去找你姥爷在韩国老家的山吧」。这里出现的山，并不仅仅是现实中的锄头山，也是女主心里追寻的山。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/image-20220814140952601.png" alt="">&lt;/p>
&lt;p>而后半段中，女主和男主两人在雪中爬上锄头山之后，女主说，「母亲告诉我，去韩国吧，去那里就有这座山」。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/image-20220814141046727.png" alt="">&lt;/p>
&lt;p>可见，女主身世坎坷，来到韩国后心中一直追寻稳定的依靠，母亲的话冥冥中指引她「去那里吧，那里有你的山」。可是到韩国后第一任丈夫的长期虐待，让宋瑞莱仇恨眼前的山，而把男主张海俊视作是可以真正依靠的山。&lt;/p>
&lt;p>而站在男主的视角，他的山，是枷锁。&lt;/p>
&lt;p>山稳固有形，水流动无形。男主刑警张海俊，有个在核电站工作、周末同房的妻子。两人的关系是稳固的，同时也是空洞的。男主经常夜里一个人去看海。而他的妻子对此不屑一顾。&lt;/p>
&lt;blockquote>
&lt;p>男主：要我说，我是大海的男子汉！&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>夫人：什么大海的男子汉，明明内陆才是故乡。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://sund.site/images/image-20220814142506839.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/image-20220814142535311.png" alt="">&lt;/p>
&lt;p>男主想要逃避的是眼前的山，在他和女主相遇的一瞬间，他就清晰地知道，他们是同一类人。&lt;/p>
&lt;h3 id="两部手机">两部手机&lt;/h3>
&lt;p>故事的第一个高潮，男主发现女主作案的铁证之后，陷入因自己沉迷感情而丧失破案机会的「崩溃」中。男主戳穿宋瑞莱的作案过程之后，仍然选择抛弃自己的身份，和宋瑞莱成为共犯（可能已经是他人生剧本中早已经注定的安排），他对宋瑞莱说：&lt;/p>
&lt;blockquote>
&lt;p>把那部手机丢进海里，让它陷入深处，没人能寻到。&lt;/p>
&lt;/blockquote>
&lt;p>对于宋瑞莱来说，这句话击中了她心里最柔软的地方。当男主在她面前放弃了自己最重视的东西时，她发现自己也已经没有办法从这段关系里挣脱，她在男主离去后，留下一滴眼泪。&lt;/p>
&lt;p>讲到这里，电影里最重要的线索就是手机。片中一共有两部手机，第一部女主的红色手机记录了宋瑞莱杀死丈夫的线索，另一部第二任丈夫的手机，记录了男主保护宋瑞莱，掩盖杀人线索的录音。&lt;/p>
&lt;p>这两部手机的归宿也很耐人寻味。&lt;/p>
&lt;p>第一部手机（记录女主罪证），男主希望丢掉，却被女主保留下来。&lt;/p>
&lt;p>另一部手机（记录男主罪证）是宋瑞莱主动丢到大海里，但是被男主捞上来的。&lt;/p>
&lt;p>这两部犯罪的证据，成为双方为了保护对方，丢不掉的羁绊。&lt;/p>
&lt;p>故事的结局，宋瑞莱没有选择丢弃手机，而是带着这段回忆，和手机一起消失在无人知道的大海里。她在临别时说：&lt;/p>
&lt;blockquote>
&lt;p>海里捞出来的手机，你重新丢了吧，丢到更深的海里。&lt;/p>
&lt;/blockquote>
&lt;p>没有说出的话，大概是「忘了我吧，但是我会记得你」。&lt;/p>
&lt;h3 id="婚戒">婚戒&lt;/h3>
&lt;p>电影的另一个反复出现的线索是婚戒。&lt;/p>
&lt;p>影片里，男主与夫人羞羞之后，导演给了婚戒一个特写，男主有一个把婚戒握起来的小动作，暗示了男主和夫人之间看似恩爱的表面下，是双方都不愿意说破的冷漠。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/image-20220814150620934.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/image-20220814150634759.png" alt="">&lt;/p>
&lt;p>而在发生丈夫坠山事件之后，宋瑞莱在警察局审问中途去了一趟洗手间，她发现手上的婚戒没有戴，然后悄悄戴上了。也说明她似乎在掩饰着什么。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/image-20220814150735689.png" alt="">&lt;/p>
&lt;p>在女主的第二任丈夫死后，男主押送女主的汽车上，男主的手上仍然有婚戒。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/image-20220814150841261.png" alt="">&lt;/p>
&lt;p>但是片尾，两个人第二次同坐一辆车时，男主的婚戒已经消失了，而宋瑞莱的手紧紧握住了张海俊：&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/image-20220814150918432.png" alt="">&lt;/p>
&lt;h3 id="乌鸦的羽毛">乌鸦的羽毛&lt;/h3>
&lt;p>另一个多次出现的暗示，是黑色羽毛。女主喂养的小猫为了报答主人，弄死了一只乌鸦叼到女主身边。这正是后半段女主杀夫护男主的伏笔。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/image-20220814151043041.png" alt="">&lt;/p>
&lt;p>片中第二次和第三次出现乌鸦羽毛，分别在男主调查两任丈夫死亡线索时一闪而过。其实男主早就把两任丈夫的死亡，同女主紧紧绑定在一起了。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/image-20220814151325447.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/image-20220814151335869.png" alt="">&lt;/p>
&lt;h2 id="尾声">尾声&lt;/h2>
&lt;p>其实电影里还有很多细节，比如女主的很多韩语对白都是从电视剧里学的；宋瑞莱两任丈夫分别死在山上和水里；影片里的城市以「雾」闻名，而雾是介于有形和无形之间的东西……等等。&lt;/p>
&lt;p>最后送上汤唯的一段表情，宋瑞莱开车前往海边时，张海俊在电话里问她「我什么时候说过爱你？」，宋瑞莱在短短几秒钟内的四个眼神。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/image-20220814151745062.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/image-20220814151854912-16604615388562.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/image-20220814151913303.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/image-20220814151924590.png" alt="">&lt;/p></description></item><item><title>3 Ways to Access Host System in a Docker Container</title><link>https://sund.site/posts/2022/3_ways_to_access_host_system_in_container/</link><pubDate>Mon, 08 Aug 2022 20:04:00 +0800</pubDate><guid>https://sund.site/posts/2022/3_ways_to_access_host_system_in_container/</guid><description>&lt;p>When we are using Docker, we always access the host system by mounting the host folders as a volume. But sometimes we can not do that due to deployment reasons or security limits.&lt;/p>
&lt;p>There are three workaround ways to access the host system.&lt;/p>
&lt;h2 id="1-mount-dockersocks-into-container">1. Mount &lt;code>docker.socks&lt;/code> into container&lt;/h2>
&lt;p>&lt;code>docker.socks&lt;/code> is a Unix socket that Docker Engine API listens on. You can mount &lt;code>/var/run/docker.socks&lt;/code> file to your container and call Docker Engine API through this socket.&lt;/p></description></item><item><title>品味和效率</title><link>https://sund.site/posts/2022/2022-08-04/</link><pubDate>Thu, 04 Aug 2022 07:59:00 +0800</pubDate><guid>https://sund.site/posts/2022/2022-08-04/</guid><description>&lt;p>早起又随性写点东西。&lt;/p>
&lt;p>最近朋友圈被转载很多的一篇文章，来自 GQ 实验室对重轻老师的采访。里面有一段关于品味的叙述：&lt;/p>
&lt;blockquote>
&lt;p>……审美的底层逻辑是能感受到那些细微差别。这本身是非常非常幸福的，是一个“自我奖励”的事；另一方面它只能通过大量的自我训练来实现，没法让别人嚼好了喂给你，就是得自己重复喝很多咖啡、听很多唱片、看很多电影，然后试图去分辨。这个过程不会很舒服，甚至挺累的，是一个苦活，一种「爱的苦工」。&lt;/p>
&lt;p>我相信审美、品味是值得向往的：“有品位”作为自我装点的标签没啥意义，是我们花费很多时间、经历大量摸索、甚至是克服了很多困难的那个过程，它很值得向往。&lt;/p>
&lt;/blockquote>
&lt;p>品味是需要心甘情愿付出劳动的。陈丹青有一次接受采访时说：&lt;/p>
&lt;blockquote>
&lt;p>年轻人装逼没什么不好的，我年轻时候就喜欢装逼……只是现在装成了。（笑）&lt;/p>
&lt;/blockquote>
&lt;p>「装成了」是结果，自我愉悦是过程，付出辛苦是前提。缺少任一条件，都是字面上的装逼。&lt;/p>
&lt;p>延申地说，可能不仅是欣赏文化作品，每一件跟赚钱无关的事，都能达成「装成了」的境界。当你不把追求效率放在第一位时，「付出劳动」就和「自我愉悦」挂钩了。&lt;/p>
&lt;p>另一件生活里的小事是，我发现那些工作很忙碌的人，往往是不追求效率的。真正追求工作效率的人，是为了解放时间留给业余生活，但是很多人只是沉迷工作本身，他们热爱这件事，能从中获得愉悦（或者满足感）。&lt;/p>
&lt;p>「追求效率」不是为了享受，其实是为了更好的逃离某种状态。比如你刷了一小时抖音，这就是追求效率，而不是享受，你是想逃离工作状态，想逃离手机以外的烦心事。你如果真想享受生活，躺在沙发上刷短视频满足不了你。&lt;/p>
&lt;p>有时候折腾效率软件也跟喝咖啡一样，效率（提神）只是这件事的副作用，它个寻找快乐的过程。真追求效率的人不在乎软件是什么，黑猫白猫抓住耗子就是好猫，这才是效率。&lt;/p>
&lt;p>最后奉上一张 Twitter 上的梗图。&lt;/p>
&lt;p>&lt;img src="images/529f94b3bfab914f272c3a51adcd83e.jpg" alt="">&lt;/p></description></item><item><title>Notion as a Dashboard</title><link>https://sund.site/posts/2022/using_notion_as_a_dashboard/</link><pubDate>Sun, 31 Jul 2022 21:01:56 +0800</pubDate><guid>https://sund.site/posts/2022/using_notion_as_a_dashboard/</guid><description>&lt;p>I have built a Chrome extension &lt;a href="https://chrome.google.com/webstore/detail/%E6%97%A0%E7%94%A8%E4%B8%BB%E6%84%8F%E6%A0%87%E7%AD%BE%E9%A1%B5/lieiofhdejclfpflofeooilpeaphlcgd?hl=zh-CN">无用主意&lt;/a> during the last month. The backend service implemented by Flask is using Notion as a dashboard.&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/20220731212027.png" alt="">&lt;/p>
&lt;h2 id="notion-api">Notion API&lt;/h2>
&lt;p>If you want your service to connect to Notion, you have to create a Notion integration on &lt;a href="https://www.notion.so/my-integrations">this page&lt;/a>. Afterward, you have to share a specific Notion page with the integration you just created.&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/20220731213331.png" alt="">&lt;/p>
&lt;p>Now, you can call &lt;a href="https://developers.notion.com/reference/intro">Notion API&lt;/a> to visit your page.&lt;/p>
&lt;p>Once the service has permission to write and read data to Notion, we can sync data between them.&lt;/p></description></item><item><title>Building a File Parser</title><link>https://sund.site/posts/2022/2022-5-8_lexer_design/</link><pubDate>Sun, 08 May 2022 14:00:00 +0800</pubDate><guid>https://sund.site/posts/2022/2022-5-8_lexer_design/</guid><description>&lt;p>Last week, after reading this article - &lt;a href="https://www.aaronraff.dev/blog/how-to-write-a-lexer-in-go">How to Write a Lexer in Go&lt;/a>, I found that it is not so difficult to design a configuration file parser by this article&amp;rsquo;s mindset. Then I tried to write a fluent-bit configuration parser and finally got this &lt;a href="https://github.com/stevedsun/go-fluentbit-conf-parser">Fluent-Bit configuration parser for Golang&lt;/a>.&lt;/p>
&lt;p>In this article, I want to introduce how to parse Fluent-bit configuration &lt;code>.conf&lt;/code> file, and the thinking behind it.&lt;/p>
&lt;h2 id="fluent-bit-configuration-format-and-schema">Fluent-bit configuration format and schema&lt;/h2>
&lt;pre tabindex="0">&lt;code>[FIRST_SECTION]
 Key1 some value
 Key2 another value

[SECOND_SECTION]
 KeyN 3.14
&lt;/code>&lt;/pre>&lt;p>Here is a classic mode configuration of Fluent-bit, it includes two parts:&lt;/p></description></item><item><title>分布式缓存系统的设计</title><link>https://sund.site/posts/2021/distributed-cache/</link><pubDate>Thu, 18 Mar 2021 15:32:57 +0800</pubDate><guid>https://sund.site/posts/2021/distributed-cache/</guid><description>&lt;p>很久不写技术文章了。这是一篇关于 Redis 构建分布式缓存系统的总结，结合之前项目上的使用场景，做一个系统性的梳理。&lt;/p>
&lt;p>下面就以我做过的商品预约平台项目作为引子，引出分布式缓存设计的一些要点。&lt;/p>
&lt;p>该商品预约平台的背景如下：&lt;/p>
&lt;ul>
&lt;li>该系统由多个微服务组成&lt;/li>
&lt;li>预约的过程：用户可以选择指定门店，指定日期到店提领商品，如果对应门店和日期没有库存，则不能预约&lt;/li>
&lt;li>因为“预约”的是未来时刻的库存，所以门店的未来某个时间剩余库存是通过一系列公式计算得出的。这个公式比较复杂，考虑到了用户指定的日期是否在配货周期内等因素，这里省略掉细节&lt;/li>
&lt;li>每年节日高峰时期，用户会集中预约商品，导致服务压力骤增。又因为未来日期的库存需要动态计算的特点（比如 A 预约了 1 月 1 日的最后一件商品，B 就会无法在该日预约），不同用户的预约操作会互相影响，严重时导致数据库死锁、数据不一致等问题&lt;/li>
&lt;/ul>
&lt;p>基于以上背景，这个预约系统的设计必须将性能作为主要优化目标，而缓存作为性能优化的不二选择，就承担了重要职责。&lt;/p>
&lt;h2 id="识别热点数据">识别热点数据&lt;/h2>
&lt;p>并不是所有数据都有必要被缓存，往往缓存的数据具有以下几个特点：&lt;/p>
&lt;ul>
&lt;li>读写比很高。如果写操作比读操作还多，缓存系统频繁更新会大大降低可用性&lt;/li>
&lt;li>是热点数据。因为内存的价格昂贵，所以按照 2-8 原则，20%热点数据才值得被缓存&lt;/li>
&lt;li>能够容忍短时间的不一致&lt;/li>
&lt;/ul>
&lt;p>结合项目需要，排除掉一些不适合缓存的数据：&lt;/p>
&lt;ul>
&lt;li>对于那些只读的、配置相关的数据，只需要做进程缓存（使用 Guava Cache），在服务启动时加载数据到内存就可以了&lt;/li>
&lt;li>尽量用 CDN 和 Nginx 静态缓存来解决大部分不常更新的资源&lt;/li>
&lt;/ul>
&lt;p>对于该预约项目，用户最频繁查询的数据是不同门店在不同日期下的库存数量。这类数据是缓存设计的重点照顾对象：&lt;/p>
&lt;ul>
&lt;li>用户选择了指定城市、指定门店后，系统会返回最近 30 天的库存信息，用户只可能修改其中一条信息。所以读写比很高&lt;/li>
&lt;li>库存信息是预约订单流程的必备步骤，而且是跨服务调用（预约服务 -&amp;gt; 库存服务）的数据，所以涉及到大量网络请求、数据库查询。&lt;/li>
&lt;/ul>
&lt;h2 id="指定性能优化的指标">指定性能优化的指标&lt;/h2>
&lt;p>在即将完成业务系统开发时，我们就根据 &lt;a href="https://sre.google/books/">Google SRE Books&lt;/a> 提到的四个黄金指标，制定了监控系统性能的四个维度：&lt;/p>
&lt;ul>
&lt;li>请求率&lt;/li>
&lt;li>错误数，非 200 返回结果数量&lt;/li>
&lt;li>响应时间&lt;/li>
&lt;li>资源利用率（CPU、内存）&lt;/li>
&lt;/ul>
&lt;p>我们使用 Prometheus + Grafana 的组合实现监控可视化，这样每次测试人员进行压力测试时，都可以通过这些指标对系统进行调整。缓存影响最大的指标是&lt;strong>请求率&lt;/strong>（一般用 TPS 或者 QPS）和&lt;strong>响应时间&lt;/strong>。所以在设计缓存系统时，要不断参照这两个指标进行优化。&lt;/p>
&lt;h2 id="缓存的设计的实践">缓存的设计的实践&lt;/h2>
&lt;h3 id="分级缓存">分级缓存&lt;/h3>
&lt;p>为了不让某一接口或者微服务的缓存失效导致其他接口或服务的并发量暴增，就要针对不同来源（数据库的表、接口等）的数据做分级缓存。比如用户在一次查询中涉及到“附近可预约门店”的查询、“活动期间不同日期剩余库存”的查询、“已预约数量“的查询，这三种查询逐层依赖后边的查询结果。&lt;/p>
&lt;p>假设如果只针对库存数量做缓存，一旦这部分缓存失效，那么“附近可预约门店”的查询就会直接访问数据库查询全部门店的剩余库存来确定哪个门店可以预约。这样就导致查询库存的接口并发量骤增。所以&lt;strong>分级缓存一定程度上缓解了缓存雪崩的问题&lt;/strong>。&lt;/p>
&lt;h3 id="自动化测试-api-参数合法性">自动化测试 API 参数合法性&lt;/h3>
&lt;p>我们的 QA 通常会写自动化脚本对后端 API 做定期的扫描，检查哪些接口的数据输入、输出有不合法的类型或是数值范围。除了巩固系统的健壮性，还能帮助缓存系统抵御&lt;strong>缓存穿透&lt;/strong>的风险。&lt;/p></description></item><item><title>用 Notion 实践卡片盒笔记法</title><link>https://sund.site/posts/2020/2020-12-12_notion-as-zettelkasten/</link><pubDate>Sat, 12 Dec 2020 22:42:53 +0800</pubDate><guid>https://sund.site/posts/2020/2020-12-12_notion-as-zettelkasten/</guid><description>&lt;p>今天给大家介绍一种整理和回顾碎片知识的方法——卡片盒笔记法。&lt;/p>
&lt;p>应该不少人都读过少数派作者玉树芝兰老师写的&lt;a href="https://sspai.com/post/59109">关于卡片盒笔记法的文章&lt;/a>。&lt;a href="https://pmthinking.com/">产品沉思录&lt;/a>的主理人少楠也写过很多相关的内容，最近他们还出了一个工具（Flomo - 浮墨笔记）也是基于这套方法论的。&lt;/p>
&lt;p>在这篇文章中，我会结合自己用 Notion 的经验，分享一下我如何用 Notion 做卡片笔记。&lt;/p>
&lt;p>本文参考了 &lt;a href="https://www.youtube.com/channel/UC66w1T4oMv66Jn1LR5CW2yg">Youtube 频道 Mukul Khanna&lt;/a> 关于 Notion 的一系列使用方法。&lt;/p>
&lt;h2 id="什么是卡片盒笔记法">什么是卡片盒笔记法&lt;/h2>
&lt;p>卡片盒笔记法（Zettelkasten）是一种将零散的想法、笔记和文献，通过编号、引用、索引等方式彼此关联起来，形成知识网络并提取有效信息的方法。其著名使用者——社会学家 Niklas Luhmann 一生创建了 9 万多张索引卡片，发布了 70 多本专著和 400 多篇学术论文。&lt;/p>
&lt;p>卡片盒笔记法可以类比为人类大脑记忆和归纳知识的回路。&lt;/p>
&lt;p>人类大脑有两种思维模式——专注和发散。&lt;/p>
&lt;p>&lt;strong>我门通常学习某一学科知识时使用的是专注模式——从一个知识点引申到相关的知识点，像串糖葫芦一样把一系列知识点串联起来形成一套知识体系&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>在另一些情况下，如艺术创作、技术创新等，我们的大脑会切换为发散模式——大脑在在一些关联但不同领域的知识间来回跳跃，形成一种全新的思考路径&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/notion-zenttle/1.jpeg" alt="">&lt;/p>
&lt;p>此时此刻，我为了将分散在不同笔记中零散的知识点关联起来形成这篇大家看到的文章，就需要同时借助两种模式，找到不同网站、文献间相关的内容，把他们组织起来。&lt;/p>
&lt;p>相对应的，卡片盒笔记法有两种关联笔记的方式，「顺序」和「引用」：&lt;/p>
&lt;p>&lt;strong>当我们在专注模式下阅读一本书或一篇文献时，我们可以把瞬间的想法记录在笔记中，按顺序（比如按章节）把若干笔记关联起来&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>而当我们在记录笔记过程中想到相关的内容在另一篇文献中也出现过，那么我们可以在笔记中用引用的方式把另一篇笔记内容和这篇内容做关联&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/notion-zenttle/2.jpeg" alt="">&lt;/p>
&lt;p>这样一篇笔记（卡片盒笔记法里的「卡片」），就有了两条途径来回顾它——&lt;strong>顺序阅读和延伸阅读&lt;/strong>。例如，一段时间后，我们想把这段时间的学习心得梳理出来归纳成一篇文章，我们就可以先以某一篇笔记为起始点，顺序读下面的笔记卡片，读到感兴趣的内容再看看它关联的那些卡片是否可以作为素材。以此类推，从一片知识的网络中抽丝剥茧，抽象出一种独特的脉络。当然，这些卡片还可以和其他卡片组合，形成另一种视角。这一套卡片构成的卡片盒，就是一套不断碰撞出新想法的数据库。&lt;/p>
&lt;h2 id="notion-为什么适合做卡片盒笔记法">Notion 为什么适合做卡片盒笔记法&lt;/h2>
&lt;p>Notion 在前一段时间更新了 Backlinks （反向链接）功能，这一功能的推出，把 Notion 和新晋的几款网状知识管理工具（Roam Search、Obsidian）的差异大大缩小，成为了做卡片盒笔记法的合适工具。相对于专注做卡片笔记的软件来说，Notion 的优势是更加灵活的配置和用途广泛的页面元素。&lt;/p>
&lt;h2 id="用-notion-实践卡片盒笔记法">用 Notion 实践卡片盒笔记法&lt;/h2>
&lt;p>我们首先脱离 Notion 这个软件，看看通常情况下一张卡片由哪些部分组成。下图是来自 &lt;a href="https://zettelkasten.de/introduction/">Introduction to the Zettelkasten&lt;/a> 文章的配图，呈现了一张卡片的样子：&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/notion-zenttle/3.jpeg" alt="">&lt;/p>
&lt;ul>
&lt;li>标题。包含一个唯一编号的标题，编号的作用是在其他笔记中可以方便引用该笔记，而不用担心笔记的标题发生变化使引用失效&lt;/li>
&lt;li>标签。方便回顾笔记时对某一类内容做整理归纳&lt;/li>
&lt;li>正文。笔记正文是一个想法或是一个知识点的总结。一定是用自己的话来归纳。可以引用其他笔记的编号或是参考文献的地址来配合内容展现&lt;/li>
&lt;li>参考文献。结尾部分是这篇笔记卡片是由哪些文献引申而来的&lt;/li>
&lt;/ul>
&lt;p>由此可见，卡片盒笔记法中的「卡片」是通过&lt;/p>
&lt;ol>
&lt;li>引用卡片编号，来关联其他卡片&lt;/li>
&lt;li>引用参考文献，来关联外部文献&lt;/li>
&lt;/ol>
&lt;p>下面回到 Notion 这个工具，我们一步步来搭建卡片盒笔记法。&lt;/p>
&lt;h3 id="搭建文献库---零散知识的数据库">搭建文献库 - 零散知识的数据库&lt;/h3>
&lt;p>所谓巧妇难为无米之炊，我们做笔记的第一步就是搭建文献资料库，这是一切笔记的源头，有点像数据工程里的「贴源数据层」，文献库是为了让互联网上经常失效的文章有个备份的好地方，同时你也可以在文献库里对文章进行划线、高亮和备注。&lt;/p></description></item><item><title>职业生涯说明书</title><link>https://sund.site/posts/2020/2020-6-6_career_strategies/</link><pubDate>Sat, 06 Jun 2020 19:30:43 +0800</pubDate><guid>https://sund.site/posts/2020/2020-6-6_career_strategies/</guid><description>&lt;p>对于大部分人来说，工作贯穿一生，工作对于人的健康、幸福感都发挥着决定性作用。&lt;/p>
&lt;p>今天的话题就是关于如何规划职业生涯。&lt;/p>
&lt;p>这次话题的起因是听了 Rio 和黄海主播的 Podcast&lt;a href="https://crazy.capital/44">《疯投圈》的一期节目&lt;/a>，里面提到一本职业规划的书——&lt;a href="https://book.douban.com/subject/27609489/">《远见》&lt;/a>。作者&lt;a href="https://book.douban.com/subject_search?search_text=%E5%B8%83%E8%B5%96%E6%81%A9%C2%B7%E8%B4%B9%E7%91%9F%E6%96%AF%E9%80%9A%E8%B1%AA">布赖恩·费瑟斯通豪&lt;/a>是市场营销方面的大师，他主张对待职业生涯要看长远，普通人一生中绝大部分财富是在 40 岁之后积累的，所以年轻时对财富的忧虑往往是过度的，要对职业生涯做一个长达 45 年的分阶段职业规划，保持积累可持续的职场燃料。&lt;/p>
&lt;p>《远见》整本书都在围绕两个主题：&lt;/p>
&lt;ol>
&lt;li>寻找助推职业发展的「职场燃料」&lt;/li>
&lt;li>在职业的不同阶段，如何给自己清晰的定位&lt;/li>
&lt;/ol>
&lt;h2 id="积累职业生涯的三大职场燃料">积累职业生涯的三大职场燃料&lt;/h2>
&lt;p>所谓职场燃料，即&lt;/p>
&lt;ul>
&lt;li>可迁移的技能&lt;/li>
&lt;li>有意义的经验&lt;/li>
&lt;li>持久的关系&lt;/li>
&lt;/ul>
&lt;p>相比于即学即用的职业技能，这三大燃料往往是在漫长的工作经历中逐渐获取的。聪明的职业发展策略是，在整个职业生涯中持续积累、更新职场燃料，同时精明地消费它们。&lt;/p>
&lt;p>例如，当我们想要跳槽到下一家公司时，除了福利待遇，最看重的是什么呢？很多人会说「能不能学到东西」。其实这是非常模糊的概念，学到什么，通过什么学？这些问题决定了一份工作是否成为你职业生涯的助推器。&lt;/p>
&lt;h3 id="可迁移技能我应该从工作中学到什么">可迁移技能。我应该从工作中学到什么&lt;/h3>
&lt;blockquote>
&lt;p>（它）不仅是帮助你完成眼前工作的技术知识和行业术语，而且是当你从一个工作换到另一个工作，从一家公司换到另一家公司，甚至是从一个行业换到另一个行业时都能依靠的能力和基础。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>可迁移技能不光是指那些领域知识或者技术壁垒，更是一些通用的社会技能&lt;/strong>，例如：&lt;/p>
&lt;ul>
&lt;li>解决问题能力&lt;/li>
&lt;li>沟通能力&lt;/li>
&lt;li>人才吸引力&lt;/li>
&lt;li>寻求帮助和帮助他人的能力&lt;/li>
&lt;li>理解和连接他人情绪状态的能力&lt;/li>
&lt;/ul>
&lt;p>这些能力往往不存在于特定的公司或是领域。可迁移技能中的**大部分真正重要的能力，并不需要反复跳槽来获取。**如何尽可能获得能力的提升呢？布赖恩认为，关键在于开放性的心态。如果你能多一些耐心，通常就能在一家公司里获得丰富的经验。&lt;/p>
&lt;p>你可以试着用一张纸，把自己的可迁移技能列出来，审视一下，哪些是随着行业发展逐渐消失的？哪些会在未来持续提供你帮助的？你是否在积累这些技能？&lt;/p>
&lt;h3 id="有意义的经验我的工作是否有价值">有意义的经验。我的工作是否有价值&lt;/h3>
&lt;blockquote>
&lt;p>自信心必须建立在有市场竞争力的事情上面。&lt;/p>
&lt;/blockquote>
&lt;p>社交网络上总看到类似这样的职场段子——「离职无非两个原因：嫌钱少；干得不高兴」。用钱和高兴程度来衡量工作的价值还远远不够。&lt;/p>
&lt;p>&lt;strong>评估当前工作是否对我们有价值，可以通过 4 个黄金问题&lt;/strong>：&lt;/p>
&lt;p>1．我是否正在&lt;strong>学习&lt;/strong>和成长？
2．我是否正在对某些人、现在的公司，乃至整个社会拥有&lt;strong>影响力&lt;/strong>
3．我体验到&lt;strong>乐趣&lt;/strong>了吗？
4．我是否得到了适当的&lt;strong>奖励&lt;/strong>，并创造了经济价值？&lt;/p>
&lt;p>这四个方面分别对应了学习、影响力、乐趣、奖励。&lt;/p>
&lt;p>学习决定了你是否在专业领域保持成长；影响力代表你对他人带来的益处，这会从多方面影响你的人际关系和发展机会；乐趣则是持续投入精力和从工作中获得幸福感的源动力；奖励则不光是薪水，还有各种福利、时间、补贴等因素。&lt;/p>
&lt;p>根据当下你的感受，给这四方面分别赋予一定权重（一个百分比），假如你更看重学习和乐趣，那么就给他们更高的权重，同时降低另外两项的权重。然后给当前工作的状态打出评分，10 分满分，最后用权重乘以评分得到每一项的职业价值分：&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/career-strategies/1.jpeg" alt="">&lt;/p>
&lt;p>根据作者布赖恩的经验，如果总分在 700 分以上，那么你的工作就算非常有价值了。&lt;/p>
&lt;p>表格中的权重可以每年根据自己的感受进行调整。最重要的是，不要单纯把金钱和干得高兴作为决定工作价值的因素。影响力往往是人们最容易忽略的价值，年轻阶段积累的影响力，往往会在职业生涯的后半段起到决定性作用。&lt;/p>
&lt;h2 id="持久的关系">持久的关系&lt;/h2>
&lt;blockquote>
&lt;p>人脉关系网的构建者的心态是交易性的，他们在追求人际关系时只考虑其他人能为他们做什么。而人际关系的构建者会首先尝试帮助别人，他们不会有所保留。&lt;/p>
&lt;/blockquote>
&lt;p>很多教你如何「积累人脉」的书，骨子里都是在教你「虚伪」。布赖恩认为，&lt;strong>真正获得良好人际关系的诀窍在于不索取回报的付出&lt;/strong>。根据研究，付出者在利他性、责任心、社会正义和同情心方面表现的更加突出，往往跻身杰出和最幸福行列的机会也比别人大得多。&lt;/p>
&lt;p>我们总觉得社会关系要讲究「互利」，其实互利的本质就是「利他」。回报往往是非即时的，总要在一方面作出让步，才能在另一方面获得回报。&lt;/p>
&lt;p>「向他人提供帮助」的能力也是强大的可迁移技能，它的重要性甚至高于「向他人寻求帮助」的能力。&lt;/p>
&lt;p>然而，根据&lt;a href="https://zh.wikipedia.org/zh-hans/%E9%82%93%E5%B7%B4%E6%95%B0">邓巴数理论&lt;/a>，一个人能够同时保持密切关系的人数上限是 150 人。&lt;/p>
&lt;p>所以那些微信躺着上千好友的社交大咖，是把朋友当作交易性的「人脉」还是良好的「人际关系」？&lt;/p>
&lt;p>布赖恩把一个人的人际关系分为 5 层，数量上从多到少，依次是：&lt;/p>
&lt;ul>
&lt;li>通信录里的&lt;strong>联系人&lt;/strong>&lt;/li>
&lt;li>拥有特殊知识、权力的&lt;strong>专家团&lt;/strong>&lt;/li>
&lt;li>在公司里对你有决定性影响的 5 到 10 个&lt;strong>关键同事&lt;/strong>&lt;/li>
&lt;li>提建议、拥护你、激励你的&lt;strong>支持者（导师、帮手）&lt;/strong>&lt;/li>
&lt;li>你&lt;strong>自己&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>他们构成了支撑你职业生涯的金字塔。&lt;/p></description></item><item><title>译文：重建世界2.0</title><link>https://sund.site/posts/2020/2020-5-10_build_world_2_0/</link><pubDate>Sun, 10 May 2020 20:22:53 +0800</pubDate><guid>https://sund.site/posts/2020/2020-5-10_build_world_2_0/</guid><description>&lt;p>这是一篇投资人&lt;a href="https://twitter.com/danielgross">Daniel Gross&lt;/a>发表在自己博客的文章，讨论了新冠疫情后期的世界如何进入 2.0 新模式，以及有哪些机会和挑战。我把它翻译过来，希望大家也能从中获得启发。&lt;/p>
&lt;h1 id="重建世界-20">重建世界 2.0&lt;/h1>
&lt;p>未来几周，因疫情导致的封锁将逐步放开，当我们再一次打开房门，迎接我们的将是世界 2.0。在这个新版本的世界里，一切会看起来完全不同，这种「不同」会成为培育新一代开拓者们的土壤。&lt;/p>
&lt;p>开始话题之前，理解下面的原则可能会帮助我们思考：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>衰退不可避免&lt;/strong>。在用尽了所有维持经济运转的手段之后，洪水将会到来。在 30%的失业率下，我们无法保持同样的经济增长了。&lt;/li>
&lt;li>&lt;strong>疫苗何时到来还不确定&lt;/strong>。就像普通感冒一样，没有特效药。在科学家研制出可行的药物之前，我们将被迫改变生活习惯以适应这种状态。&lt;/li>
&lt;li>&lt;strong>大自然迫使我们进行一场规模空前的社会实验&lt;/strong>。很多企业在几周内就全部远程办公了，一些地区觉得远程办公是一种巨大的经济负担。但是很多人终会明白，远程工作虽然不是特别好，但在这个背景下，仍然是一个好办法。&lt;/li>
&lt;li>如果世界 2.0 同样的保持平等、优越、法理……那一切行为都会产生永久性的改变。（译者：即永久性替代现有秩序）&lt;/li>
&lt;/ul>
&lt;p>如果你的想法足够超前，你一定能在这场游戏里获得有价值的东西：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>握手已死&lt;/strong>。疫情首先改变了家庭内部的习惯，然后，陌生人之间呢？&lt;/li>
&lt;li>&lt;strong>电影院的消亡&lt;/strong>。电影会在网络上重生。影院已经无力承担更少的座位了，即便在病毒爆发之前很多影院也已经濒临破产。已经有太多可以替代电影院的选择了。&lt;/li>
&lt;li>&lt;strong>暂停音乐会，在网上开&lt;/strong>。再次举办这种大型活动遥遥无期，目前还没有可替代的方案。我敢打赌，这种情况将会反复发生：再一次爆发疫情，再一次停止活动。&lt;/li>
&lt;li>&lt;strong>城市的（暂时性）终结&lt;/strong>。疫苗出现之前，越来越多人会搬去郊区。一些房地产经纪人告诉我旧金山公寓的市场在降温，同时郊区的房子却渐渐在升值。&lt;/li>
&lt;li>&lt;strong>信任&lt;/strong>。突然之间，所有人都变成了潜在病毒携带者，当你在大街看到一个陌生人时，内心是什么感觉？病毒增大了人与人的距离，减少了彼此的信任。&lt;/li>
&lt;li>&lt;strong>商务旅行变成了 Zoom 会议&lt;/strong>。部分公司发觉，可以通过远程会议完成谈判。我想，在经济衰退的市场环境下，很多管理者为了降低成本，会退而求其次。旅行的开支将会被大幅降低。&lt;/li>
&lt;li>&lt;strong>个人旅行减少&lt;/strong>。原因可能是个人经济能力的下降，而不是恐慌。&lt;/li>
&lt;li>&lt;strong>数字企业活动&lt;/strong>。过去几周我已经见识到很多在网上进行的商业活动。其中，很多经理人发现在一些项目中使用 Zoom（远程会议软件）已经“足够好用”了，并开始着手削减此前在这方面的其他投入。如果这一次的网络商业活动实践产生了积极的作用，那么对于那些利润直接相关的企业部门未来采纳网上商业活动模式将至关重要。&lt;/li>
&lt;li>&lt;strong>「集体农场式」人事管理&lt;/strong>。如果未来在不同地区发生第二波第三波疫情，可以想象到，人们会共同参与社区管理，构筑起新的信任关系。类似室友和家庭之间的有机结合，这种结合越来越广泛。未来的公司甚至会鼓励同事之间共同隔离，以此提高返工管理流程的效率。&lt;/li>
&lt;li>&lt;strong>开放办公室会变得越来越不受欢迎&lt;/strong>。不但因为开放办公环境的人员密度不适合保持社交距离，而且人们经历了在家办公之后，会渐渐意识到一扇可以关上的门是多么重要。&lt;/li>
&lt;li>&lt;strong>公共交通被看作不安全&lt;/strong>。世界 2.0 不喜欢高密度的人口。还有什么比高峰时段的地铁更高密度呢？城市交通对一个城市的发展至关重要，要么我们会看到严厉的管控措施，要么就是像纽约那样大规模感染之后群体免疫。总之对 Uber（等共享出行）来说可能是一个福音。&lt;/li>
&lt;li>&lt;strong>餐馆和数字餐馆&lt;/strong>。酒馆文化存在了几千年，所以它不会消失。但问题是，如何低密度地运营这项业务，以适应新时代的社交距离。由于家庭餐馆的模式并不理想，所以这个领域是我认为会出现新产品和创造力的地方。&lt;/li>
&lt;li>&lt;strong>学校会加强网络教学&lt;/strong>。父母顺理成章地会要求年轻人回到学校。没有什么比大学校园更好的生活环境了：那里聚集着一群对病毒免疫的年轻人，并且远离了老年人。也许会有新的数字教育替代品出现，但是用 Zoom 远程上课肯定不是最好的办法。&lt;/li>
&lt;li>&lt;strong>在线体育 2.0&lt;/strong>。类似餐馆，在线体育也有很多上升空间。想象一下，在没有观众和球迷的体育场比赛，将会对运动员的生理水平造成什么影响。这很有趣。&lt;/li>
&lt;/ul>
&lt;p>这将是人类有史以来最不稳定的时代。一夜之间全世界的人们都改变了行为方式。这为创业营造了真正的机会，那些能够快速适应时代需要的人，将比其他人更好的发展。&lt;/p>
&lt;p>对于每一个新出现的行为模式，都会有一家新的创业公司出现填补空缺。假如人们想要音乐会，大自然不允许，那么替代方案是什么？如果酒吧餐馆因为社交距离的原因而无法维持，那么网络上酒吧餐馆是什么样呢？新的 Zoom 应该是什么样子，一个企业版的 Snapchat 如何引领销售业绩呢？正如 Nat Friedman 所言，“视频会议是一架不需要马的马车“。&lt;/p>
&lt;p>值得期待的是，在新冠疫情把我们从美梦中唤醒的同时，世界 1.0 正在衰退，大自然打破了常规，我们必须重新建立秩序。&lt;/p>
&lt;p>“IT&amp;rsquo;S TIME TO BUILD!”&lt;/p>
&lt;p>原文链接：&lt;a href="https://dcgross.com/building-in-world-2-0/">https://dcgross.com/building-in-world-2-0/&lt;/a>&lt;/p></description></item><item><title>看懂电影《爱尔兰人》</title><link>https://sund.site/posts/2020/2020-3-8_the_irishman/</link><pubDate>Sun, 08 Mar 2020 17:19:49 +0800</pubDate><guid>https://sund.site/posts/2020/2020-3-8_the_irishman/</guid><description>&lt;p>&lt;em>友情提示，本文有轻度剧透，请慎重阅读&lt;/em>。&lt;/p>
&lt;p>说到美国，大家都知道它是个移民国家。美国的爱尔兰裔，占到了总人口的 10%以上（&lt;a href="https://zh.wikipedia.org/zh-hant/%E6%84%9B%E7%88%BE%E8%98%AD%E8%A3%94%E7%BE%8E%E5%9C%8B%E4%BA%BA">数据来源&lt;/a>），仅次于德国裔，排在第二位（2000 年最新数据显示非洲裔已经超过爱尔兰裔成为美国第二大族群）。爱尔兰裔美国人总数甚至超过了爱尔兰本土的人口数。美国的爱尔兰后裔为何如此之多？这就要从 18 世纪的爱尔兰说起。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/the-irishman/1.jpg" alt="美国人口种族分布">&lt;/p>
&lt;p>18 世纪末期，英国彻底征服了爱尔兰，使之成为大英帝国的一部分。英国人剥夺了爱尔兰人世代赖以为生的土地，令其在自己的国家成为二等公民。&lt;/p>
&lt;p>爱尔兰人连同土地一起失去的，还有信仰。当时的英国以信仰新教为主，而爱尔兰人普遍信仰天主教。为了打击爱尔兰的天主教势力，同时也为了镇压爱尔兰叛乱，英国人不允许爱尔兰人组织天主教相关的活动，并且法律还规定爱尔兰人既无选举权，也不能充任公职、律师、教师等职业。&lt;/p>
&lt;p>如此严厉的律法，使得爱尔兰人只能从事低级的体力劳动，过着极其贫困的生活。&lt;/p>
&lt;p>政治家埃德蒙·伯克这样形容英国针对爱尔兰的法律（来源：&lt;a href="https://book.douban.com/subject/6892579//">《美国种族简史》&lt;/a>）：&lt;/p>
&lt;blockquote>
&lt;p>自古以来，人类凭借着邪念所能制造出最巧妙的机器，用以使百姓堕落，并进而败坏人性本身。&lt;/p>
&lt;/blockquote>
&lt;p>但上帝给爱尔兰人关闭一扇门的同时，也打开了一扇窗。为了生存和信仰，爱尔兰人在极端严酷的环境下，一边躲避迫害，一边在天主教的精神支撑下抱团取暖。久而久之竟然解锁了他们的种族天赋——强大的地下组织能力。&lt;/p>
&lt;p>19 世纪 40 年代，爱尔兰爆发了大饥荒，上百万爱尔兰人死于饥饿和瘟疫。英国议会对爱尔兰人的漠视，使得爱尔兰土地上成千上万的民众，挣扎着自求生路。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/the-irishman/2.jpg" alt="逃难的爱尔兰人">&lt;/p>
&lt;p>当时的商船从北美出发到英国，需要运载大量的农产品，但是从英国返回美国，则以运输体积较小的工业品为主，这就造成了大量船舱空间没有被利用。于是越来越多的底层爱尔兰人，借助远在美洲的爱尔兰同胞们赞助的钱财，购买这种廉价商船的「蹲票」，挤在狭小的商船货仓里前往北美洲。&lt;/p>
&lt;p>3 个月的海上航行漫长而痛苦，无数爱尔兰人在船舱里因为缺水、疾病、饥饿而死去。活下来的少数人终于踏上了向往的新大陆。&lt;/p>
&lt;p>初到美国的爱尔兰人普遍身无分文，也只能从事低级的体力劳动维生，美国的矿工、铁路工人大都是这些人组成，比起南方种植园的黑人奴隶，爱尔兰人的生存境况更差，累死、饿死、工伤死亡的比比皆是。但是多亏了爱尔兰民族的种族天赋：强大的地下工作组织能力！很快，爱尔兰人主导的工人团体相继成立，1861 年的美国矿工协会，1903 年的国际妇女工会联盟，1905 年的世界产业工人联盟……一个个由爱尔兰裔主导，旨在团结底层劳工的工会组织成为了美国重要的政治势力。&lt;/p>
&lt;p>时代成就了爱尔兰人。电影中，吉米·霍法创建的美国卡车司机协会也是这样的一个工会组织。&lt;/p>
&lt;p>看过《美国往事》的同学应该记得，美国在 1920 年代颁布了著名的禁酒令，在禁运私酒的这段时间，以爱尔兰裔和意大利裔为主的美国黑帮在这一时期通过地下产业迅速壮大。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/the-irishman/3.jpg" alt="《美国往事》">&lt;/p>
&lt;p>黑帮控制的地下私酒产业链蓬勃发展，但是这些违法生产的私酒需要大量卡车司机来协助运输。于是，吉米·霍法领导的卡车司机协会就在那段时期和美国黑帮一起，把持着美国的利益链条。&lt;/p>
&lt;p>影片中的男主角弗兰克.希兰就是那个时期成为了一名卡车司机，并结识了黑帮大佬罗素和卡车司机协会的吉米，成为了两边势力的中间人。&lt;/p>
&lt;p>同一时期，违法私酒产业也让另一个对美国影响深远的家族默默崛起，那就是靠着贩卖私酒大赚特赚的&lt;a href="https://zh.wikipedia.org/zh-hant/%E8%82%AF%E5%B0%BC%E8%BF%AA%E5%AE%B6%E6%97%8F">肯尼迪家族&lt;/a>。肯尼迪家族也是爱尔兰后裔。有赖于黑帮势力的支持，约翰·肯尼迪在 1961 年成功就任美国总统。但是肯尼迪一上任就跳反了，把矛头指向了黑帮和工会，联合司法部长的弟弟罗伯特·肯尼迪一起，打击有组织犯罪和地下产业。&lt;/p>
&lt;p>电影里，吉米每次提到肯尼迪，就恨得暴跳如雷，把对方家里女性长辈都问候一遍。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/the-irishman/4.jpg" alt="">&lt;/p>
&lt;p>最终，通过打击犯罪赢得了民众支持的肯尼迪，却深深得罪了爱尔兰人的两大势力。在一次车队游行时，一颗子弹击中了座驾上的肯尼迪头部，瞬间，他的脑浆以放射状飞溅到几十米内的扇形区域，在电视上目睹了这一刻的美国老百姓都惊掉了下巴。与此同时，阴影中的某些人却微微翘起了嘴角，举起了酒杯。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/the-irishman/5.jpg" alt="肯尼迪遇刺现场">&lt;/p>
&lt;p>随后的几年间，包括扣下板机的凶手和司法部长罗伯特·肯尼迪在内 100 多个证人，相继离奇死亡。这次总统遇刺案成了美国历史上最大的谜团和丑闻，也让调查这起案件的官员受到了强烈质疑。&lt;/p>
&lt;p>电影《爱尔兰人》中暗示，肯尼迪的死和吉米·霍法有着直接的关系。可惜吉米还没高兴多久，自己就因被指控行贿罪而逮捕入狱。&lt;/p>
&lt;p>4 年后，吉米出狱，黑帮和工会的格局已经发生了天翻地覆的变化。曾经呼风唤雨的工会已经沦为了黑帮的附庸，这让吉米相当郁闷。在跪舔黑帮大佬和重振工会雄风之间，吉米毅然选择了后者。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/the-irishman/6.jpg" alt="">&lt;/p>
&lt;p>此时工会已经不复当年的威风，此时的黑帮也已不把吉米放在眼里。吉米和黑帮闹掰之后，身兼工会和黑帮双重身份的男主角弗兰克感到无所适从，一边是自己最好的朋友吉米，一边是恩重如山的老大罗素。最终他会选择站在哪一边呢？&lt;/p>
&lt;p>结局我就不剧透了。感兴趣的朋友请自行去片中寻找答案。&lt;/p>
&lt;p>这部电影在讲述工会和黑帮的恩怨纠葛背后，另一层深意是什么呢？那就是影片的片名：爱尔兰人。&lt;/p>
&lt;p>那是一群在自己的土地被迫害的爱尔兰人，为了寻找新生活而相互扶持，辗转抵达大洋彼岸的新大陆；而又是这样一群爱尔兰族裔，最终为了自己的利益勾心斗角，互相杀伐。其中人性的摇摆，令故事充满了戏剧的张力，成就了这部电影。&lt;/p>
&lt;p>以上，就是我对这部电影的理解。&lt;/p></description></item><item><title>番茄工作法和Keep是绝配</title><link>https://sund.site/posts/2020/2020-2-17_wfh/</link><pubDate>Mon, 17 Feb 2020 20:43:43 +0800</pubDate><guid>https://sund.site/posts/2020/2020-2-17_wfh/</guid><description>&lt;h2 id="要有路线图">要有路线图&lt;/h2>
&lt;p>平时在办公室里，大家可以面对面沟通，有问题、回复都可以迅速得到反馈，好像一个走正步的方队，每个人的节奏都可以从余光中确认。但是在家办公，这种节奏就乱掉了。&lt;/p>
&lt;p>我最近正好转到数据团队做一些数据工程的工作，急需恶补很多知识。我在网上搜到几张数据工程师知识图谱和一些&lt;a href="https://www.coursera.org/specializations/gcp-data-machine-learning">认证课程&lt;/a>。按照自己的能力，我规划了学习路线，并且用 Notion 记录下来。这份路线图里包含了一些书籍和网络课程，能够帮我快速上手实践，以备在复工后快速进入状态。&lt;/p>
&lt;p>&lt;img src="https://tva1.sinaimg.cn/large/4a41845fly1gbzm5fb4wrj21go1327oi.jpg" alt="https://tva1.sinaimg.cn/large/4a41845fly1gbzm5fb4wrj21go1327oi.jpg">&lt;/p>
&lt;h2 id="寻找免费的学习资源">寻找免费的学习资源&lt;/h2>
&lt;p>有了路线，就要去找学习资源，付费的电子书和网络教程很多，我想重点说说那些免费资源（抛开盗版不谈），比如著名的动物书出版商 O’Reilly 就有一大堆&lt;a href="https://www.oreilly.com/free/">免费的正版技术类电子书&lt;/a>可供下载。&lt;/p>
&lt;p>&lt;img src="https://tva1.sinaimg.cn/large/4a41845fly1gbzlq4t8fuj21is1681kx.jpg" alt="https://tva1.sinaimg.cn/large/4a41845fly1gbzlq4t8fuj21is1681kx.jpg">&lt;/p>
&lt;p>另外，&lt;strong>Youtube 上的教学视频质量也非常高&lt;/strong>，对于快速上手一种工具或是搭建开发环境非常有帮助。（随便一搜就有很多成套的教学视频，不乏官方教学视频，比如 Google Cloud Platform 提供了很多教学短片）&lt;/p>
&lt;p>&lt;img src="https://tva1.sinaimg.cn/large/4a41845fly1gbzlumpbuxj21de14m7mr.jpg" alt="https://tva1.sinaimg.cn/large/4a41845fly1gbzlumpbuxj21de14m7mr.jpg">&lt;/p>
&lt;p>我在 Youtube 还意外发现一些 &lt;a href="https://www.youtube.com/channel/UCFd-9jAfbuUjwDZjisOwv1w">健身 Youtuber&lt;/a> 们分享的健身教学视频，也非常适合闲暇时间提高姿势水平。&lt;/p>
&lt;h2 id="任务要和时间绑定">任务要和时间绑定&lt;/h2>
&lt;p>完成一个长计划的第一步，是拆解任务。工作中同事们总强调 Tasking （拆解任务）的重要性。要保证完成计划的质量，必须把计划按步骤拆解成可执行和回顾的小任务。相信喜欢折腾 GTD 之类效率工具的人很清楚其中的意义。但是&lt;strong>在没有约束的家庭环境里，光拆解任务可能还不够，更重要的是把任务和时间绑定，给自己一个记录时间的习惯&lt;/strong>。&lt;/p>
&lt;h3 id="不局限于工具的番茄工作法">不局限于工具的番茄工作法&lt;/h3>
&lt;p>番茄工作法固然好，但是市面上很少真正提高效率的工具。手机上的番茄工作法 App 唯一给我的教训就是增加了我拿起手机的次数。所以我最后矬子里拔大个，选了 Toggl 的 Mac 桌面版，它自带番茄时钟可以很好的兼顾时间记录和定时提醒功能。我还尝试用 NFC 贴纸提高我记录时间的效率（主要记录做饭之类碎片的时间）。至于如何使用 NFC 贴纸，参考这篇《&lt;a href="https://sspai.com/post/57394">5 个实用生活场景，iPhone 上的 NFC 还能这么用》&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://tva1.sinaimg.cn/large/4a41845fly1gbzmdw563kj20u01400uv.jpg" alt="https://tva1.sinaimg.cn/large/4a41845fly1gbzmdw563kj20u01400uv.jpg">&lt;/p>
&lt;h2 id="利用番茄工作法的间歇时间做-4-分钟锻炼">利用番茄工作法的间歇时间做 4 分钟锻炼&lt;/h2>
&lt;p>番茄工作法每隔 25 分钟会有 5 分钟的休息时间，我通常利用这个间隙来做一组俯卧撑、平板支撑或者深蹲，Keep 上有很多 4 分钟的燃脂训练，拿来配合番茄工作法使用效果更佳。&lt;/p>
&lt;p>&lt;img src="https://tva1.sinaimg.cn/large/4a41845fly1gbzmkewpd0j20n01ds77x.jpg" alt="https://tva1.sinaimg.cn/large/4a41845fly1gbzmkewpd0j20n01ds77x.jpg">&lt;/p>
&lt;h3 id="把平时忽略的碎片时间统计出来">把平时忽略的碎片时间统计出来&lt;/h3>
&lt;p>发呆拖延的时间、做饭的时间，这些工作忙时不太关心的碎片时间，我利用这个大长假把他们统计了一下，我在去年年底制定了一个「2020 年告别外卖」的计划。因为平时工作忙，想脱离外卖自己做饭，就要格外注意挑选制作时间短，食材储存容易的饮食方案。我也在 Notion 里新建了一个项目，来记录做饭的时间、各种食物的优缺点（有点强迫症）。待完成这个计划时我也会整理出来。&lt;/p>
&lt;p>&lt;img src="https://tva1.sinaimg.cn/large/4a41845fly1gbzmwbctjjj20n00wu3zj.jpg" alt="https://tva1.sinaimg.cn/large/4a41845fly1gbzmwbctjjj20n00wu3zj.jpg">&lt;/p>
&lt;h3 id="给娱乐时间限量">给娱乐时间限量&lt;/h3>
&lt;p>我平时很少看电视，最近又把吃灰半年的《歧路旅人》拿出来玩，我给自己规定的是每天必须天黑才能打开游戏机，而且玩到 20%电量之前必须关机休息。这样每天娱乐时间就不会超过 2 个小时。&lt;/p>
&lt;p>最近奥斯卡颁奖后，一批电影片单也出来了，不如趁这段时间把 2019 年错过的好电影也补一补。&lt;/p></description></item><item><title>谣言的利与弊</title><link>https://sund.site/posts/2020/2020-1-27_rumour/</link><pubDate>Mon, 27 Jan 2020 13:32:46 +0800</pubDate><guid>https://sund.site/posts/2020/2020-1-27_rumour/</guid><description>&lt;p>Ted Chiang（姜峯楠）的小说《双面真相》里有个主人公吉金基，他出生于部落，从小跟着欧洲殖民者学习写字，是部落里唯一识字的人。有一天欧洲殖民者要求多个部落必须按照血缘关系合并起来，以方便殖民管理。部落长老赛维认为自己的部落和临近的部落是同一个祖先，所以应该合并在一起，但是另一个部落却不同意这种说法。&lt;/p>
&lt;p>吉金基想到欧洲人最早来到这里时采访了当地许多老人，那些如今已故的部落老人想必知道自己的部落究竟是谁的后代吧。于是，吉金基跑去殖民者的营地找到了当年的记录，根据记载，长老赛维确实记错了自己的祖先。&lt;/p>
&lt;p>回到部落后，赛维却不同意吉金基的看法，他认为吉金基的头脑已经被欧洲人同化了。「&lt;strong>欧洲人只相信纸面上的文字，而不重视此时此刻部落里人们的感受。至于部落的祖先究竟是谁并不重要，重要的是当下的部落里同族们的共同利益」。&lt;/strong>&lt;/p>
&lt;p>Ted Chiang 在后记里说，人们在「书面文化」出现之前一直延续的是「口头文化」，比起书面文化更重视文字记录的事实本身，口头文化更重视「此时此刻人们的感受」，真相可以随时修改变化，以适应人们的情感需要。&lt;/p>
&lt;p>&lt;img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gbb1m6k8slj31fd0u01kx.jpg" alt="">&lt;/p>
&lt;p>谣言也是一种口头文化，他没有确凿依据，凭借人们口口相传。&lt;/p>
&lt;p>谣言承载了人们此时此刻的感受。把「不信谣，不传谣」当作一种正确的人，可能忽略了谣言的这一重作用：谣言是真相模糊环境的必要补充，是一群人，面对现实的头脑风暴。&lt;/p>
&lt;blockquote>
&lt;p>公众有权质疑、批驳任何报道乃至政府公告的真实性，公民发短信或者转发相关帖子，即使有不实之处，也应被视作自保或者行使监督权，政府部门只能用更加公开透明的信息来平息大家的忧虑，消除不实之言。 ——胡泳，《谣言，作为一种社会抗议》&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gbb1mwp2ohj31900u0x43.jpg" alt="">&lt;/p>
&lt;p>同样，&lt;a href="https://www.zhihu.com/pin/1204880834290987008">知乎用户 @韦易笑 的评论&lt;/a>：&lt;/p>
&lt;blockquote>
&lt;p>不传谣本身就是一个严重的传播学悖论，一条未经证实的信息，恰恰需要通过广泛传播、反复交叉比对，最终才能证实或者证伪，去伪存真，辨邪留正。所以未经证明的消息只能称为流言而不是谣言，除非有人故意造谣，这当然有罪，明知是谣言还传播当然也不该，但自己主官判断为真又无法证伪的话，传播无可厚非，因为大部分人只有能力证明自己专业领域内的流言是否是属实，对于专业领域外的流言，只有能力传播没有能力客观鉴别。如果严格要求所有人无法证明就不能传播的话，那么消息就无法通过充分交流比对而去伪存真，大家每天说话的内容也只是不断的重复 zf 通稿和砖家权威的发言，从而丧失任自我辨别的能力。&lt;/p>
&lt;/blockquote>
&lt;p>你还为「不造谣，不传谣」背书，可能就要提防自己是否过度依赖权威，丧失了亲自辨别真相的能力。&lt;/p></description></item><item><title>如何练习双拼输入法</title><link>https://sund.site/posts/2020/2020-1-19_xnheulpb/</link><pubDate>Sun, 19 Jan 2020 07:21:17 +0800</pubDate><guid>https://sund.site/posts/2020/2020-1-19_xnheulpb/</guid><description>&lt;h2 id="双拼输入法是什么">双拼输入法是什么？&lt;/h2>
&lt;p>「双拼输入法」类似于我们大多人使用的全拼输入法，也是一种基于汉语拼音的汉字输入方案。&lt;/p>
&lt;p>让我们先来复习一下小学的知识 😂，任何一个汉字都有对应的拼音，拼音由声母和韵母组成。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/shuangpin/1.jpg" alt="">&lt;/p>
&lt;p>声母除了&lt;code>zh&lt;/code>，&lt;code>sh&lt;/code>，&lt;code>ch&lt;/code>之外，都是由单个字母表示。例如「拼」字的声母&lt;code>p&lt;/code>。&lt;/p>
&lt;p>韵母通常由 1 到 4 个字母组成，例如拼字的韵母就是&lt;code>in&lt;/code>。&lt;/p>
&lt;p>通常大家用的全拼输入法，韵母部分要全部打出来（现代输入法通常可以智能联想，但是大多数情况下都需要你打出大部分字母），比如输入「拼」你需要打三个键&lt;code>p&lt;/code>，&lt;code>i&lt;/code>，&lt;code>n&lt;/code>。&lt;/p>
&lt;p>双拼输入法就是为了解决全拼输入法在输入韵母时低效率的问题。双拼的开发者试图把汉语拼音的全部韵母映射到键盘的所有按键上，这样每次输入一个汉字，只需要输入两个按键（声母+韵母）。&lt;/p>
&lt;p>例如，我把&lt;code>ing&lt;/code>映射到键盘的字母&lt;code>K&lt;/code>上，把&lt;code>ang&lt;/code>映射到字母&lt;code>H&lt;/code>上。输入「乒乓」时就是下面的效果。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/shuangpin/2.jpg" alt="">&lt;/p>
&lt;p>现在比较流行的双拼方案有很多，我选择了比较受大家青睐的小鹤双拼方案。它的键盘布局是下面这样的（初次看你可能会觉得不适……别急，读完这篇文章学起来就会很轻松）。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/shuangpin/3.jpg" alt="">&lt;/p>
&lt;h2 id="双拼输入法能提高打字效率吗">双拼输入法能提高打字效率吗？&lt;/h2>
&lt;p>学习之前我们通常有个疑问：这玩意真能提高打字效率？&lt;/p>
&lt;p>我带着这个疑问，找到了一个测试汉字打字速度的&lt;a href="https://dz.wubidz.cn/">网站&lt;/a>，我通过一个月的使用，对比了前后的输入速度，得出的答案让我确信写这篇文章能够帮助你通过双拼提高打字效率。（不要吐槽我每分钟字数太少，测速网站采用了古诗词作为输入，一定程度上屏蔽输入法智能联想的效果。你可以亲自去尝试一下 😛）&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/shuangpin/4.jpg" alt="">&lt;/p>
&lt;p>（KPM=每分钟按键次数，BPM=每分钟退格次数）&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/shuangpin/5.jpg" alt="">&lt;/p>
&lt;h2 id="开始学习小鹤双拼">开始学习小鹤双拼&lt;/h2>
&lt;p>学习知识之前，先了解它的原理会帮助我们更容易记忆它。理解原理看似是增加了额外的负担，但是死记硬背的知识往往难以形成结构化的记忆，很容易遗忘。&lt;/p>
&lt;p>学习小鹤双拼前，我们先要了解三件事：&lt;/p>
&lt;ul>
&lt;li>声母的按键规律&lt;/li>
&lt;li>韵母的按键规律&lt;/li>
&lt;li>键盘布局的规律&lt;/li>
&lt;/ul>
&lt;h2 id="声母的规律">声母的规律&lt;/h2>
&lt;p>前面提到，汉语拼音声母大多数是单个字母，除了三个特别的&lt;code>zh&lt;/code>，&lt;code>sh&lt;/code>，&lt;code>ch&lt;/code>。小鹤双拼和全拼一样，直接按字母键就可以输入对应的声母，那三个特别的声母映射到键盘的&lt;code>V&lt;/code>，&lt;code>U&lt;/code>，&lt;code>I&lt;/code>上。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/shuangpin/6.jpg" alt="">&lt;/p>
&lt;p>之所以映射成&lt;code>zh=V，sh=U，ch=I&lt;/code>，是考虑到两个因素：&lt;/p>
&lt;ul>
&lt;li>这三个字母（V，U，I）都没有对应声母&lt;/li>
&lt;li>这三个字母距离食指和中指都比较近&lt;/li>
&lt;/ul>
&lt;p>那有人要问了，为什么不把&lt;code>zh&lt;/code>放在&lt;code>Z&lt;/code>上，&lt;code>ch&lt;/code>放在&lt;code>C&lt;/code>上，&lt;code>sh&lt;/code>放在&lt;code>S&lt;/code>上，这样更好记忆呀？这是因为会造成输入的不一致性。比如&lt;code>O&lt;/code>对应的韵母是&lt;code>uo&lt;/code>，你输入了&lt;code>ZO&lt;/code>，那输入法就无法分辨你输入的是&lt;code>zhuo&lt;/code>（捉），还是&lt;code>zuo&lt;/code>（作）。如此一来就违背了双拼输入法一个汉字只要输入两个键的原则。&lt;/p>
&lt;p>&lt;strong>所以，声母部分，你只要记住，&lt;code>zh&lt;/code>，&lt;code>sh&lt;/code>，&lt;code>ch&lt;/code>，对应的是&lt;code>V&lt;/code>，&lt;code>U&lt;/code>，&lt;code>I&lt;/code>就可以了。其他和全拼一毛一样。&lt;/strong>&lt;/p>
&lt;h2 id="韵母的规律">韵母的规律&lt;/h2>
&lt;p>汉语拼音的韵母有一些很特殊，例如&lt;code>ua&lt;/code> 和&lt;code>ia&lt;/code>前边的声母是&lt;strong>互斥&lt;/strong>的。以&lt;code>jia&lt;/code>（加）为例，你肯定没听过&lt;code>jua&lt;/code>的组合（可能小岳岳除外 😂）。所以&lt;code>ua&lt;/code>和&lt;code>ia&lt;/code>前边的声母不可能是同一个字母，那么即使把这两个韵母放在同一个按键上，也不会出现输入汉字时的混淆。&lt;/p>
&lt;p>符合这种规律的韵母一共有 7 对，小鹤双拼的按键分布是下面这样的。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/shuangpin/7.jpg" alt="">&lt;/p>
&lt;p>&lt;strong>为了方便记忆，小鹤双拼让每个按键对应的声母和其中一个韵母能组合成有意义的汉字发音。所以你只需按口诀或文末提到的练习工具针对练习即可，其中需特殊训练的只有上面的 7 个按键。&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/shuangpin/8.jpg" alt="">&lt;/p>
&lt;p>有一些汉字没有声母（零声母），这种情况只要会全拼输入法就可以一秒解决：&lt;/p>
&lt;p>单字母韵母，如：  啊＝ aa  哦=oo  额=ee&lt;/p>
&lt;p>双字母韵母，如：  爱＝ ai  恩=en  欧=ou&lt;/p>
&lt;p>三字母韵母，零声母+韵母所在键，如：  昂＝ ah&lt;/p>
&lt;h2 id="键盘布局的规律">键盘布局的规律&lt;/h2>
&lt;p>一些不太常用的韵母，小鹤双拼的作者把它们放到了键盘的边边角角，例如&lt;code>iu&lt;/code>，&lt;code>ie&lt;/code>，&lt;code>ou&lt;/code>，我起初很容易忘记，偶尔用到也想不起这些韵母的位置。所以这三个特殊按键，我在键盘上用蓝色高亮标记起来。结合上文提到的特殊按键，这个键盘看起来就是这样三层结构：&lt;/p>
&lt;ul>
&lt;li>第一层是声母，其中特殊的（红色高亮）是&lt;code>V&lt;/code>，&lt;code>U&lt;/code>，&lt;code>I&lt;/code>&lt;/li>
&lt;li>第二层是韵母，其中特殊的（黄色高亮）是&lt;code>T&lt;/code>，&lt;code>O&lt;/code>，&lt;code>S&lt;/code>，&lt;code>K&lt;/code>，&lt;code>L&lt;/code>，&lt;code>X&lt;/code>，&lt;code>V&lt;/code>&lt;/li>
&lt;li>第三层是易忘按键（蓝色高亮），它们分别是&lt;code>Q&lt;/code>，&lt;code>P&lt;/code>，&lt;code>Z&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sund.site/images/shuangpin/9.jpg" alt="">&lt;/p></description></item><item><title>宁波见闻</title><link>https://sund.site/posts/2020/2020-1-5_ningbo/</link><pubDate>Sun, 05 Jan 2020 20:49:47 +0800</pubDate><guid>https://sund.site/posts/2020/2020-1-5_ningbo/</guid><description>&lt;h2 id="木匠的工具箱">木匠的工具箱&lt;/h2>
&lt;p>偶然在宁波博物馆发现一个箱子。这是木匠的工具箱，有点像很多格子的单肩包。外侧可以放几把不同尺寸的刨子，内侧用来放锯子和一些长柄的工具。下层的抽屉还可以放些锉刀、凿子之类的小物件。&lt;/p>
&lt;p>&lt;img src="https://tva1.sinaimg.cn/large/006tNbRwly1galvuygesgj31hc0u0he2.jpg" alt="">&lt;/p>
&lt;p>有了它，木匠就可以拎包上门。过去很多行业的手艺人都有一套这样的工具箱。木匠比较不同的是，这个箱子本身也是木制的，这个箱子就是他展示给客户的第一印象，箱子本身代表了木匠的能力和喜好。&lt;/p>
&lt;p>现在搞技术的人，也是手艺人，但已经很少把自己的「工具箱」秀给别人看了。&lt;/p>
&lt;p>我前几天跟鲍勃聊天，他最近一直忙着装修自己家。他家全部是由他亲自设计的。虽然家具不是他做的，干活儿的也是请来的工人，但是那些方案的确是出自他的脑袋，所以说是他亲自装修也一点都没错。&lt;/p>
&lt;p>那是什么决定了哪些东西是你买来的，哪些是你自己设计的呢？重要的一定不是物品怎么被造出来，而是物品里有没有包含你的思考吧。当一堆零件通过你的智慧彼此关联在一起，产生了「整体大于局部之和」的效果，这个物品就具有了你的一部分主张。&lt;/p>
&lt;p>任何物品里都有设计者的主张，服务也不例外。&lt;/p>
&lt;p>我经常觉得宁波的地铁和餐厅的服务十分不友好：明明服务人员就在旁边站着，你向他求助，他却只会告诉你去扫一下二维码。强制你扫二维码的服务，它们背后的主张都是&lt;/p>
&lt;blockquote>
&lt;p>为了省点人力成本，就暂且给你添点麻烦吧。&lt;/p>
&lt;/blockquote>
&lt;h2 id="清淤船和-asmr">清淤船和 ASMR&lt;/h2>
&lt;p>经过宁波老外滩，看到清淤船在江上作业。围观的路人有几十人，都看得兴起。&lt;/p>
&lt;p>&lt;img src="https://tva1.sinaimg.cn/large/006tNbRwly1galyam1mk1j31400u04r6.jpg" alt="">&lt;/p>
&lt;p>看着清淤船从江里把淤泥挖出来，再倾倒在旁边的船上，莫名有种视觉 ASMR 的感觉。好像人天生就对「疏通」这件事会有快感（比如挖鼻孔 🤣）。&lt;/p>
&lt;p>巧合的是我之前很喜欢听静电容键盘敲击的声音。好像两手紧握再松开时，空气从两手中间被挤压时发出的声音。我经过宁波博物馆附近的一处马路，突然听到汽车经过石头路面时发出的声音，竟然有些相似。&lt;/p>
&lt;p>&lt;a href="https://mp.weixin.qq.com/mp/audio?_wxindex_=0&amp;amp;scene=104&amp;amp;__biz=MzIyNzI2MTU2Mg==&amp;amp;mid=2650640682&amp;amp;idx=1&amp;amp;voice_id=MzIyNzI2MTU2Ml8yNjUwNjQwNjgx&amp;amp;sn=b99ca12aa1a7b569beffa20f9ca6dd16#wechat_redirect">点击收听&lt;/a>&lt;/p></description></item><item><title>一篇心得，开始2020年写作之旅</title><link>https://sund.site/posts/2019/2019-12-28_learn-to-write/</link><pubDate>Sat, 28 Dec 2019 18:49:56 +0800</pubDate><guid>https://sund.site/posts/2019/2019-12-28_learn-to-write/</guid><description>&lt;p>养成写作的习惯，会使人生获益无穷。写作可以让我们避免浅显的认识，在搜索引擎几秒钟就能得到答案的时代，学会向自己提问是深度思考的第一步。我真的理清脉络了吗？是不是像我认为的那样？写作者分享思想，同时也帮助自己思考。&lt;/p>
&lt;p>写作让我们在和他人交流时懂得&lt;strong>去理解&lt;/strong>，不是急着&lt;strong>去回应&lt;/strong>。常写作的人会时刻收集素材，养成倾听的习惯。写作的人喜欢片刻的沉默，胜过表面的热闹。&lt;/p>
&lt;p>&lt;strong>会说话的人就会写作&lt;/strong>。很多人拒绝写作，是觉得自己文笔不好，其实白话口语一样能写出好文章，精巧的构思，敏锐的嗅觉，缜密的思考，哪一种写作风格都有适合自己的路。&lt;/p>
&lt;p>三个月前，我开始刻意培养写作的习惯。这篇文章，我要与你分享这段时间的心得，这些话，有的来自我个人的体会，有的是来自记录的笔记，有的出自著名作家、编剧，我把它们整理出来，希望帮你启动写作之旅。&lt;/p>
&lt;h2 id="写文章的关键是什么">写文章的关键是什么？&lt;/h2>
&lt;p>诗人彼得·迈因克说，文学的表现力来自&lt;strong>专注、巧妙和精细&lt;/strong>。&lt;/p>
&lt;p>每篇文章都要&lt;strong>专注于一点，这一点就是主题&lt;/strong>，内容都在围绕这一点展开。想象一本书带给过你的感受，那就是它传达给你的主题，论文里它是论点，故事里它是基调，评论里它是观点。&lt;/p>
&lt;p>文章还要&lt;strong>巧妙地搭建结构&lt;/strong>，像电影导演的运镜，把观众的视线引向你希望的方向，带领读者走向你预设的终点。&lt;/p>
&lt;p>好的&lt;strong>文笔是精细的提炼&lt;/strong>，字斟句酌的金句，给读者的是惊喜，是&lt;strong>寻常的陌生感&lt;/strong>。&lt;/p>
&lt;h2 id="如何寻找主题">如何寻找主题？&lt;/h2>
&lt;p>&lt;strong>关注每个细节，每个引起你兴趣、兴奋、疑惑、恐惧、异物感的东西&lt;/strong>。读书是最简单的方法，除此之外，留心生活中有趣的短文、诗句、格言、广告、寓言、祈祷、标语、微博、短信……都是灵感的源泉。不把自己的生活局限在网络上，线下和朋友交流，参加有趣的活动、认识有趣的人、体验不一样的生活，都能让你产生写作的冲动。&lt;/p>
&lt;p>&lt;strong>不断向自己提问&lt;/strong>，即便是再小的问题，也有无限挖掘下去的潜力。不断提出问题尝试去回答！搜索网络、求助他人、翻阅资料，总之在写出答案之前，你一定是深思熟虑过，不要给读者向你提问的机会，穷尽所有可能的路径、绞尽脑汁，这样的文章才是系统性思考过的、有价值的，对得起自己和读者的。&lt;/p>
&lt;p>一旦养成这样的习惯，不只是写作，生活的一切都从日复一日的重复中苏醒过来了。&lt;/p>
&lt;h2 id="如何搭建文章的结构">如何搭建文章的结构？&lt;/h2>
&lt;p>有了主题，接下来的任务是布局，美感出自秩序。生活是个局，工作也是个局，你的文章更是让读者短暂逃离现实的局。&lt;/p>
&lt;p>首先，&lt;strong>开头请一定要激发读者强烈的兴趣&lt;/strong>，可以设置一个谜题让读者自行去文中寻找答案；也可以是一个具体的场景，让读者身临其境后逐渐察觉异样。请看小说《追风筝的人》的开头：&lt;/p>
&lt;blockquote>
&lt;p>我成为今天的我，是在 1975 年某个阴云密布的寒冷冬日，那年我十二岁。&lt;/p>
&lt;/blockquote>
&lt;p>是不是让人很好奇，想要读下去。即使你的文章是知识分享，也要注重故事性，从古至今流传下来的道理，都蕴含在故事里。&lt;/p>
&lt;p>其次，&lt;strong>不要倾倒细节，要有一个看不见的线牵引着读者&lt;/strong>，可以是时间、空间、疑问。如果你要抛出一个观点，就全文都以这个观点为核心，让所有文字都通向那个观点；如果你要构思一个的故事，请把故事的结构隐藏起来，让读者自行去发现。&lt;/p>
&lt;p>例如在《白夜行》中，两位主角活在各自的世界里，东野圭吾用并行故事线构成了看不见的线索，让读者自行脑补两人关系，画出故事的来龙去脉。所以，请把发现真理的过程交给读者。&lt;/p>
&lt;p>最后，&lt;strong>既要让文字满足读者期望，又不可预测&lt;/strong>。这要求乍看有点奢侈。人们不喜欢在故事里重复生活，也不喜欢完全脱离生活的故事。请不要平铺直叙，更不要太跳脱，要给读者制造舒适区，再打破它。读文章就像谈恋爱：「男人彻底地懂得了一个女人之后，是不会爱她的」。（出自张爱玲的短篇小说）&lt;/p>
&lt;h2 id="如何锻炼文笔">如何锻炼文笔？&lt;/h2>
&lt;p>&lt;strong>文笔是锦上添花，开始写作前请不要纠结&lt;/strong>，尤其是知识分享、论述观点类文章，比文笔更重要的是逻辑。&lt;/p>
&lt;p>第二，&lt;strong>一句自我介绍，一条微博，都是最小粒度的写作&lt;/strong>。每次发微博、Twitter、朋友圈，都请字斟句酌，变成语言的艺术家。&lt;/p>
&lt;blockquote>
&lt;p>有些词语的周围需要全然安静，给它们足够的空间，就好比照片，有些照片周围不需要陪衬。&lt;/p>
&lt;p>——阿摩司·奥兹&lt;/p>
&lt;/blockquote>
&lt;p>每次写作，&lt;strong>请有意识地删除多余的副词、形容词，如果写故事，把那些形容感受的词（如「沮丧」、「快乐」）替换成具体的动作和神态&lt;/strong>。原研哉在《设计中的设计》说，「我们通常所说的五感，是非常不准确的，用指尖轻轻触碰的触感，和用手用力按压的触感肯定是不一样的」。所以，&lt;strong>请去描写感受，不要概括感受&lt;/strong>。&lt;/p>
&lt;p>最后，&lt;strong>请熟练使用口语写作，避免官方用词&lt;/strong>。尤其练习使用俗语、方言、俚语或其他习语。在我们国家，经常看到：「只有……才能」、「坚决落实」、「时刻牢记」。请把这些短语从脑袋里清出去，除非你打算写反乌托邦题材……&lt;/p>
&lt;h2 id="写在最后">写在最后&lt;/h2>
&lt;p>上面这些技巧，都是写作的外功，要理解它的内功，还是要长期保持写作者的心态。写作是一种自我重建——这句话出自新京报的一篇文章《纪念王小波》，我非常喜欢下面这段话，最后分享给你：&lt;/p>
&lt;blockquote>
&lt;p>对一个人来说，过去那种统一式教育所打造的自我，是一种童稚状态，人只有通过自我的重建，才能走向成熟。这种重建是一种孤独的旅程，一旦开始，就注定没有终点，你将作为「一个人」而不是「我们」中的一员，来面对世界。&lt;/p>
&lt;/blockquote></description></item><item><title>互联网曾经有另一种可能</title><link>https://sund.site/posts/2019/ted-nelson/</link><pubDate>Sun, 15 Dec 2019 16:42:22 +0800</pubDate><guid>https://sund.site/posts/2019/ted-nelson/</guid><description>&lt;p>&lt;img src="https://sund.site/images/ted-nelson/computer-lib.png" alt="《Computer Lib》">&lt;/p>
&lt;p>&lt;em>1965 年，泰德·尼尔森（Ted Nelson）在提交给美国计算机协会的论文中提到一种将各种内容链接在一起的技术——超文本（Hypertext），如今超文本俨然已是互联网大厦的基石。但人们熟知的超文本和当初尼尔森预想的样子却有着天壤之别——在尼尔森的脑海中，一个失落的平行世界里，有着万维网的另一种可能。&lt;/em>&lt;/p>
&lt;h2 id="泰德尼尔森">泰德·尼尔森&lt;/h2>
&lt;p>尼尔森从小就是个爱幻想的孩子。深受导演父亲的影响，尼尔森酷爱写作，但他厌恶线性、渐进式的叙事结构，他希望所有资料都以一种混乱的，流动的形式保存起来。这样，每当他需要这些资料时，他就可以随时重建它们。如今已经 80 岁的尼尔森仍保存着数千小时自己的录音和录像，以备后人理解他的想法。这些录音和录像，同样也是没有目录结构的……&lt;/p>
&lt;h2 id="层级结构是邪恶的">层级结构是邪恶的&lt;/h2>
&lt;p>尼尔森把对传统结构的抵制延续到了计算机时代。1960 年，尼尔森在哈佛读研究生期间试图自己编写一个拥有「并排比较」、「版本回溯」和「按大纲修改」功能的写作工具，但因为非科班出身和学业繁忙，最终放弃了开发。当时哈佛大学正在开发一套计算机辅助教学系统，尼尔森觉得那种线性的、机械的教学系统，是对计算机和教学的双重侮辱。&lt;strong>思维应该沿着不同的路径探索，而不是以结构定义好的方式&lt;/strong>。&lt;/p>
&lt;p>尼尔森在 90 年代曾对苹果公司的 Macintosh 操作系统也持有同样的评价：&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>
&lt;p>在我看来，Macintosh 和 PC 没有差别。Macintosh 的交互做得更好，但是它和 PC 都是一样的概念结构，都是由 PARC 用户界面（PARC User Interface, PUI）与普通的层级架构目录（即如今所说的「文件夹」）组成。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>他们告诉你文件是分层级的；最基础的程序就是文字处理、数据库与电子表格；你必须使用「应用」；你必须费力地把自己真正想做的事处理成层级架构的文件，用「特定的应用」打开它们。实际上，这些陈述都夹杂着谎言。他们描述了计算机的现况，但没说它可以是什么样，又应该是什么样。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>——摘自《离线 OFFLINE》ISSUE 23，上都计划——失落的超文本，泰德·尼尔森语录&lt;/p>
&lt;/blockquote>
&lt;h3 id="尼尔森的超文本设想">尼尔森的超文本设想&lt;/h3>
&lt;p>时间回到 1965 年，尼尔森把自己的设想——一个由「超文本」和「压缩列表」技术构成的非顺序写作系统，发表在了全国计算机协会的论文中。起初这篇论文并没有引起太多人关注，但超文本这个词却意外被历史保留了下来。尼尔森在不久之后发起了名为「上都计划」的项目。上都（Xanadu）的名字来自诗人&lt;a href="https://baike.baidu.com/item/%E6%9F%AF%E5%8B%92%E5%BE%8B%E6%B2%BB/7281438?fromtitle=%E6%9F%AF%E5%B0%94%E5%BE%8B%E6%B2%BB&amp;amp;fromid=2108499">萨缪尔·柯勒律治（Samuel Taylor Coleridge）&lt;/a>在他的诗中幻想的忽必烈在元上都修建的雄伟宫殿。&lt;/p>
&lt;blockquote>
&lt;p>忽必烈汗在上都造建，富丽堂皇的穹顶宫殿，伴有圣河阿尔佛，穿过深不可测的岩洞，一直流入无光之海&lt;/p>
&lt;p>——萨缪尔·柯勒律治&lt;/p>
&lt;/blockquote>
&lt;p>在尼尔森的构想中，上都计划是一个拥有非线形结构的交叉索引系统——&lt;/p>
&lt;ul>
&lt;li>&lt;strong>任何媒体内容双向链接&lt;/strong>，可以在平行文本之间自由跳转，一直追溯到内容的源头&lt;/li>
&lt;li>&lt;strong>拥有深度的版本管理&lt;/strong>，每次对文本的修改都以版本号记录下来，以便追溯变更历史&lt;/li>
&lt;li>&lt;strong>版权授权机制&lt;/strong>，由于历史可追溯，所以内容理论上都可以追溯到原作者&lt;/li>
&lt;li>&lt;strong>可视化的差异对比&lt;/strong>，不同版本的内容可以比较差异，基于原文的修改可以同步到引文&lt;/li>
&lt;li>&lt;strong>创作者可以基于已有内容进行增量出版&lt;/strong>，类似滚动更新机制&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sund.site/images/ted-nelson/xanadu.jpg" alt="较早时期设计的 Xanadu 系统">&lt;/p>
&lt;p>尼尔森认为，&lt;strong>层级的目录结构是一种专制&lt;/strong>。创作者应该时刻与媒体内容保持联系，而不应该关心它保存在哪。在尼尔森的理想里，文件夹是罪恶的，基于文件夹的树形目录结构更是丑陋。它代表了人类根深蒂固的层级观念在虚拟世界的投影。建立于层级观念之上，思维只会被束缚，&lt;strong>真正的计算机，应该给予人类自由&lt;/strong>。&lt;/p>
&lt;p>尼尔森更不喜欢别人用基于超文本概念创造出来的 HTML（HyperText Markup Language，超文本标记语言），尼尔森批评道：&lt;/p>
&lt;blockquote>
&lt;p>它（HTML）的链接容易失效且只能单向链出，它的引文无法追溯，没有版本控制，也没有版权管理系统。&lt;/p>
&lt;/blockquote>
&lt;p>几经辗转，在资金等各方面条件都极其匮乏的情况下，上都计划在 2014 年终于发布了一个功能不完备的演示版本，我们可以在浏览器访问&lt;a href="http://xanadu.com/">上都计划的官网&lt;/a>查看它的最新状态。尼尔森还开通 Youtube 频道 &lt;a href="https://www.youtube.com/channel/UCr_DXJ7ZUAJO_d8CnHYTDMQ">TheTedNelson&lt;/a> 给大众布道，可惜截止到我写下这些字的时候，订阅人数还不足 6000，在中文世界更是鲜有人报道。&lt;/p>
&lt;p>如今的万维网已技术沉淀多年，尼尔森的计划在不少专业人士看来，如柯勒律治的诗一般，只是天方夜谭。&lt;/p>
&lt;blockquote>
&lt;p>超文本不是技术，是文学。文学是指那些我们包装并存储的信息（一开始是书籍、报纸和杂志，现在还有电影、录音、CD-ROM 等）。未来的文学类型决定了人类将被如何记录和理解。这些还轮不到「技术专家」来操心。&lt;/p>
&lt;p>——《离线 OFFLINE》ISSUE 23，上都计划——失落的超文本，泰德·尼尔森语录&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://sund.site/images/ted-nelson/xanadu-website.png" alt="OpenXanadu，推迟了54年之后的 Demo">&lt;/p></description></item><item><title>我们的隐私被谁拿走了</title><link>https://sund.site/posts/2019/permanent-record/</link><pubDate>Sun, 08 Dec 2019 02:41:29 +0800</pubDate><guid>https://sund.site/posts/2019/permanent-record/</guid><description>&lt;p>斯诺登的自传《永久记录》已经上架各大阅读平台。这本书让斯诺登的名字从棱镜门之后又一次出现在了公众视野里。书里按时间线叙述了他的童年和工程师父亲学习计算机，到他加入中情局，最后曝光棱镜计划出逃俄罗斯的全过程。这本书是一个青年成长为公民，并用自己的勇气揭露科技霸权的心路历程。我特别注意到这部书里提到了一个概念——个人信息的&lt;strong>元数据&lt;/strong>，元数据是一个人在网络上留下的痕迹，不管是对情报机构，还是对商业公司，都是要极力获取的重要信息。&lt;/p>
&lt;p>&lt;img src="https://tva1.sinaimg.cn/large/006tNbRwgy1g9pm9nt8joj30u016y45h.jpg" alt="《永久记录》">&lt;/p>
&lt;h2 id="元数据是我的聊天内容或个人资料吗">元数据是我的聊天内容或个人资料吗？&lt;/h2>
&lt;p>元数据不是你聊天的内容也不是你的资料，更不是你在网上发布了什么消息，元数据是更底层的数据，斯诺登在书里这样描述它：&lt;/p>
&lt;blockquote>
&lt;p>最直接理解（元数据）的方式是活动数据：你在设备上从事活动、手机自动运行的记录。举例来说，手机元数据可能包括：来电日期与时间、通话时长、来电号码，通话位置……&lt;/p>
&lt;/blockquote>
&lt;p>通过分析你不同设备的元数据，监视者能得知你昨晚入睡与今早起床的时间、每天逛了哪些地方、在哪里待了多久，以及你接触过的对象有谁，谁又与你联系过。&lt;/p>
&lt;p>&lt;img src="https://tva1.sinaimg.cn/large/006tNbRwgy1g9p9pylzx3j31900u0e81.jpg" alt="">&lt;/p>
&lt;h2 id="为什么你的元数据如此重要">为什么你的元数据如此重要？&lt;/h2>
&lt;p>事实上，元数据不仅仅赋予了数据监视者全面窥探你隐私的权利，在 2002 年斯皮尔伯格拍摄的电影《少数派报告》中有这样的桥段（有剧透）：未来的某一天，人类能够利用计算机预测可能的犯罪，并在「嫌疑犯」准备实施犯罪前进行抓捕，幕后黑手利用这一机制构陷男主角，使其成为系统认定的抓捕对象。&lt;/p>
&lt;p>科幻故事离我们太远，你可能觉得现实中没有这样的系统。那么请看一些事实吧：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://www.gov.cn/fuwu/2018-10/22/content_5333353.htm">我国征信系统已为 9.7 亿自然人建信用档案&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://newspaper.jcrb.com/2019/20191125/20191125_004/20191125_004_4.htm">无偿献血、公租房申请、ETC 欠费、乱闯红灯、频繁跳槽等行为纳入个人征信系统&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.qdaily.com/articles/47431.html">中国安装了 1.76 亿个监控摄像头，这市场还在增长&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.zhihu.com/question/64794171">社交软件 Instagram 被怀疑窃听用户麦克风&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.xinhuanet.com/world/2019-08/15/c_1210242325.htm">Facebook 承认监听用户语音，将语音资料转录为文字&lt;/a>&lt;/li>
&lt;li>……&lt;/li>
&lt;/ul>
&lt;p>斯诺登在《永久记录》中提到，美国中央情报局的监控系统，可以随时打开全球任何人的摄像头、麦克风和查看电脑上正在做的事、调查他的上网记录、孩子的入学申请……一些中情局同事甚至用截取到的女性裸照作为内部的「流通货币」彼此交换。&lt;/p>
&lt;p>&lt;img src="https://tva1.sinaimg.cn/large/006tNbRwgy1g9oqelxc04j31120rttc1.jpg" alt="">&lt;/p>
&lt;h2 id="机器并不像人一样学习人工智能也没有真正的智能">机器并不像人一样学习，人工智能也没有真正的智能&lt;/h2>
&lt;p>下面我想站在另一个角度审视当年的棱镜门事件。现代信息技术发明了一些词汇方便我们理解技术的含义，比如人工智能、机器学习，其中最有迷惑性的是「预测」。王垠的文章&lt;a href="https://www.yinwang.org/blog-cn/2019/09/14/machine-vs-human">《机器与人类视觉能力的差距》&lt;/a>解释了机器所谓「识别」并不是真的「理解」。用斯诺登的话说：&lt;strong>计算机的预测，仅仅是对数据的一种操弄。&lt;/strong> 就像《少数派报告》的故事一样，最终决定机器的预测结果是否正确的关键，还在于人——掌控着机器的那些人。&lt;strong>技术名词在迷惑我们的同时，赋予了科技公司和大型机构更多权力，冠以科技发展之名&lt;/strong>。&lt;/p>
&lt;blockquote>
&lt;p>每个人都是潜在的罪犯：尽管我们自己没有察觉到，但多数人的生活绝不是黑白分明的，我们会任意穿越马路、未做好垃圾分类、在人行道骑自行车，甚至非法下载盗版等。换句话说，一旦法律贯彻到底，所有人都会变成罪犯。&lt;/p>
&lt;p>——爱德华·斯诺登，《永久记录》&lt;/p>
&lt;/blockquote>
&lt;h2 id="怎么保护我的元数据个人隐私">怎么保护我的元数据（个人隐私）？&lt;/h2>
&lt;p>如果你也意识到了个人隐私的重要性，那么是时候做点什么保护自己了。在当下，个人想要完全隐藏自己的上网行为几乎是不可能的。这也是为什么美国爆出棱镜门之后，全世界各国都把保护个人信息提上了政府议程。但是我们仍然可以通过一些手段，提高监视者作恶的成本。我为你整理了一些工具和上网习惯，它们只是给你提供一种思路，希望你能不局限于这些手段，在便利和隐私之间寻求到属于自己的平衡。&lt;/p>
&lt;h3 id="使用反追踪的浏览器插件">使用反追踪的浏览器插件&lt;/h3>
&lt;p>每当你点击一个网站页面，大部分网站会悄悄给百度、Google 等公司发送你的上网行为信息，&lt;a href="https://chrome.google.com/webstore/detail/privacy-badger/pkehgijcmpdhfbdbbnkijodmdjhbjlgp">隐私獾（Privacy Badger）&lt;/a>这个浏览器插件能帮你屏蔽掉广告和用户行为追踪。&lt;/p>
&lt;h3 id="确保所有通讯数据都有加密">确保所有通讯数据都有加密&lt;/h3>
&lt;p>从棱镜门之后，全世界大部分网站都提供了 Https 方式的数据加密访问，如果你访问的陌生网站没有支持 Https，请尽量不要把任何个人信息交给它。&lt;/p>
&lt;p>聊天软件是除了浏览器之外第二大上网工具，&lt;a href="https://yitianshijie.net/">一天世界&lt;/a>曾经整理了一个聊天软件安全性的表格，请参考选择适合自己的聊天工具（「人生最痛苦的是梦醒了无路可走」——鲁迅）&lt;/p>
&lt;p>&lt;img src="https://tva1.sinaimg.cn/large/006tNbRwgy1g9oqs2klvuj30xa0te44r.jpg" alt="聊天软件安全性">&lt;/p>
&lt;h3 id="尽量不填写真实的个人信息">尽量不填写真实的个人信息&lt;/h3>
&lt;p>很多网站都要你提供个人信息，请遵守「如非必要，一律虚构」的原则。&lt;/p>
&lt;p>最近微信更新了一个保护隐私的功能，你可以在&lt;a href="https://www.appinn.com/wechat-random-avatar/">微信第三方登录时选择随机生成的昵称和头像&lt;/a>，不妨试试。&lt;/p>
&lt;p>&lt;img src="https://tva1.sinaimg.cn/large/006tNbRwgy1g9oq1bdydwj30u01md0u2.jpg" alt="图片来自小众软件">&lt;/p>
&lt;h3 id="去除照片-exif-信息">去除照片 EXIF 信息&lt;/h3>
&lt;p>你拍摄的照片里隐含了你的位置和设备信息，有新闻报道犯罪分子利用照片 EXIF 信息追踪女性家庭住址。提供类似功能的&lt;a href="https://sspai.com/post/27007">工具&lt;/a>很多，日常用微信传照片给陌生人，记得不要发送原图。&lt;/p>
&lt;h3 id="尽量不用公共-wifi">尽量不用公共 WiFi&lt;/h3>
&lt;p>值得一提的是，自己家的 WiFi 也时不时换一下密码。现在随便下载个黑客软件进入你家 WiFi 截取你流量搞个&lt;a href="https://baike.baidu.com/item/%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB">中间人攻击&lt;/a>根本没有技术含量。&lt;/p>
&lt;h3 id="盯紧摄像头">「盯紧」摄像头&lt;/h3>
&lt;p>以前某个国产社交软件后台启动摄像头，并把视频传到网络上。现在都能搜到当年泄露的部分女孩子只穿内衣，在不知情时拍摄的视频。请在非必要时，不给任何 App 摄像头、麦克风或任何读取你敏感信息的权限。&lt;/p>
&lt;h3 id="dns-over-https">DNS over HTTPS&lt;/h3>
&lt;p>虽然你访问网站的流量是被 HTTPS 加密了，但是你访问任何网站前，你的设备会请求 DNS 服务器解析网站域名（好比邮寄信件时，邮局把你的邮编解析成真实的地区），这些信息被不法分子（？）拦截篡改，会误导你访问到不相关的地址上去。所以最近 Firefox 和 Chrome 两家浏览器都内置了 DNS over HTTPS 功能，开启后加密所有 DNS 域名解析流量。但是前提是你的 DNS 服务器也支持，你可以尝试 Cloudflare 的服务，其 DNS 地址为 &lt;code>1.1.1.1&lt;/code>。&lt;/p></description></item><item><title>Kevin Kelly's Hacking 和 《列子天瑞》的盗亦有道</title><link>https://sund.site/posts/2019/what-is-hacking/</link><pubDate>Thu, 05 Dec 2019 23:15:43 +0800</pubDate><guid>https://sund.site/posts/2019/what-is-hacking/</guid><description>&lt;p>&lt;a href="https://kk.org/">凯文凯利&lt;/a>在《失控》中有一句话：&lt;/p>
&lt;blockquote>
&lt;p>The nature of life is to delight in all possible loopholes. Every creature is in some way hacking a living by reinterpreting the rules.&lt;/p>
&lt;/blockquote>
&lt;p>生命的本性就是喜爱一切可利用的「漏洞」，每个造物都在通过重新诠释规则来谋求生存。&lt;/p>
&lt;p>无独有偶，&lt;a href="https://baike.baidu.com/item/%E5%88%97%E5%AD%90%C2%B7%E5%A4%A9%E7%91%9E">《列子·天瑞》&lt;/a>里有一个故事。宋国的向氏问齐国的国氏，如何变得富裕。国氏就说：「吾善为盗。始吾为盗也，一年而给，二年而足，三年大穰」，向氏一听原来诀窍就是盗，就去学着入室偷窃，结果被抓住问罪，家里的财物都被没收了。&lt;/p>
&lt;p>向氏气冲冲地跑去质问国氏，国氏解释说了下面这段话。&lt;/p>
&lt;blockquote>
&lt;p>吾闻天有时，地有利。吾盗天地之时利……夫禾稼、土木、禽兽、鱼鳖，皆天之所生，岂吾之所有？然吾盗天而亡殃。&lt;/p>
&lt;/blockquote>
&lt;p>原来国氏所谓「盗」，并不是盗窃财物，而是盗天地之时利。这里的盗字，正好对应了英语里的 &amp;ldquo;Hacking&amp;rdquo;。凯文凯利的 &amp;ldquo;hacking a living by reinterpreting the rules&amp;rdquo;，正是列子所谓「万物自天成，盗者本无心」。&lt;/p></description></item><item><title>为 Mac OS 10.15 开启 HiDPI，让 2K 显示器更舒适</title><link>https://sund.site/posts/2019/macbook-hidpi/</link><pubDate>Sun, 24 Nov 2019 16:11:00 +0800</pubDate><guid>https://sund.site/posts/2019/macbook-hidpi/</guid><description>&lt;p>以前手抖买了台 Dell P2416D 显示器，接上 Macbook 发现原生的分辨率设置在 2K 显示器上字体很小，换成 1080P 分辨率显示效果又特别模糊。上网查了一下发现可以为 Macbook 强行开启 HiDPI。下文的教程结合了 Github 上用户&lt;a href="https://github.com/xzhih">ZeRo° Xu&lt;/a> 在 &lt;a href="https://github.com/xzhih/one-key-hidpi">一键开启 HiDPI 脚本&lt;/a> 里的 &lt;a href="https://github.com/syscl/Enable-HiDPI-OSX/issues/49">Github Issue&lt;/a> 和一篇博文 &lt;a href="https://www.smslit.top/2019/01/02/mac_hidpi/">《为 mac 连接的 2k 显示器开启 HiDPI》&lt;/a>。&lt;/p>
&lt;h2 id="什么是-hidpi">什么是 HiDPI&lt;/h2>
&lt;p>引用自 Github 用户 &lt;a href="https://github.com/xzhih">ZeRo° Xu&lt;/a> ：&lt;/p>
&lt;blockquote>
&lt;p>它使用横纵 2 个物理像素也就是 4 个物理像素来显示 1 个像素区域，结果就是图像的细节得到翻倍、更清晰、边缘更平滑。&lt;/p>
&lt;p>拿 13 寸的 MacBook Pro 举例，它的屏幕物理分辨率是 2560 x 1600，所以原生的 HIDPI 分辨率就是 1280x800。更高的一档 1440x900 hidpi 缩放分辨率，则是虚拟出一个 2880x1800 的分辨率，再进行软缩放输入。所以你能发现苹果的电脑总是有很高的分辨率。&lt;/p>
&lt;p>好了，既然你的屏幕是 1080p，本身就没有那么多像素去合成 HIDPI，如果以原生的显示计算，你这屏幕的 1080p 分辨率应该是 960x540，这么低的分辨率你是没法用的，所以就有了这个脚本。&lt;/p>
&lt;p>这个脚本的功能是虚拟出比你的屏幕物理分辨率更高的假分辨率，也就是你看到的 3360 x 1888，这样你就可以使用 1680 x 944 hidpi 这个缩放分辨率了。&lt;/p></description></item><item><title>抛弃笔记本，完全用标签管理笔记有什么需要注意的</title><link>https://sund.site/posts/2019/all-tag-in-evernote/</link><pubDate>Mon, 18 Nov 2019 13:49:00 +0800</pubDate><guid>https://sund.site/posts/2019/all-tag-in-evernote/</guid><description>&lt;p>日常工作中经常会出现这样的情况：&lt;/p>
&lt;ol>
&lt;li>小张怎么也想不起来上次收藏的一篇健身饮食相关的文章，到底是在印象笔记的「健身」分类下，还是在「健康」或者「饮食」分类下，跨分类的文章太多，小张感到头秃&lt;/li>
&lt;li>小李用标签管理文档，但是每次查询标签时，总是犹豫到底应该搜索&lt;code>时间管理&lt;/code>还是&lt;code>效率&lt;/code>，亦或是&lt;code>工作流&lt;/code>，标签实在太多，小李很恼火&lt;/li>
&lt;/ol>
&lt;p>这两种情况都属于整理方法不科学，给检索时造成了麻烦。&lt;/p>
&lt;h2 id="检索分类的难题">检索分类的难题&lt;/h2>
&lt;p>在正式介绍整理方法前，不得不先声明一个事实：**完全无重叠的分类是不可能实现的。**以小张为例，小张是一个健身教练，他在「健身方法」分类下有教会员如何管理「睡眠」、「饮食」和「健身动作」，同时小张也热爱生活，他在「生活」分类下有「财务知识」，并在「睡眠」和「饮食」里记录自己的睡眠和饮食习惯。这就造成了「睡眠」和「饮食」同时存在于个人生活和健身方法两个分类里。&lt;/p>
&lt;p>&lt;img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g909mdd42bj30dj08ddfx.jpg" alt="如何打标签-分类">&lt;/p>
&lt;p>像小张这样的情况几乎不可避免，分类作为一种整理方法，就免不了出现上图中重叠的部分。什么是分类？**分类就是预先设计好一堆插槽，再把不同的东西分门别类放进对应的插槽里。**小张在检索「饮食」相关的内容时，他的分类系统失效了，同一个东西可以属于不同插槽。小张此时必须用「个人生活 + 饮食」或是「健身 + 饮食」的扩展分类形式才能得到想要的结果。由此可见，&lt;strong>分类失效最简单的解决办法是扩展分类&lt;/strong>，比如增加两个子分类「生活饮食」和「健身饮食」。但是由于文档日积月累，这种小分类越来越多，越来越难管理；而一些分类里只存了 1、2 篇文档，根本没必要单独开个分类。&lt;/p>
&lt;p>小张的头秃越来越严重了，为了帮助像小张这样的分类困难症，人们想出了两种不同的办法：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>用标签解决重叠部分&lt;/strong>，比如&lt;code>饮食&lt;/code>就可以作为标签，在「健身」分类下的文章如果贴着&lt;code>饮食&lt;/code>就代表它属于健身相关的饮食，同时这个标签也可以贴到「个人生活」下的文章里。&lt;/li>
&lt;li>**通通用标签，**把&lt;code>个人生活&lt;/code>变成标签，一篇文章如果同时贴有&lt;code>个人生活&lt;/code>和&lt;code>饮食&lt;/code>，那它就是生活方面的饮食，不是健身的饮食知识。具体的做法会在后面章节讲解。&lt;/li>
&lt;/ol>
&lt;h2 id="遵守使用原则">遵守使用原则&lt;/h2>
&lt;p>不管哪种方式，即便有了标签和分类的双管齐下，也要有使用的原则，否则滥用的结果比不分类更麻烦。这回我们从原点出发，先思考一下人类检索信息的方式。&lt;/p>
&lt;p>通常&lt;strong>检索信息有两种方式：&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>&lt;strong>通过树形的层级体系，自顶向下一层层检索&lt;/strong>&lt;/li>
&lt;li>&lt;strong>通过碎片的记忆，用关键词和关联性，自底向上检索&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>基于这两种常见的检索方式，我们约定一种分类和标签的使用原则：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>谨慎扩展新分类，分类之间尽量不重叠&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>标签尽量不可拆分，标签之间组合使用&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>分类的创建成本高，检索成本低&lt;/strong>，所以分类只有数量少，重叠部分少，才能提高自顶向下查找的命中率。&lt;/p>
&lt;p>&lt;strong>标签创建成本低，但是检索成本高&lt;/strong>，所以标签可以是跨类别的，标签越具体，组合越丰富，关键词命中率越高。&lt;/p>
&lt;p>基于这两种原则去管理分类和标签，就可以保证你的检索体系不崩溃的同时，检索效率最高。比如我先搜索「健身」分类，发现文章太多，于是我加上&lt;code>饮食&lt;/code>相关的标签，就可以轻松过滤掉大部分信息。标签越具体，组合越详细，过滤效果越好。&lt;/p>
&lt;p>另外，假设我只记得文章的模糊内容，也可以直接搜索标签或内容。&lt;/p>
&lt;h2 id="完全标签化的思路">完全标签化的思路&lt;/h2>
&lt;p>现在流行一种管理方式，抛弃分类，完全用标签管理。拿印象笔记为例，在这篇 &lt;a href="https://medium.com/@thomashoneyman/using-evernote-the-right-way-ef61f530d1ad">《Using Evernote (the right way)》&lt;/a> 的文章中，作者抛弃了常见的笔记本分类法，完全用标签来整理笔记。笔记本只保留「收件箱」、「收藏夹」和「废纸篓」。这种方式免去了整理笔记本的麻烦，但同时，造成了检索时必须依赖标签。作者为了解决这一难题，提出了一种被我称之为**「给标签分类」（ 原文是 Organize Tags）**的做法。&lt;/p>
&lt;p>其实给标签分类的做法非常常见，以 &lt;a href="https://www.douban.com/">豆瓣&lt;/a> 为例，你肯定见过下边的标签分类方式：&lt;/p>
&lt;p>&lt;img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g91dwdctqwj30hw0wqq5h.jpg" alt="douban">&lt;/p>
&lt;p>**这种方式的好处就是：你既可以直接在搜索栏搜索具体的标签，也可以通过标签分类先筛选出标签，再点击标签明层缩小筛选范围。**这就解决了标签不好逐层检索的问题。&lt;/p>
&lt;p>仍然以印象笔记为例，我们该如何改造它，使之成为完全标签化的系统呢？&lt;/p>
&lt;p>首先，把现有笔记的标签归入对应的父类标签。比如新建一个&lt;code>信息管理&lt;/code>，然后把&lt;code>项目管理&lt;/code>、&lt;code>时间管理&lt;/code>、&lt;code>思维导图&lt;/code>、&lt;code>信息检索&lt;/code>全部拖到&lt;code>信息管理&lt;/code>标签下，使之成为父标签。&lt;/p>
&lt;p>&lt;img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g91dw8hj6hj307m090jre.jpg" alt="006y8mN6gy1g90dkrc0utj307m090q37">&lt;/p>
&lt;p>之后，按照「我是谁，从哪来，到哪去」的原则补充所有遗失的标签。&lt;/p>
&lt;ol>
&lt;li>我是谁，笔记属于哪个知识点、具体的知识类型&lt;/li>
&lt;li>从哪来，笔记的来源，如果是网页剪藏，印象笔记会自带来源信息&lt;/li>
&lt;li>到哪去，笔记的用途，比如进行中的某个项目&lt;/li>
&lt;/ol>
&lt;p>这样，一篇笔记的标签看起来是这样：&lt;/p>
&lt;p>&lt;img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g90dnvno5pj316g07qgne.jpg" alt="标签命名">&lt;/p>
&lt;p>这里的来源我直接使用了印象笔记自带的信息。标签的用途如果不明确也可以忽略。知识点要遵循具体，尽量不可拆分的原则。父类别标签的存在，是为了避免开头中小李遇到的问题，标签太多时，检索无从下手。文章有了父类别标签，你就多了一种筛选笔记的方式：直接在标签管理界面点选父标签来缩小筛选范围。&lt;/p>
&lt;p>完成了这些，我们下次检索笔记，就可以用两种方式：&lt;/p>
&lt;ol>
&lt;li>通过父标签 &amp;gt; 子标签的方式逐层检索&lt;/li>
&lt;li>通过搜索框输入标签名直接检索&lt;/li>
&lt;/ol>
&lt;p>如果你不是印象笔记用户，也可以采用一些迂回的手段，比如建立一张标签父子关系的笔记，来作为查找目录。&lt;/p>
&lt;p>看到这里你也许已经发现，这种完全标签化的方式其实只不过是把分类变成了标签，它同样存在父标签之间范围重叠的问题，所以一样要遵循前文的分类和标签的使用原则。&lt;/p>
&lt;h2 id="小结">小结&lt;/h2>
&lt;p>本文先分析了检索分类的难题——分类之间的重叠造成添加和检索时的不便。之后按照分类和标签两种归类方式的区别，提出了创建和使用分类、标签的原则，即谨慎分类，组合标签。之后介绍了一种完全标签化的管理信息方式。它的本质仍然是通过分类 + 标签的组合，提高检索效率。&lt;/p>
&lt;p>希望本文对你有所帮助，也欢迎在评论区留言发表你的观点。&lt;/p></description></item><item><title>注意力的边缘</title><link>https://sund.site/posts/2019/attention-model/</link><pubDate>Thu, 14 Nov 2019 15:29:00 +0800</pubDate><guid>https://sund.site/posts/2019/attention-model/</guid><description>&lt;p>阅读几分钟就忍不住打开微信；&lt;/p>
&lt;p>计划在家办公却浏览了一上午购物网站；&lt;/p>
&lt;p>周末去咖啡馆学习，被来回走动到人打扰到无法专心。&lt;/p>
&lt;p>这些问题我们经常会遇到，好的外部环境可以让人长时间保持精神的专注，大大提高我们工作、学习的效率。反之各种外界干扰会时不时跳出来打断你的注意力。那么你要怎么应对这些干扰呢？&lt;/p>
&lt;p>接下来我会分享一种认知模型——&lt;strong>注意力模型&lt;/strong>，它帮助你分析你的注意力被谁「偷」走了。&lt;/p>
&lt;h2 id="注意力有边缘">注意力有边缘&lt;/h2>
&lt;p>我在最近阅读《&lt;a href="https://book.douban.com/subject/27133266/">交互的未来&lt;/a>》这本书时，了解到了注意力模型。书的作者认为，人的注意力有&lt;strong>边缘&lt;/strong>。我们不可能将全部注意力放在多件事上，&lt;strong>处于我们注意力中心的事物最容易被我们感知，而处于注意力边缘的事物，往往被我们的视线边缘、听觉、嗅觉等知觉感受到&lt;/strong>。因此，位于注意力中心的事物感知最清晰，所以反馈也更迅速。&lt;/p>
&lt;p>以此为基础，作者把注意力划分为三个等级，下面以常见的汽车驾驶室为例，看看司机的注意力是怎样分配的：&lt;/p>
&lt;ul>
&lt;li>前方路况占据了驾驶员视觉中心，是主要注意力&lt;/li>
&lt;li>在视觉边缘的反光镜和仪表盘，以及触觉反馈的方向盘和脚踏板，是次级注意力&lt;/li>
&lt;li>双闪、应急灯、收音机等设备，周围的环境音共同构成了第三级注意力&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sund.site/images/attention-model/1.jpg" alt="">&lt;/p>
&lt;p>由此，注意力的三个等级可以归纳为：&lt;/p>
&lt;ul>
&lt;li>主要注意力与视觉相关，且是直接的，例如司机对路面所给予的注意，或者台式计算机用户对计算机所给予的注意。&lt;/li>
&lt;li>次要注意力的对象则较远，例如，人们对无需直接关注就能感觉到的声音或振动信号所给予的注意。&lt;/li>
&lt;li>第三级注意力的对象则是注意范围边缘的声音、光线或环境振动等。&lt;/li>
&lt;/ul>
&lt;p>当一个司机在驾驶时，如果有人跟他不断交谈，那么司机的注意力模型就变成了：&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: center">主要注意力&lt;/th>
 &lt;th style="text-align: center">次要注意力&lt;/th>
 &lt;th style="text-align: center">第三级注意力&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: center">前窗的视觉，路况和车辆位置的意识&lt;/td>
 &lt;td style="text-align: center">后视镜、仪表盘、脚踏板等&lt;/td>
 &lt;td style="text-align: center">和乘客的谈话内容&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;p>司机的第三级注意力被乘客的谈话内容占据，所以周围的环境音就被阻断了。那假设这辆车使用了屏幕触摸式导航系统，那么司机在使用导航系统时，主要注意力就被阻断了。所以在非自动驾驶的汽车里使用触摸操控在交互上是糟糕的设计。&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: center">主要注意力&lt;/th>
 &lt;th style="text-align: center">次要注意力&lt;/th>
 &lt;th style="text-align: center">第三级注意力&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: center">触摸屏操作&lt;/td>
 &lt;td style="text-align: center">后视镜、仪表盘、脚踏板等&lt;/td>
 &lt;td style="text-align: center">和乘客的谈话内容&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="使用电子设备的注意力模型">使用电子设备的注意力模型&lt;/h2>
&lt;p>接下来，我们一起回到日常生活中。在一般情况下，我们在工作和学习时，注意力的状态是这样：&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: center">主要注意力&lt;/th>
 &lt;th style="text-align: center">次要注意力&lt;/th>
 &lt;th style="text-align: center">第三级注意力&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: center">电子屏幕、书本上的内容&lt;/td>
 &lt;td style="text-align: center">屏幕边缘的时间和菜单，不时弹出的通知栏，视线边缘来回走动的人&lt;/td>
 &lt;td style="text-align: center">环境光和声音，提示音，久坐后座椅、桌子的不适感&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;p>看到这里，你头脑中理想的学习环境是不是下面这样呢？&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: center">主要注意力&lt;/th>
 &lt;th style="text-align: center">次要注意力&lt;/th>
 &lt;th style="text-align: center">第三级注意力&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: center">电子屏幕、书本上的内容&lt;/td>
 &lt;td style="text-align: center">未被占用&lt;/td>
 &lt;td style="text-align: center">未被占用&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;p>次级注意力未被占用并不一定是件好事。我们大脑里偶尔冒出来的思绪经常把注意力牵扯到其他事情上。对平时专注力差的人，更会时不时主动寻找手机，看看微信，突然想起某款口红型号，马上登录淘宝……&lt;/p>
&lt;p>所以，&lt;strong>专注的重点在于合理分配注意力的中心和边缘，让它们既不互相阻断，又不给思绪留出太多遐想空间。&lt;/strong>&lt;/p>
&lt;h2 id="用平静的方式占领注意力的边缘">用平静的方式，占领注意力的边缘&lt;/h2>
&lt;p>想象现在你坐在周末的咖啡馆里准备阅读一本书，但是嘈杂的环境无法让你沉下心来：飞奔的小朋友发出持续的笑声，不时从你身边划过；隔壁桌相亲的一男一女举止暧昧，任谁都不能不关心他们接下来的进展；为了防止顾客久坐而专门设计的座椅让你的臀部和背部永远处于找不到理想接触面积的状态；这时，手机锁屏界面显示「你收到了一条通知」……&lt;/p>
&lt;p>下面，你应该做什么呢？&lt;/p>
&lt;p>或许是扔掉手机换一家咖啡馆，亦或者在夺门而出前亲吻隔壁桌的女生，在男生惊慌的眼神里转身跑向门口，并在出门前绊倒跑过来的小朋友……&lt;/p>
&lt;p>这肯定是不行的。&lt;/p>
&lt;p>首先，你要关掉自己手机的一切通知，或者直接打开&lt;a href="https://support.apple.com/zh-cn/HT204321">勿扰模式&lt;/a>。大多手机 App 都想尽办法留住更多用户的时间，所以&lt;strong>真正变成手机的主人，是你提升一切行动力和专注力的先决条件。&lt;/strong>&lt;/p>
&lt;p>第二步，你要屏蔽掉视觉污染，让视线边缘不会有吸引你注意力的物体。我会在下一小节中告诉你&lt;strong>聚光灯&lt;/strong>的妙用。&lt;/p>
&lt;p>最后，你要屏蔽掉声音的干扰，戴上耳机，播放点柔和的音乐。除此之外，舒适的座椅和柔软的靠垫都会安抚你的触觉神经。&lt;/p>
&lt;p>你的注意力应该像下面这样：&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: center">主要注意力&lt;/th>
 &lt;th style="text-align: center">次要注意力&lt;/th>
 &lt;th style="text-align: center">第三级注意力&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: center">电子屏幕、书本上的内容&lt;/td>
 &lt;td style="text-align: center">不容易吸引注意力的物体，较暗的周围环境&lt;/td>
 &lt;td style="text-align: center">轻柔的旋律，舒适的倚靠感&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="用聚光灯营造舞台感">用聚光灯营造舞台感&lt;/h2>
&lt;p>次级注意力会时不时把视觉中心夺走。许岑在自己的新书&lt;a href="https://book.douban.com/subject/34464459/">《上手》&lt;/a>中，提出使用聚光灯来营造极大提升专注力的舞台感办公环境。从注意力模型的角度说，次级注意力被较暗的环境包围时，更不容易阻断视觉注意力。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/attention-model/2.jpg" alt="">&lt;/p>
&lt;p>市面上很多光线柔的台灯或是显示器灯，兼顾了保护视力和聚光灯的作用。比较知名的有少数派曾经发过的&lt;a href="https://sspai.com/post/43034">《这是我今年买得最值的硬件 — WiT Genie》&lt;/a>和《&lt;a href="https://sspai.com/post/45870">夹在显示器上的台灯，美观实用的完美照明解决方案：明基 ScreenBar Plus 屏幕挂灯》&lt;/a>，前者还详细讲解了照明亮度、频闪对视力的影响。&lt;/p></description></item><item><title>Ricoh GR2 参数说明</title><link>https://sund.site/posts/2019/ricoh-gr2-settings/</link><pubDate>Thu, 14 Nov 2019 14:46:00 +0800</pubDate><guid>https://sund.site/posts/2019/ricoh-gr2-settings/</guid><description>&lt;h2 id="常用相机术语">常用相机术语&lt;/h2>
&lt;p>&lt;strong>包围曝光&lt;/strong>：同时使用不同曝光参数或滤镜拍摄三张照片或是合成一张。&lt;/p>
&lt;p>&lt;strong>NR&lt;/strong>：即降噪功能，如感光度 ISO NR，低速快门 NR。&lt;/p>
&lt;p>&lt;strong>ND 滤镜&lt;/strong>：即减光镜，减少进光量，延长曝光时间，用于拍摄云彩，溪流等长曝光场景。&lt;/p>
&lt;p>&lt;strong>AF&lt;/strong>：自动对焦（Auto Focus）。&lt;/p>
&lt;p>&lt;strong>AE&lt;/strong>：自动曝光（Auto Exposure）。&lt;/p>
&lt;h2 id="半按快门警告图标">半按快门警告图标&lt;/h2>
&lt;p>&lt;strong>抖动警告（!((📷))）&lt;/strong>：快门速度过慢，照片质量会因为微微抖动而模糊。可以改善周围环境亮度或是手动提高快门速度。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/image-20220820184826880.png" alt="">&lt;/p>
&lt;p>&lt;strong>自动曝光警告（!AE）&lt;/strong>：快门速度太快，可能照片会发暗。可以调低快门速度或是增大光圈等。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/image-20220820184847600.png" alt="">&lt;/p>
&lt;h2 id="各项参数的对抖动曝光噪点的影响">各项参数的对抖动、曝光、噪点的影响&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>参数&lt;/th>
 &lt;th>增加参数值对进光量的影响&lt;/th>
 &lt;th>说明&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>光圈（F）&lt;/td>
 &lt;td>提高&lt;/td>
 &lt;td>手动对焦模式或者快拍模式下，光圈越小，【超焦距】带来的取景深度越大&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>快门速度越快&lt;/td>
 &lt;td>降低&lt;/td>
 &lt;td>快门速度 1/250 适合抓拍，1/60 为通常的安全快门&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>ISO&lt;/td>
 &lt;td>提高&lt;/td>
 &lt;td>800 以内画质较好，超过 800 噪点明显变强&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>曝光补偿（EV）&lt;/td>
 &lt;td>提高&lt;/td>
 &lt;td>影响亮度，非自动档可用，本质是增减相机控制光圈、快门、ISO 的比例时的权重，通常拍摄雪景和较黑的物体时候需要调节&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>白平衡（WB）&lt;/td>
 &lt;td>无影响&lt;/td>
 &lt;td>影响色彩&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>白平衡补偿（B：G）&lt;/td>
 &lt;td>无影响&lt;/td>
 &lt;td>手动增减白平衡权值，可以做出胶片等效果&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>效果（D:C:S）&lt;/td>
 &lt;td>无影响&lt;/td>
 &lt;td>影响滤镜效果，可以拍出风格强烈的作品&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>ND 滤镜（开）&lt;/td>
 &lt;td>降低&lt;/td>
 &lt;td>在强光状态下打开 ND 滤镜可以降低 3 档进光量，即使在白天也能用慢门或者大光圈&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>闪光灯（开）&lt;/td>
 &lt;td>提高&lt;/td>
 &lt;td>在白天背光和夜晚都可以提高近景中被摄体的亮度&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table></description></item><item><title>Nintendo Switch 联机优化策略</title><link>https://sund.site/posts/2019/nintendo-switch-network-opt/</link><pubDate>Mon, 07 Oct 2019 22:18:00 +0800</pubDate><guid>https://sund.site/posts/2019/nintendo-switch-network-opt/</guid><description>&lt;h2 id="简单方法">简单方法&lt;/h2>
&lt;p>首先介绍下 Nintendo Switch 在哪里设置网络，如下图，设置界面=&amp;gt;互联网设置里，可以修改 IP，DNS 等常用网络配置。修改之后点击「链接测试」，可以测试你的 NAT 和下载、上传速度。&lt;/p>
&lt;p>&lt;img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7pz8xft9ej31i30u0ng9.jpg" alt="1">&lt;/p>
&lt;h3 id="首先设置路由器的-wifi-类型为-5g">首先：设置路由器的 WIFI 类型为 5G&lt;/h3>
&lt;p>因为 NS 对 2.4GHz 的 Wifi 优化非常差，所以一般玩家都选择设置 Wifi 类型为 5GHz，5G 的缺点是穿墙能力差，但是速度很快，所以建议把 NS 放在离路由器不太远的位置。&lt;/p>
&lt;p>&lt;img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7pzbkstq4j30vy0l2mz4.jpg" alt="image-20191007215608157">&lt;/p>
&lt;h3 id="最简单粗暴的方法购买加速器">最简单粗暴的方法：购买加速器&lt;/h3>
&lt;p>购买加速器是最省心省力的方案，以网易 UU 加速器为例，加速后可以把 NAT 从 D 上升到 B 或 A，完全可以满足大部分延迟要求较低游戏的需要。&lt;/p>
&lt;p>&lt;img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7pyt6dxbij31aw0qokjl.jpg" alt="image-20191007213820867">&lt;/p>
&lt;p>Mac 版 UU 加速器目前还处于免费测试阶段，可以随意使用。按照提示配置 NS 上的 IP 和 DNS 即可。但是如果想让联机速度突破 A，甚至小于 30ms 延迟，就要结合第二部分「进阶方法」中的内容了。&lt;/p>
&lt;h3 id="最方便的方法dns-优化">最方便的方法：DNS 优化&lt;/h3>
&lt;p>这也是最多人的办法，以「Splatoon2」为例，四川电信在不使用任何加速器的情况下，单单设置了合适的 DNS，就可以流畅体验乌贼娘了。注意这种方法在晚上 8 ～ 10 点高峰期间有一定概率掉线。下面提供一些我常用的 DNS，不同地区效果不同，需要自己尝试。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>218.102.23.228 &lt;span style="color:#75715e"># 一般用作日本eshop下载游戏，速度提升明显&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>203.198.7.66
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>168.126.63.1 &lt;span style="color:#75715e"># 著名韩国DNS节点，Splatoon2 联机常用&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>168.126.63.2 &lt;span style="color:#75715e"># 同上&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="进阶方法">进阶方法&lt;/h2>
&lt;p>进阶方法可以最大限度的提升你的网络通信效率。&lt;/p></description></item><item><title>8月做了什么</title><link>https://sund.site/posts/2019/aug-routine/</link><pubDate>Mon, 02 Sep 2019 15:52:58 +0800</pubDate><guid>https://sund.site/posts/2019/aug-routine/</guid><description>&lt;p>准备新开一个话题，用每个月的总结替代年度总结。这是第一篇。&lt;/p>
&lt;p>最近国内国际上大事不断，在这个历史转折点当口，每个从互联网汲取信息的人都应该有点独立思考能力。「第一性原理」（first principles thinking）是伊隆·马斯克在 TED 演讲时回答「为什么能够在不同的领域都能够取得成功？」时给出的答案。第一性原则要求我们剔除用「比较」来权衡事物好坏的思维方式，转而选择一层层向下探求本质，再由本质反推出认识。这里有篇&lt;a href="https://neilkakkar.com/A-framework-for-First-Principles-Thinking.html">博客文章&lt;/a>做了细致的讲解。&lt;/p>
&lt;h2 id="有什么发现">有什么发现&lt;/h2>
&lt;p>&lt;strong>七龙珠里的元气弹&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6m8onj2xij30sg0jx0ui.jpg" alt="EBX-IqpUYAEkJTP?format=jpg&amp;amp;name=medium">&lt;/p>
&lt;p>这是一群香港示威者把激光笔的光束汇聚到一张反光板上，以干扰警方行动。像七龙珠里孙悟空把大家的力量汇聚起来形成超大元气弹的画面。非常有想象力。&lt;/p>
&lt;p>&lt;strong>Hacker News 和 开发者头条、掘金的差别&lt;/strong>&lt;/p>
&lt;p>国内两大技术新闻「开发者头条」和「掘金」的文章主要以技术理论和工程实践为主。这两者都在一定程序上模仿国外的 Hacker News，但是 Hacker News 除了技术和工程实践，更多的是对政治、经济、文化的深度思考。&lt;/p>
&lt;p>在某种程度上，中国的技术人被阉割了右脑。右脑有赋予行为合理化的能力。国内的技术「场」，就是一个你只需要关心技术本身而不需要关心社会、文化影响的环境。&lt;/p>
&lt;p>&lt;strong>人生五十年，如梦又似幻&lt;/strong>&lt;/p>
&lt;p>前不久上一家公司的老板因为癌症去世了，年仅 51 岁。在 50 岁之前，他拥有纳斯达克上市的公司，在北京核心商圈有一栋办公楼。我想起《影武士》里织田信长唱的那首歌：&lt;/p>
&lt;blockquote>
&lt;p>人生五十年，与天地长久相较，如梦又似幻。一度得生者，岂有不灭者乎？&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>白领快乐水&lt;/strong>&lt;/p>
&lt;p>元气森林苏打气泡水，0 热量、苏打、气泡。这几个元素加起来就是现在办公室一族的全部追求了。这是一种真正的「现代饮料」。&lt;/p>
&lt;p>&lt;strong>马里奥创造家 2&lt;/strong>&lt;/p>
&lt;p>这是个创造快乐的游戏，拥有它的朋友可以玩玩我制作的地图：9PB-WGX-WVF&lt;/p>
&lt;p>&lt;img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6m8pb1q5fj30qm0dg17n.jpg" alt="image-20190902163956190">&lt;/p>
&lt;p>&lt;strong>任意听播客&lt;/strong>&lt;/p>
&lt;p>这个网站&lt;a href="https://getpodcast.xyz">https://getpodcast.xyz&lt;/a>可以把最受欢迎的中文博客添加到任意你常用的 podcast 客户端。&lt;/p>
&lt;p>&lt;img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6m8phqnqhj31cn0u07k1.jpg" alt="image-20190902164259542">&lt;/p>
&lt;h2 id="看过的书">看过的书&lt;/h2>
&lt;p>&lt;strong>《非暴力沟通》&lt;/strong>&lt;/p>
&lt;p>一本讲沟通的书，越是亲近的人，越应该认真的对待「沟通」这件事。但是我们日常生活中往往会采取相反的做法。&lt;/p>
&lt;p>&lt;strong>《交互的未来》&lt;/strong>&lt;/p>
&lt;p>原离线的主编 Bob 推荐的书，&lt;del>内容其实挺一般的&lt;/del>。里面有一个很有趣的思考，自动扶梯在故障时会变成普通的扶梯。这种能够出故障时「自我降级」的设计原则，其实生活中很常见，比如电动牙刷，蓝牙音箱，WIFI 智能插座。你还能想到哪些身边的设备呢？&lt;/p>
&lt;h2 id="言叶">言叶&lt;/h2>
&lt;blockquote>
&lt;p>Note that I do not claim that all of this makes me more productive, merely that it makes things more searchable.&lt;/p></description></item><item><title>制定一个人的日本旅行计划</title><link>https://sund.site/posts/2019/jp-travel/</link><pubDate>Thu, 11 Apr 2019 13:19:04 +0800</pubDate><guid>https://sund.site/posts/2019/jp-travel/</guid><description>&lt;p>独自一个人出国旅行有很多不方便，但作为交换，那份无拘无束的自由和旅途中的不期而遇完全值得这种付出。为了进一步降低不便，提高旅行体验，我从三个方面制定旅行计划：&lt;/p>
&lt;ul>
&lt;li>前期准备。这部分没有技术含量，网上很多攻略，我列举出来供参考&lt;/li>
&lt;li>路线规划。这部分使用了一些技巧和工具，是我自己总结的经验&lt;/li>
&lt;li>学习基本礼貌用语，地名和礼仪。这部分内容会增强你的旅行体验&lt;/li>
&lt;/ul>
&lt;p>带图原文： &lt;a href="https://mp.weixin.qq.com/s/rAZcFmW-96CrOkvQY4N04w">https://mp.weixin.qq.com/s/rAZcFmW-96CrOkvQY4N04w&lt;/a>&lt;/p>
&lt;h2 id="旅行计划">旅行计划&lt;/h2>
&lt;h3 id="-前期准备">&amp;gt; 前期准备&lt;/h3>
&lt;p>这部分都是固定套路，没有技巧。很多其他攻略都有，我整理出来供参考。&lt;/p>
&lt;p>&lt;em>护照&lt;/em>&lt;/p>
&lt;p>日本不接受个人申请，所以只能去淘宝找最近的旅行社申请。我在成都，所以找了一家信誉比较高的重庆旅行社（送签重庆日本领馆）。把必备的材料邮寄过去。大概 10~20 天出签。&lt;/p>
&lt;p>机票和酒店都不需要你提供，旅行社会解决。你只要安静等待出签。&lt;/p>
&lt;p>&lt;strong>使用工具&lt;/strong>：淘宝。&lt;/p>
&lt;p>&lt;em>机票&lt;/em>&lt;/p>
&lt;p>公认体验最好的是全日空航空(官网：&lt;a href="https://www.ana.co.jp/zh/cn/">https://www.ana.co.jp/zh/cn/&lt;/a>)。全日空的餐食和服务质量都非常高。建议提前两个月预订机票，在官网搜索计划旅行时间前后的日期，很大概率可以 3~5 折价格订到往返的机票。&lt;/p>
&lt;p>&lt;strong>使用工具&lt;/strong>: 全日空官方网站&lt;/p>
&lt;p>&lt;em>酒店&lt;/em>&lt;/p>
&lt;p>因为日本的民宿不被官方承认，所以 airbnb 之类的民宿出现纠纷是没有保障的。建议在 Booking 上预订酒店。和式酒店(日本传统风格的榻榻米地板的酒店)往往没有独立卫浴和床，所以价格会便宜很多，追求舒适的话建议订正常的酒店，想体验日本民风或者喜欢和很多外国人一起过集体生活的，可以考虑一些青年旅社和和式酒店，不建议考虑胶囊旅馆，体验非常差。&lt;/p>
&lt;p>另外，建议先读完本文&amp;quot;规划路线&amp;quot;部分，再预订酒店。&lt;/p>
&lt;p>&lt;strong>使用工具&lt;/strong>：Booking App&lt;/p>
&lt;p>&lt;em>电话卡&lt;/em>&lt;/p>
&lt;p>淘宝可以买到很便宜的日本 7 天 4G 流量卡。如果单人旅行的话，比随身 wifi 要方便不少。&lt;/p>
&lt;p>&lt;strong>使用工具&lt;/strong>：淘宝&lt;/p>
&lt;p>&lt;em>地铁券&lt;/em>&lt;/p>
&lt;p>西瓜卡(Suica)是关东地区的常用地铁卡。不但可以坐地铁还可以在便利店买东西，可以直接在日本机场购买。&lt;/p>
&lt;p>&lt;img src="http://img6.16fan.com/201510/28/113242h6rxvuqmvz3pqijy.jpg-700" alt="img">&lt;/p>
&lt;p>具体的购买方法见自动贩卖机。&lt;/p>
&lt;p>&lt;img src="http://img6.16fan.com/201510/28/114059iesz1ea7pe7duswg.png-700" alt="img">&lt;/p>
&lt;p>众所周知日本的交通比较贵。这里要好好说下技巧，日本很多针对外国游客的福利，比如东京地铁三日券，可以在 72 小时内任意乘坐地铁，非常划算。&lt;/p>
&lt;p>&lt;strong>使用工具&lt;/strong>：东京地铁网站，包括购买地铁票的方法和详细地图：&lt;a href="https://www.tokyometro.jp/tcn/ticket/travel/index.html">https://www.tokyometro.jp/tcn/ticket/travel/index.html&lt;/a>。&lt;/p>
&lt;p>如果怕到日本后找不到购买的地方，也可以在淘宝提前购买好。&lt;/p>
&lt;p>&lt;em>景点票&lt;/em>&lt;/p>
&lt;p>日本的大部分室外景点是不要钱的。很多观光路线有缆车、登山电车需要买票。建议提前上网查好目标城市的观光票是否有通票(比如我去箱根前，在东京新宿可以买到箱根 2 日周游券，可以乘坐所有缆车、电车等交通工具，参观所有景点免票)。这会省下很多钱，还能免去多次买票的麻烦。&lt;/p>
&lt;p>日本的城市都各自的宣传网站。可以登录上去查看旅行优惠和景点信息。&lt;/p>
&lt;p>&lt;strong>使用工具&lt;/strong>：搜索引擎搜索城市的官网。&lt;/p>
&lt;p>&lt;em>货币&lt;/em>&lt;/p>
&lt;p>建议在出发前至少兑换 3 万日元随身携带。注意日本商店找零大量使用硬币，所以有一个能装硬币的小钱袋是必须的（建议当地买一个）！另外日本兑换货币的地方主要是 7-11 便利店，而东京大阪这种大城市 7-11 便利店更是随处可见。所以不需要太担心。购物的话银联卡和 Visa 卡基本随处可用。&lt;/p>
&lt;p>&lt;strong>使用工具&lt;/strong>：有些银行兑换外币需要提前申请。到营业厅时记得随身携带身份证。&lt;/p>
&lt;h3 id="-规划路线">&amp;gt; 规划路线&lt;/h3>
&lt;p>我使用&amp;quot;看板&amp;quot;的方式来规划旅行路线。具体方法就是把想去的城市和旅行景点全部写在便签纸上（也可以用电子看板”Trello“），按照地区把同一个地区范围的景点贴在一起。一个人一天最多走 2&lt;del>3 个地区，每个地区 1&lt;/del>2 个景点（不建议行程制定的太匆忙）。按照这个原则，我制定了 4 步路线规划方案：&lt;/p></description></item><item><title>跨过真实和虚无的河</title><link>https://sund.site/posts/2018/csqstz/</link><pubDate>Thu, 04 Oct 2018 13:25:55 +0800</pubDate><guid>https://sund.site/posts/2018/csqstz/</guid><description>&lt;p>两个月前在亚马逊买村上春树《刺杀骑士团长》的简体中文版电子书，译者是大名鼎鼎林少华先生。我对林少华的了解，源自高中时期看的《挪威的森林》，林先生那晦涩的翻译和故弄玄虚的修辞让年少无知的我看得头昏脑涨。读了几章《刺杀骑士团长》后，唤起了我不愉快的青少年回忆，真的还是无法接受这种「不忠实于原著」的翻译风格呀。在这种心态下，最终还是去淘宝买了两册赖明珠的台译版来看。所以下面要讲的内容，都是基于台湾繁中版本的翻译。&lt;/p>
&lt;h2 id="主要人物-剧透">主要人物 （剧透）&lt;/h2>
&lt;p>&lt;strong>我&lt;/strong> ：青年画家，和妻子离婚后住进了朋友雨田政彦父亲过去生活过的山中别墅里，意外发现了著名画家雨田具彦藏在阁楼的画作《刺杀骑士团长》。后来机缘巧合认识了附近别墅居住的富豪免色先生和山下的秋川麻里惠一家。&lt;/p>
&lt;p>&lt;strong>雨田具彦&lt;/strong> ：朋友雨田政彦的父亲，90 岁高龄的画家，已经失去神志住在疗养院里。年轻在维也纳留学期间和恋人组织刺杀纳粹军官的活动，恋人被纳粹迫害致死，自己则因家族关系而苟且偷生回到国内。其弟弟也因参军入伍，在南京大屠杀期间留下心理创伤，回国后自杀。雨田具彦独居在主人公后来居住的山中别墅里，直到神志不清被儿子送去疗养院。&lt;/p>
&lt;p>&lt;strong>骑士团长&lt;/strong> : 在我无意中打开了山后被石头封住的井后，突然出现在我的画室里的自称是「Idea」（简中翻译为理念）的灵体。长的和雨田具彦画作里的骑士团长一模一样，只是身高只有 60 公分。本作中只有三个人能看见骑士团长——我、羽田具彦、秋川麻里惠。&lt;/p>
&lt;p>&lt;strong>秋川麻里惠&lt;/strong> ： 青春期刚刚发育的少女，童年在山中长大，拥有敏锐的洞察力。其母亲曾经是免色先生的女友，在和免色分手前两人发生关系。在生下麻里惠之后因毒蜂蛰咬过敏而死。后麻里惠和姑姑秋川苼子一起住在山里。免色一直认为麻里惠有可能是他的亲生女儿。&lt;/p>
&lt;p>&lt;strong>免色&lt;/strong> ： 富豪，生活井井有条，是自控力非常强又有能力控制住周围一切的男人。独居在附近的白色别墅里，常年用望远镜窥探秋川麻里惠一家的生活。&lt;/p>
&lt;h2 id="光即是影影即是光">光即是影，影即是光&lt;/h2>
&lt;p>《刺杀骑士团长》的故事源自莫扎特版的歌剧《唐璜》。讲的是风流成性的唐璜（台译：唐·乔万尼）在勾引骑士团长的女儿被发现后，在和骑士团长决斗中杀死了骑士团长，最后遭报应堕入地狱的故事。&lt;/p>
&lt;p>正如书中所说，Idea 是一种类似观念的东西，比如爱本身不是 Idea，但是产生爱的东西就是 Idea。我把它理解为「本我」，林少华说，书中出现的洞穴——井，在日语里和英文的「本我」谐音。所以我认为，书中多次出现的「骑士团长」也许是各个人物的内心本我的写照。年轻的雨田具彦对恋人、弟弟的死去充满自责和愧疚，又因为政治、家庭的原因无法对人诉说自己的痛苦，便将自己化身故事里的唐璜，刺杀了骑士团长，希望自己替代爱人和弟弟堕入地狱。&lt;/p>
&lt;p>值得注意的是，书里反复出现的元素「窥探」和「封闭的空间」。书中几处「窥探」的描写：&lt;/p>
&lt;ul>
&lt;li>在名为《刺杀骑士团长》的画作里，有一个从地下打开盖子窥探的长脸男&lt;/li>
&lt;li>用望远镜窥探麻里惠生活的免色&lt;/li>
&lt;li>仿佛暗中窥探我，我假想中的「开斯巴鲁森林人汽车的男人」&lt;/li>
&lt;li>最后躲在衣柜里窥探免色的秋川麻里惠&lt;/li>
&lt;/ul>
&lt;p>他们每个人都在好奇心的驱使下窥探别人（却在过程中窥探到了自己）。在漆黑的封闭空间里，意识和肉体剥离，仿佛灵魂出窍般看到了自己真实的内心。后山的洞穴之于我，曾经关押过的拘留所之于免色先生，衣柜之于秋川麻里惠，都是窥探到自己内心世界的封闭空间。&lt;/p>
&lt;p>如果按照我上面的理解，故事的脉络就是这样：主人公、免色、麻里惠、雨田具彦都是被自己内心折磨的、介于「真实和虚无之间」的人。主人公一方面觉得自己深爱妻子，另一方面怨恨妻子的背叛，自己却又与人妻发生关系，是介于背叛与被背叛的人。免色是能力超强控制一切的男人，却无法得知疑似女儿的麻里惠是否和自己有血缘关系，于是免色也是介于掌控和失控的男人。麻里惠不必说，对自己身世一无所知，介于「免色先生的女儿」和「不是免色先生女儿」两种身份之间。雨田具彦则纠结于年轻时的自己，在失去爱人和兄弟的痛苦中即是人人知晓的画家，又是一个无法告知任何人内心感受的孤独老人。&lt;/p>
&lt;p>每一个人都在真实和虚无之间徘徊。整个故事就是围绕村上春树构建起来的世界展开。光即是影，影即是光。真实和虚无互为存在的依据。&lt;/p>
&lt;p>中间的过程不再赘述，好奇的看官可以读到这里就打住，去买一本书，自己来细细品味。如果你不想读长篇小说或者已经读完只想看看我怎么理解，那么请继续往下看。&lt;/p>
&lt;p>故事给出了几种人的结局。&lt;/p>
&lt;p>为了拯救失踪的秋川麻里惠，主人公「我」按照「骑士团长」的提示，在雨田具彦的病床前重演了《刺杀骑士团长》中的一幕，目睹了我亲手杀死了「骑士团长」的雨田具彦内心终于释然，几天后安详辞世。几十年来萦绕在老人心头的痛苦、自责、愧疚被我一刀捅破，产生怨恨的种子不复存在。&lt;/p>
&lt;p>在杀死骑士团长过程中引出了地板下窥探的「长脸男」（也是画作中出现的人物），「我」搬开地上的盖板进入了隐喻的地下世界。在经过真实和虚无之河时，「我」把秋川麻里惠的护身符（企鹅挂饰）留给河中间的摆渡人当做船资后，「我」独自爬进漫长的洞穴（此处和主人公小时候与妹妹爬进富士山附近的风洞的回忆呼应），在战胜了「双重隐喻」后，在漆黑的封闭空间里，内心终于决定和妻子和解（也终于与自己和解）。&lt;/p>
&lt;p>至于什么是「双重隐喻」，书中提到是骑士团长提醒主人公要小心的一种危险的存在。会吞噬那些意志不坚定的人。在我理解，这是内心本我和现实互相影响时，不要让自以为的真实改变了本我的一种比喻（姑且这么解释吧）。&lt;/p>
&lt;p>回到秋川麻里惠的故事线，因为「我」把麻里惠的护身符留给了「真实与虚无之河」的摆渡人，所以麻里惠的身份永远介于真实和虚无之间，也就是说，麻里惠到底是不是免色的女儿永远成了谜。故事的最后章节，麻里惠躲在免色家衣橱里看到的「好像是免色却是不是免色」的人影，就是免色探求麻里惠真实身份的本我的隐喻。麻里惠紧紧抓住衣柜里的女人衣服（其实是她生母留在免色家，被免色珍藏起来的衣物），并且被「骑士团长」告知：「衣服会保护你」。这恰恰说明，免色在故事的最后，内心依然是爱着麻里惠的生母，所以最后放弃了探求麻里惠的真实血缘身份。不去打扰麻里惠平静的生活。这也是「我」在地下世界做出的决定和真实世界产生了某种联系，最后拯救了麻里惠平静的生活，让真相永远隐藏起来。&lt;/p>
&lt;p>免色先生最后和麻里惠的姑姑笙子热恋，似乎不再关心麻里惠的身世了……这是我唯一觉得村上春树有点草率的处理。&lt;/p>
&lt;h2 id="题外话">题外话&lt;/h2>
&lt;p>在读完《刺杀骑士团长》上册后，我正好休年假去日本旅行，期间在箱根的山里住了一宿民宿。箱根距离书中主人公居住的小田原市不远，在山里吹着风听雨声时，真的有种置身小说里的感觉。我住的那间和屋非常简陋，风一吹四周的窗子和木板拉门都会吱吱嘎嘎作响。晚间寂静无人的乡村里还能隐约听到风铃的声音，像极了书里主人公在深夜听到后山摇铃声的场景。只有日本的作家才能写出这样的故事，用那种日本人细腻、敏感的神经，探索人心里不易察觉的感受。也希望林少华老师晚年幸福，不要再接手村上春树的作品翻译工作了。:)&lt;/p></description></item><item><title>《Python源码剖析》第三部分——Python虚拟机进阶</title><link>https://sund.site/posts/2017/python-3/</link><pubDate>Fri, 14 Jul 2017 00:00:00 +0000</pubDate><guid>https://sund.site/posts/2017/python-3/</guid><description>&lt;h2 id="python-环境初始化">Python 环境初始化&lt;/h2>
&lt;p>进程启动后创建 PyInterpreterObject，PyInterpreterObject 里面维护了全局 module 映射表&lt;code>interp-&amp;gt;modules&lt;/code>，该表默认初始化为&lt;strong>buildin&lt;/strong>模块，&lt;/p>
&lt;h2 id="python-的-import-机制">Python 的 import 机制&lt;/h2>
&lt;blockquote>
&lt;p>Python 虚拟机在执行“import A”时，会为 package A 创建一个 module 对象，同时会在该 module 维护的 dict 中添加两个表示元信息的属性：&lt;strong>name&lt;/strong>和&lt;strong>path&lt;/strong>。而 Python 虚拟机从 A/&lt;strong>init&lt;/strong>.py 中执行“import mod1”时，也会为 mod1 创建一个 module 对象，同时也会设置&lt;strong>name&lt;/strong>属性，但是这时就不设置&lt;strong>path&lt;/strong>属性了。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>package 是由 module 聚合而成。更清楚的表述是：module 属于一个 package。我们不能说，module1 属于 module2。我们前面已经看到，module 的路径实际上是一种树状结构，从图 14-11 中可以看到，在这个树状结构中，module 的父节点只能是 package，而不可能是另一个 module。&lt;/p>
&lt;/blockquote>
&lt;h2 id="gil">GIL&lt;/h2>
&lt;p>Python 虚拟机使用一个全局解释器锁（Global Interpreter Lock，GIL）来互斥线程对 python 虚拟机的使用。&lt;/p>
&lt;p>注意这里 GIL 是解释器一级的互斥锁，也就是同一时间只能有一个线程占用 python 解释器。所以&lt;strong>GIL 是用来让操作系统中分配的多个线程互斥的使用 python 解释器的，是建立在系统线程调度基础之上的一套 C API 互斥机制&lt;/strong>，是比操作系统线程资源更大粒度的锁。&lt;/p>
&lt;p>Python 的线程是基于操作系统原生线程的，所以 python 的线程不是「虚拟出来的」。&lt;/p>
&lt;blockquote>
&lt;p>那么究竟 Python 会在众多的等待线程中选择哪一个幸运儿呢？答案是，不知道。没错，对于这个问题，Python 完全没有插手，而是交给了底层的操作系统来解决。也就是说，Python 借用了底层操作系统所提供的线程调度机制来决定下一个进入 Python 解释器的线程究竟是谁。&lt;/p></description></item><item><title>《Python源码剖析》第二部分——Python虚拟机基础</title><link>https://sund.site/posts/2017/python-2/</link><pubDate>Thu, 13 Jul 2017 00:00:00 +0000</pubDate><guid>https://sund.site/posts/2017/python-2/</guid><description>&lt;h2 id="python-执行环境">Python 执行环境&lt;/h2>
&lt;blockquote>
&lt;p>在编译过程中，这些包含在 Python 源代码中的静态信息都会被 Python 编译器收集起来，编译的结果中包含了字符串，常量值，字节码等在源代码中出现的一切有用的静态信息。在 Python 运行期间，这些源文件中提供的静态信息最终会被存储在一个运行时的对象中，当 Python 运行结束后，这个运行时对象中所包含的信息甚至还会被存储在一种文件中。这个对象和文件就是我们这章探索的重点：PyCodeObject 对象和 pyc 文件。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>在程序运行期间，编译结果存在于内存的 PyCodeObject 对象中；而 Python 结束运行后，编译结果又被保存到了 pyc 文件中。当下一次运行相同的程序时，Python 会根据 pyc 文件中记录的编译结果直接建立内存中的 PyCodeObject 对象，而不用再次对源文件进行编译了。&lt;/p>
&lt;/blockquote>
&lt;p>从文章摘录可见，python 生成的不是编译后的文件，而是&lt;code>.py&lt;/code>文件对应的静态信息——PyCodeObject，这里包括了字节码指令序列、字符串、常量。每个名字空间(类、模块、函数)都对应一个独立的 PyCodeObject。(python 连编译后的文件里存的都是个对象！)&lt;/p>
&lt;p>不被 import 的 py 文件不会生成 pyc。标准库里有 py_compile 等方法也可以生成 pyc。&lt;/p>
&lt;p>&lt;strong>import 机制&lt;/strong> 导入某个模块时，先查找对应的 pyc，如果没有 pyc 就生成然后 import 这个 pyc。(所以实际导入的并不是 py 文件，而是 py 文件编译后的 PyCodeObject)。&lt;/p>
&lt;p>&lt;strong>PyFrameObject&lt;/strong> Python 程序运行时的「执行环境」。参考操作系统执行可执行文件的过程。Python 也是将函数对应的执行环境封装成栈帧的形式加载进内存。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">typedef&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> _frame {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PyObject_VAR_HEAD
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> _frame &lt;span style="color:#f92672">*&lt;/span>f_back; &lt;span style="color:#75715e">//执行环境链上的前一个frame
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> PyCodeObject &lt;span style="color:#f92672">*&lt;/span>f_code; &lt;span style="color:#75715e">//PyCodeObject对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> PyObject &lt;span style="color:#f92672">*&lt;/span>f_builtins; &lt;span style="color:#75715e">//builtin名字空间
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> PyObject &lt;span style="color:#f92672">*&lt;/span>f_globals; &lt;span style="color:#75715e">//global名字空间
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> PyObject &lt;span style="color:#f92672">*&lt;/span>f_locals; &lt;span style="color:#75715e">//local名字空间
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> PyObject &lt;span style="color:#f92672">**&lt;/span>f_valuestack; &lt;span style="color:#75715e">//运行时栈的栈底位置
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> PyObject &lt;span style="color:#f92672">**&lt;/span>f_stacktop; &lt;span style="color:#75715e">//运行时栈的栈顶位置
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">……&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> f_lasti; &lt;span style="color:#75715e">//上一条字节码指令在f_code中的偏移位置
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> f_lineno; &lt;span style="color:#75715e">//当前字节码对应的源代码行
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">……&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//动态内存，维护（局部变量+cell对象集合+free对象集合+运行时栈）所需要的空间
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> PyObject &lt;span style="color:#f92672">*&lt;/span>f_localsplus[&lt;span style="color:#ae81ff">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} PyFrameObject;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Python 标准库的&lt;code>sys._getframe()&lt;/code>可以动态的在程序执行时获取当前内存中活跃的 PyFrameObject 信息。&lt;/p></description></item><item><title>《Python源码剖析》第一部分——Python对象基础</title><link>https://sund.site/posts/2017/python/</link><pubDate>Wed, 12 Jul 2017 00:00:00 +0000</pubDate><guid>https://sund.site/posts/2017/python/</guid><description>&lt;h2 id="python-的对象初始化">Python 的对象初始化&lt;/h2>
&lt;blockquote>
&lt;p>在 Python 中，对象就是为 C 中的结构体在堆上申请的一块内存，一般来说，对象是不能被静态初始化的，并且也不能在栈空间上生存。唯一的例外就是类型对象，Python 中所有的内建的类型对象（如整数类型对象，字符串类型对象）都是被静态初始化的。&lt;/p>
&lt;/blockquote>
&lt;p>python 的对象不像 C 是分配在栈、堆、data segment 等位置，而是全部分配在堆上！只有 python 内置类型在初始化时候才是被 C 语言层静态初始化。&lt;/p>
&lt;p>PyObject 内部就两样：引用计数器、类型对象指针。&lt;/p>
&lt;p>类型对象的定义：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">typedef&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> _typeobject {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PyObject_VAR_HEAD
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>tp_name; &lt;span style="color:#75715e">/* For printing, in format &amp;#34;&amp;lt;module&amp;gt;.&amp;lt;name&amp;gt;&amp;#34; */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> tp_basicsize, tp_itemsize; &lt;span style="color:#75715e">/* For allocation */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/* Methods to implement standard operations */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> destructor tp_dealloc;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printfunc tp_print;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">……&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/* More standard operations (here for binary compatibility) */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hashfunc tp_hash;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ternaryfunc tp_call;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">……&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} PyTypeObject;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>PyObject_VAR_HEAD&lt;/code>是可变类型的头信息，其中除了&lt;code>PyObject_HEAD&lt;/code>的内容外，额外添加了一个代表该对象元素数量的整型。从上边代码可见，python 的类型也是一个可变对象。&lt;/p></description></item><item><title>一些投资知识</title><link>https://sund.site/posts/2017/investment/</link><pubDate>Thu, 19 Jan 2017 13:25:55 +0800</pubDate><guid>https://sund.site/posts/2017/investment/</guid><description>&lt;h2 id="资产配置">资产配置&lt;/h2>
&lt;p>债、股、基金等综合配置。基金有的偏股，有的偏债，有的偏另类。看清楚哪些基金适合自己。&lt;/p>
&lt;p>每种理财产品、基金都是有一些底层资产构成。&lt;/p>
&lt;h3 id="什么是底层资产">什么是底层资产&lt;/h3>
&lt;ul>
&lt;li>债类资产(固定收益资产)&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>这类资产风险取决于平台投资的内容，债务主体(国家、公司、个人)。风险最低。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>股类资产(高风险、高收益)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>另类资产(最高风险、最高收益)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>如房地产、农产品、黄金、原油、文玩收藏、比特币等。&lt;/p>
&lt;/blockquote>
&lt;h3 id="理财风险等级">理财风险等级&lt;/h3>
&lt;p>银行理财的风险级别分成 1-5 级，在合同里会标识出来，比如 R1-R5，谨慎型产品(R1)、稳健型产品(R2)、平衡型产品(R3)、进取型产品(R4)、激进型产品(R5)。&lt;/p>
&lt;p>一般 R1-R2 是可以认为比较稳健、基本不会亏本的，R5 就比较危险了。&lt;/p>
&lt;h3 id="固定收益类资产低风险">固定收益类资产(低风险)&lt;/h3>
&lt;ul>
&lt;li>国债(3%左右)&lt;/li>
&lt;li>银行定期存款(小城乡银行利息高，国家有 50 万以内存款的保险)&lt;/li>
&lt;li>网络银行存款(微众银行，五年期定存年化 5%)&lt;/li>
&lt;li>银行理财(保本类 3-5%，非保本类高一点点)&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>结构性理财比非结构性理财高些。(既然买银行理财就是图安全，所以要买保本或风险低的。
&lt;a href="http://www.chinawealth.com.cn/zzlc/index.shtml">中国理财网&lt;/a>可以查看风险和收益，是权威的半官方类网站。银行 T+0 产品随时可以到帐，适合大量临时性资金的理财)&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>保险理财。虽然名字叫保险，但是本身没有保障功能，是保险公司包装出来的理财产品。&lt;/li>
&lt;li>信托、券商资产管理计划&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;ul>
&lt;li>信托。信托的本质也是债券。信托产品底层就是债券。信托公司包装后卖给你。所以评估风险标准仍然是信托公司本身的实力。如中信信托、平安信托比较强大，本身风险较低。&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>券商的资产管理计划。100 万起，风险和收益都比信托高。本质上是企业债券。但是借款规模大，企业运营不景气时风险高。&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;ul>
&lt;li>P2P。现在买要比之前风险低，推荐资产是小资产(如个人消费、小买卖等)。P2P 在理财中占比不要超过 20%比较好。知名度比较高的平台：陆金所、人人贷、有利网、小赢、桔子理财、积木盒子等等。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>财经信息来源：财联社，财新网
读研报推荐迈博汇金。又叫慧博投研资讯。网址是&lt;a href="http://www.microbell.com/newweb/web/search?index=0">http://www.microbell.com/newweb/web/search?index=0&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h3 id="浮动收益类资产">浮动收益类资产&lt;/h3>
&lt;p>&lt;strong>基金&lt;/strong>&lt;/p>
&lt;p>&lt;em>理财工具&lt;/em>&lt;/p>
&lt;ul>
&lt;li>蚂蚁聚宝&lt;/li>
&lt;li>&lt;a href="http://fund.chinastock.com.cn/jjpj/">基金评价报表&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;em>分类&lt;/em>&lt;/p>
&lt;ul>
&lt;li>货币基金。风险最低，如余额宝就是。收益很低，流动性强。&lt;/li>
&lt;li>债券基金。风险较低。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>债基按风险分为：&lt;/p>
&lt;ul>
&lt;li>一级债基。风险低，纯买债券。&lt;/li>
&lt;li>二级债基。80%买债券，20%买股票。(推荐定投，进可攻退可守)&lt;/li>
&lt;li>混合偏债基金。&lt;/li>
&lt;li>可转债基金。&lt;/li>
&lt;/ul>
&lt;p>买债基适合选择成立时间长，收益稳定的。
年底或资金紧张时，金融机构赎回债券，会导致债基市场低迷。从长期(10 年)看，债基仍然保持上升趋势。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>股票基金。&lt;/li>
&lt;li>另类基金。挂钩房地产、黄金等。&lt;/li>
&lt;/ul>
&lt;p>封闭式基金平时不可以购买，会在特定时段开放购买，需要常查看基金公告。&lt;/p>
&lt;p>&lt;strong>股票&lt;/strong>&lt;/p>
&lt;p>理财工具：雪球、华泰证券、巨潮咨询(看企业年报等)、迈博汇金&lt;/p>
&lt;p>Wind 金融数据。&lt;/p>
&lt;blockquote>
&lt;p>炒股的原则：花一段时间选定一些熟悉标的公司，特定去研究它。不要听消息或听股神建议炒股。&lt;/p>
&lt;/blockquote>
&lt;h3 id="房地产">房地产&lt;/h3>
&lt;p>投资房产的标准是看城市法制程度(办事是否需要找关系)，年轻人就业率。&lt;/p>
&lt;h3 id="理财规划工具">理财规划工具&lt;/h3>
&lt;p>好规划网、七分钟理财。&lt;/p>
&lt;p>资产盘点：财余管家&lt;/p>
&lt;h3 id="关于定投">关于定投&lt;/h3>
&lt;p>定投可以磨平金融市场波动造成的影响，适合投资长期稳定上升的资产。3 年内持续下跌的资产不适合定投。&lt;/p></description></item><item><title>Python2 中字符类型的一些坑</title><link>https://sund.site/posts/2017/py-str/</link><pubDate>Wed, 11 Jan 2017 11:09:00 +0000</pubDate><guid>https://sund.site/posts/2017/py-str/</guid><description>&lt;h2 id="问题">问题&lt;/h2>
&lt;p>有一道面试题是这样的：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>a &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">u&lt;/span>&lt;span style="color:#e6db74">&amp;#39;China&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>b &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;China&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">u&lt;/span>&lt;span style="color:#e6db74">&amp;#39;中国&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>d &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;中国&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print &lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#e6db74">%s&lt;/span>&lt;span style="color:#e6db74"> &lt;/span>&lt;span style="color:#e6db74">%s&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span> &lt;span style="color:#f92672">%&lt;/span> (a, b)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print &lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#e6db74">%s&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span> &lt;span style="color:#f92672">%&lt;/span> c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print &lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#e6db74">%s&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span> &lt;span style="color:#f92672">%&lt;/span> d
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print &lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#e6db74">%s&lt;/span>&lt;span style="color:#e6db74"> &lt;/span>&lt;span style="color:#e6db74">%s&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span> &lt;span style="color:#f92672">%&lt;/span> (c, d)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>判断打印后的效果。&lt;/p>
&lt;p>先说正确答案，只有最后一行会报错。&lt;/p>
&lt;h2 id="分析">分析&lt;/h2>
&lt;p>在 Python2 里，默认的字符类型是&lt;code>str&lt;/code>，这个&lt;code>str&lt;/code>和 Python3 的&lt;code>str&lt;/code>完全不同，Python2 的&lt;code>str&lt;/code>类型是 8 位的 ascii 序列。Python2 在处理&lt;code>str&lt;/code>类型转换时遵循这样的规则：&lt;strong>如果被处理的&lt;code>str&lt;/code>型变量值小于 7 位，就可以和&lt;code>unicode&lt;/code>类型混用。可以做&lt;code>+&lt;/code>连接，格式化等操作，同 unicode 享受同样的待遇。&lt;/strong>&lt;/p>
&lt;p>Python2 在格式化字符时，会把&lt;code>str&lt;/code>格式化为&lt;code>str&lt;/code>，如果字符串里混入了&lt;code>unicode&lt;/code>，就会把其他字符都转化为&lt;code>unicode&lt;/code>。所以这道题里 1 处的 a，b 两个值混合后的字符就是一个 unicode 字符串，c 和 d 单独格式化后仍保留了自己的格式。但是 Python2 在格式化代码位置 4 时，发现 c 是 unicode 而 d 不是，就会尝试按照上面的混用规则，格式化 d 为 unicode 类型，但是 d 的值&lt;code>'中国'&lt;/code>显然是一个大于 7 位的&lt;code>str&lt;/code>，因此 Python2 抛出 UnicodeDecodeError。&lt;/p></description></item><item><title>Python yield关键字的底层实现</title><link>https://sund.site/posts/2017/py-yield/</link><pubDate>Wed, 28 Dec 2016 18:00:00 +0000</pubDate><guid>https://sund.site/posts/2017/py-yield/</guid><description>&lt;p>这几天面试被问到类似的问题，顺便看了看 Python 的源码，参考网上的教程，总结一下 yield 关键字在 C 层面是如何实现的。&lt;/p>
&lt;h2 id="举个栗子">举个栗子&lt;/h2>
&lt;p>我们先看一个 python 生成器函数的例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> dis &lt;span style="color:#f92672">import&lt;/span> dis
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">func&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">yield&lt;/span> i
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print i
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dis(func)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a &lt;span style="color:#f92672">=&lt;/span>func()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a&lt;span style="color:#f92672">.&lt;/span>next()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a&lt;span style="color:#f92672">.&lt;/span>next()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 python 的库 dis 可以直接查看 python 虚拟机运行的字节码。&lt;code>dis(func)&lt;/code>的打印如下：&lt;/p>
&lt;pre tabindex="0">&lt;code> 6 0 LOAD_CONST 1 (4)
 3 STORE_FAST 0 (i)

 7 6 LOAD_FAST 0 (i)
 9 YIELD_VALUE
 10 POP_TOP

 8 11 LOAD_FAST 0 (i)
 14 PRINT_ITEM
 15 PRINT_NEWLINE
 16 LOAD_CONST 0 (None)
 19 RETURN_VALUE
&lt;/code>&lt;/pre>&lt;p>我们猜测其中第二列(代表字节码偏移量)为 9 的指令&lt;code>YIELD_VALUE&lt;/code>就是 yield 关键字的执行代码，进入 Python2.7.12 源码目录，在解释器执行字节码的主函数&lt;code>PyEval_EvalFrameEx&lt;/code>中找到了下面一段：&lt;/p></description></item><item><title>Python 巧妙地将rpc接口封装成pythonic的链式调用</title><link>https://sund.site/posts/2017/py-pythonic/</link><pubDate>Tue, 25 Oct 2016 15:40:43 +0000</pubDate><guid>https://sund.site/posts/2017/py-pythonic/</guid><description>&lt;p>这是一个外国人实现的 Zabbix(一个开源监控工具)的 Python Client——pyzabbix 里的代码片段。&lt;/p>
&lt;h2 id="rpc-调用">RPC 调用&lt;/h2>
&lt;p>Rpc 调用的流程是向 rpc 服务端指定的 uri(如&lt;a href="http://www.abc.com/jsonrpc.php">http://www.abc.com/jsonrpc.php&lt;/a>) 发送 json(或其他双方约定格式)数据包，数据包里有 rpc 版本信息、方法名、参数等。下面&lt;code>Zabbix&lt;/code>类里的&lt;code>do_request&lt;/code>方法就完成了将方法名和方法参数打包 json 后发送请求的过程。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Zabbix&lt;/span>(object):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># ... skip other class methods&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">do_request&lt;/span>(self, method, params&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">None&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> request_json &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;jsonrpc&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;2.0&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;method&amp;#39;&lt;/span>: method,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;params&amp;#39;&lt;/span>: params &lt;span style="color:#f92672">or&lt;/span> {},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;id&amp;#39;&lt;/span>: self&lt;span style="color:#f92672">.&lt;/span>id,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>session&lt;span style="color:#f92672">.&lt;/span>post(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>url,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> data&lt;span style="color:#f92672">=&lt;/span>json&lt;span style="color:#f92672">.&lt;/span>dumps(request_json),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> timeout&lt;span style="color:#f92672">=&lt;/span>self&lt;span style="color:#f92672">.&lt;/span>timeout
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="技巧">技巧&lt;/h2>
&lt;p>但是为了方便，我们在 python 里一般使用&lt;code>zabbixclient.host.get(args)&lt;/code>这样的链式调用，而不用&lt;code>zabbixclient('host.get', args)&lt;/code>这样的调用方式。pyzabbix 的作者巧妙的实现了这样的转换。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Zabbix&lt;/span>(object):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># ... skip other class methods&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">do_request&lt;/span>(self, method, params&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">None&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> request_json &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;jsonrpc&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;2.0&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;method&amp;#39;&lt;/span>: method,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;params&amp;#39;&lt;/span>: params &lt;span style="color:#f92672">or&lt;/span> {},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;id&amp;#39;&lt;/span>: self&lt;span style="color:#f92672">.&lt;/span>id,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>session&lt;span style="color:#f92672">.&lt;/span>post(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>url,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> data&lt;span style="color:#f92672">=&lt;/span>json&lt;span style="color:#f92672">.&lt;/span>dumps(request_json),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> timeout&lt;span style="color:#f92672">=&lt;/span>self&lt;span style="color:#f92672">.&lt;/span>timeout
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># python内建方法，当获取某个对象的属性时，调用该对象的该方法&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> __getattr__(self, attr):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;Dynamically create an object class (ie: host)&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 此处把self传给ZabbixAPIObjectClass的self.parent&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> ZabbixAPIObjectClass(attr, self)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ZabbixAPIObjectClass&lt;/span>(object):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> __init__(self, name, parent):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>name &lt;span style="color:#f92672">=&lt;/span> name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>parent &lt;span style="color:#f92672">=&lt;/span> parent
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> __getattr__(self, attr):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;Dynamically create a method (ie: get)&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">fn&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>args, &lt;span style="color:#f92672">**&lt;/span>kwargs):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> args &lt;span style="color:#f92672">and&lt;/span> kwargs:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">raise&lt;/span> &lt;span style="color:#a6e22e">TypeError&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Found both args and kwargs&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 此处把父类传进来的方法名name和子方法attr拼成rpc的方法名&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>parent&lt;span style="color:#f92672">.&lt;/span>do_request(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#e6db74">{0}&lt;/span>&lt;span style="color:#e6db74">.&lt;/span>&lt;span style="color:#e6db74">{1}&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>format(self&lt;span style="color:#f92672">.&lt;/span>name, attr),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> args &lt;span style="color:#f92672">or&lt;/span> kwargs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )[&lt;span style="color:#e6db74">&amp;#39;result&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> fn
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>类似地，很多接口的实现都可以照搬这种方式把参数调用改成链式调用，如 pymongo，redis-py 等。&lt;/p></description></item><item><title>Python Fabric库无法启动后台进程的问题和解决办法</title><link>https://sund.site/posts/2017/py-fabric/</link><pubDate>Wed, 19 Oct 2016 16:25:51 +0000</pubDate><guid>https://sund.site/posts/2017/py-fabric/</guid><description>&lt;h2 id="问题和处理方法">问题和处理方法&lt;/h2>
&lt;p>Python 的 Fabric 库能够方便的远程操作 Linux 主机执行命令或传输文件。其实现方式就是底层实现 ssh 协议，例如执行下面代码的 run 方法，在目标主机上启动一个 zabbix 后台服务：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> fabric &lt;span style="color:#f92672">import&lt;/span> api
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> fabric.tasks &lt;span style="color:#f92672">import&lt;/span> Task
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Zabbix&lt;/span>(Task):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">run&lt;/span>(self, kwargs):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">with&lt;/span> api&lt;span style="color:#f92672">.&lt;/span>settings(host_string&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;192.168.1.2&amp;#39;&lt;/span>, user&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;root&amp;#39;&lt;/span>, password&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;123456&amp;#39;&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> api&lt;span style="color:#f92672">.&lt;/span>run(&lt;span style="color:#e6db74">&amp;#39;service zabbix_agentd start&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但是这样操作后虽然 Fabric 的 output 返回结果打印是启动成功，但是 ssh 登录目标主机，却不见 zabbix_agentd 进程，这说明没有真正启动起来。&lt;/p>
&lt;p>我查询了 Fabric 文档，发现需要在 api.run 里添加参数&lt;code>pty=False&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span> api&lt;span style="color:#f92672">.&lt;/span>run(&lt;span style="color:#e6db74">&amp;#39;service zabbix_agentd start&amp;#39;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">，&lt;/span> pty&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">False&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样就成功启动了后台进程。&lt;/p>
&lt;h2 id="原因">原因&lt;/h2>
&lt;h3 id="什么是-pty">什么是 pty？&lt;/h3>
&lt;p>pty 是 pseudo-tty，众所周知 tty 是 Linux 支持输入与输出的终端设备，在 shell 下执行&lt;code>ps&lt;/code>可以查看每个进程对应的 tty 设备号，如&lt;code>ttys0001&lt;/code>。&lt;/p>
&lt;p>pty 是为了解决远程连接时一方不希望对方直接 ssh 连接到主机上而诞生的「虚拟设备」，即伪 tty，其原理是在远程主机和本地之间同时启动 pty 端口连接终端，可以类比进程间的通道，pty 两端同时执行输入输出操作，如同本地直接连接到远程主机。但是一旦断开本地与远程主机的连接，pty 就会结束所有刚才的进程。&lt;/p></description></item><item><title>Python defaultdict结构作计数器的用法</title><link>https://sund.site/posts/2017/py-defaultdict/</link><pubDate>Tue, 11 Oct 2016 15:00:16 +0000</pubDate><guid>https://sund.site/posts/2017/py-defaultdict/</guid><description>&lt;p>在开发中经常需要用到计数器，当函数 foo 调用另一个函数 bar 时，为了确认调用 bar 之后处理的结果正确性，经常需要使用计数器来统计 bar 函数里处理成功了多少次。例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">foo&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> success_num &lt;span style="color:#f92672">=&lt;/span> bar()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print success_num
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">bar&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 假设这个任务要迭代100次.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> count:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Do something.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">except&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">finally&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> n
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但是，这里需要定义多个计数器变量来保存计数。每多一个 bar 函数就要多定义两次计数器。有没有类似 C 语言指针一样的方法，可以在 foo 中定义后直接传给 bar，在 bar 里修改值呢。&lt;/p>
&lt;p>众所周知，Python 的参数传值实际传的是变量的拷贝，但是对于像字典、列表等非基本数据结构，实际传给参数的是这个数据结构的指针地址，修改指针地址指向的实际值就可以在函数内外实现传递数据的效果了。那么利用这个特性，可以结合 python 标准库 collections 里的 defaultdict 结构来实现一个更方便的计数器：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> collections &lt;span style="color:#f92672">import&lt;/span> defaultdict
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">foo&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#f92672">=&lt;/span> defaultdict(int)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bar(result)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print result
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">bar&lt;/span>(result):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> count:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Do something.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result[&lt;span style="color:#e6db74">&amp;#39;success&amp;#39;&lt;/span>] &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">except&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result[&lt;span style="color:#e6db74">&amp;#39;fail&amp;#39;&lt;/span>] &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样，变量&lt;code>result&lt;/code>就是存有正确计数和错误计数的字典。&lt;/p></description></item><item><title>怎样的建议才有价值</title><link>https://sund.site/posts/2017/talk-is-cheap/</link><pubDate>Thu, 25 Aug 2016 13:13:47 +0800</pubDate><guid>https://sund.site/posts/2017/talk-is-cheap/</guid><description>&lt;p>我想很多时候我们下决心做一件事，都要征求周围人的建议。这些建议有好有坏。坏的建议不但帮不了你，还会歪曲你对事实的认识。最近我在研究系统学习英文的方法，偶然在豆瓣小站里看到了开头那段话，对此深表认同。以我个人健身的经历，在报名私教课之前也寻求过很多人的建议。大部分会告诉你，健身(减肥)最重要的就是坚持。他们还会煞有介事的告诉你要「管住嘴，迈开腿」。在这一年里，我减掉了大概 25KG 体重，最大的感受——如果没有教练指导，我自己是断然不会坚持下来的。大部分的建议都像开头引用的那段话一样，是假大空的虚话，废话。&lt;/p>
&lt;p>「任何一个通过自我磨练掌握了某一项具体技能或者在某领域内有一定造诣的人，都会对该领域有着起码的基本认知和独特的个人总结，如果你向其请教，得到的断然不会是“努力去做或者坚持最重要”之类的假大空的虚话」&lt;br>
—— 豆瓣英语学习大神 恶魔奶爸 Sam&lt;/p>
&lt;p>怎样征求有用的建议？结合我这些年减肥失败的教训，笼统的概括为：如果你要做一件长期投入的事儿，那么请咨询跟你情况类似，且做成了这件事的人。&lt;/p>
&lt;p>首先「情况类似」很重要。因为很多人是科班出身，比如健身教练，他们大部分从上学起就被动养成了科学饮食、运动的好习惯。这些习惯并不是主动思考之后产生的，所以这些人在传授你知识时往往模糊不清的告诉你应该如何做，却说不出所以然。再比如英语系的学生就很难告诉你行之有效的英语学习方法，他们会告诉你大量看美剧英剧，背单词。但是你根本没有他们的学习环境，几乎不可能坚持下来。在语言学习中有「可理解输入」的概念，简单解释就是——你必须接受那些「你能够理解」的知识，否则你就吸收不了(记不住)。同理，知识在灌输给我们时候，如果不解释清楚来由，我们就很难有深刻认识。所以征求建议的对象如果跟你情况类似，你往往能听到更加切实可行的建议，比如在某个阶段应该注意什么，可能片面，但是有效。比如我在健身初期，咨询同学大伟很多健身的入门知识，关于人体代谢率，关于自重训练。这些东西，科班出身的教练通常不会细致地讲解给我。&lt;/p>
&lt;p>其次「要征求做成了这件事的人」，这就是开头那段话的意义，那些没做成这件事儿的人，大都输在了「坚持」这两个字上。在把这一信息转告别人时，这些人就会主观放大坚持的重要性。你去征求这些自己都没成事儿的人建议，得到的都是些「管住嘴，迈开腿」，「坚持不懈」之类的屁话。我这一年锻炼和饮食的心得就是不断学习，反复修订计划和总结经验。另外还有一种傻逼理论「每个人都有各自的特点，要针对性制定计划，没有一种通用的解决办法」。倘若真是这样，还上学干什么？搞科研做什么？管理学、经济学都要歇菜了。别用个体差异给自己找借口了。&lt;/p>
&lt;p>我猜很多有主见，独立思考的人都会认同一句话。这句话是罗永浩在一次鲁豫有约采访时候说的——「我们周围大部分人都是笨蛋」。虽然老罗最近在做手机上栽了大跟头，但是大多数人一辈子连栽这样跟头的机会都没有就入土了。可是骂他的成千上万人里有多少是经历过这过程的呢？传播那些人云亦云的虚话，不过是懒于思考，不求上进的人找好的借口。他们自己做不到的，就理所当然认为你也做不到。抱着「周围大部分人都是笨蛋」的理念，积极地去跟「对的人」征求「有价值」的建议，我相信一定能有所收获。&lt;/p></description></item><item><title>ZooKeeper 帮助手册</title><link>https://sund.site/posts/2017/zookeeper/</link><pubDate>Tue, 14 Oct 2014 00:00:00 +0000</pubDate><guid>https://sund.site/posts/2017/zookeeper/</guid><description>&lt;p>原文地址：
&lt;a href="http://zookeeper.apache.org/doc/r3.4.6/zookeeperProgrammers.html">http://zookeeper.apache.org/doc/r3.4.6/zookeeperProgrammers.html&lt;/a>&lt;/p>
&lt;p>本文假设你已经具有一定分布式计算的基础知识。你将在第一部分看到以下内容：&lt;/p>
&lt;ul>
&lt;li>ZooKeeper数据模型&lt;/li>
&lt;li>ZooKeeper Sessions&lt;/li>
&lt;li>ZooKeeper Watches&lt;/li>
&lt;li>一致性保证(Consistency Guarantees)&lt;/li>
&lt;/ul>
&lt;p>接下来的4小节讲述了程序开发的实际应用：&lt;/p>
&lt;ul>
&lt;li>创建模块——ZooKeeper操作指引&lt;/li>
&lt;li>编程语言接口&lt;/li>
&lt;li>简单示例演示程序的结构&lt;/li>
&lt;li>常见问题和故障&lt;/li>
&lt;/ul>
&lt;p>本文的附录中包含和ZooKeeper相关的有用信息。&lt;/p>
&lt;h3 id="zookeeper的数据模型">ZooKeeper的数据模型&lt;/h3>
&lt;p>ZooKeeper有一个类似分布式文件系统的命名体系。区别在于Zookeeper每个一个节点或子节点都可以拥有数据。节点路径是一个由斜线分开的绝对路径，注意没有相对路径。只要满足下面要求的unicode字符都可以作为节点路径：&lt;/p>
&lt;ul>
&lt;li>空字符不能出现在路径名&lt;/li>
&lt;li>不能出现以下字符: \u0001 - \u0019 and \u007F - \u009F&lt;/li>
&lt;li>以下字符不允许使用: \ud800 -uF8FFF, \uFFF0-uFFFF, \uXFFFE - \uXFFFF (where X is a digit 1 - E), \uF0000 - \uFFFFF&lt;/li>
&lt;li>字符&amp;quot;.&amp;ldquo;可以作为一个名字的一部分, 但是&amp;rdquo;.&amp;ldquo;和&amp;rdquo;..&amp;ldquo;不能单独作为相对路径使用, 以下用法都是无效的: &amp;ldquo;/a/b/./c&amp;quot;或者&amp;rdquo;/a/b/../c&amp;rdquo;&lt;/li>
&lt;li>&amp;ldquo;zookeeper&amp;quot;为保留字符&lt;/li>
&lt;/ul>
&lt;h4 id="znodes">ZNodes&lt;/h4>
&lt;p>ZooKeeper树结构中的节点被称为znode。各个znode维护着一组用来标记数据和访问权限发生变化的版本号。这些版本号组成的状态结构具有时间戳。Zookeeper使用版本号和时间戳来验证缓存状态，调整更新。
每次znode中的数据发生变化，znode的版本号增加。例如，每当一个客户端恢复数据时，它就接收这个版本的数据，而当一个客户端提交了更新或删除记录，它必须同时提供这个znode当前正在发生变化的数据的版本。如果这个版本和目前真实的版本不匹配，则提交无效。
__提示，在分布式程序中，一个字节点可以代表一个通用的主机，服务器，集群中的一员，客户端程序等。但是在Zookeeper中，znode代表数据节点，Servers代表组成了Zookeeper服务的机器; quorum peers refer to the servers that make up an ensemble; 客户端代表任何使用ZooKeeper服务的主机或程序。&lt;/p>
&lt;p>znode作为对程序开发来说最重要的信息，有几个特性需要特别关注下：&lt;/p>
&lt;p>&lt;strong>Watches&lt;/strong>
客户端可以在znode上设置Watch。znode发生的变化会触发watch然后清除watch。当一个watch被触发，Zookeeper给客户端发送一个通知。更多关于watch的内容请查看ZooKeeper Watches一节。&lt;/p>
&lt;p>&lt;strong>数据存取&lt;/strong>
命名空间中每个znode中的数据读写是原子操作。读操作读取znode中的所有数据位，写操作则替换所有数据。每个节点都有一个访问权限控制表（ACL）来标记谁可以做什么。
zookeeper不是设计成普通的数据库或大型对象存储的。它是用来管理coordination data。coordination data包括配置文件、状态信息、rendezvous等。这些数据结构的一个共同特点就是相对较小——以千字节为准。Zookeeper的客户端和服务会检查确保每个znode上的数据小于1M，实际平均数据要远远小于1M。
大规模数据的操作会引发一些潜在的问题并且延长在网络和介质之间传输的时间。如果确实需要大型数据的存储，那么可以采用如NFS或HDFS之类的大型数据存储系统，亦或是在zookeeper中存储指向存储位置的指针。&lt;/p></description></item><item><title>macbook安装ubuntu</title><link>https://sund.site/posts/2017/macbook_ubuntu/</link><pubDate>Fri, 04 Jan 2013 00:00:00 +0000</pubDate><guid>https://sund.site/posts/2017/macbook_ubuntu/</guid><description>&lt;p>&lt;strong>注意，ubuntu 和 xubuntu 安装上有一定差别，请严格按照你选择的系统版本流程安装&lt;/strong>&lt;/p>
&lt;h3 id="ubuntu">ubuntu&lt;/h3>
&lt;h3 id="准备工作">准备工作&lt;/h3>
&lt;h5 id="分区">分区&lt;/h5>
&lt;p>这一步可以用命令行实现，也可以在 mac 下直接用磁盘工具分区，初学者建议后者。有经验的朋友可以在网上查询 diskutils 的用法，这是 mac 提供的分区工具&lt;/p>
&lt;p>使用磁盘工具，打开左侧最上边磁盘位置（不是 macosx，而是整个硬盘）的选项，右边会出现&lt;code>分区&lt;/code>标签。选择分区，你可以用鼠标拖动轻松将 macos 的一部分划分给 ubuntu 使用。分区格式可以选择 mac 日志文件。其实选什么都一样，等会还要重新格式化。&lt;/p>
&lt;h4 id="把-iso-镜像转化为苹果电脑识别的-img-镜像">把 iso 镜像转化为苹果电脑识别的 img 镜像&lt;/h4>
&lt;pre>&lt;code>hdiutil convert /path/to/ubuntu.iso -format UDRW -o /path/to/target.img
&lt;/code>&lt;/pre>
&lt;p>命令中&lt;code>path/to/ubuntu.iso&lt;/code>是你下载的 iso 路径，&lt;code>path/to/target.img&lt;/code>自然是你要保存成 img 的路径&lt;/p>
&lt;h4 id="插入-u-盘刻录镜像">插入 U 盘，刻录镜像&lt;/h4>
&lt;p>先运行如下命令查询你 U 盘的设备名&lt;/p>
&lt;pre>&lt;code>diskutil list
&lt;/code>&lt;/pre>
&lt;p>这里假设 U 盘是 disk1，执行&lt;/p>
&lt;pre>&lt;code>diskutil unmountDisk /dev/disk1
&lt;/code>&lt;/pre>
&lt;p>接下来执行命令刻录，&lt;/p>
&lt;pre>&lt;code>sudo dd if=/path/to/downloaded.img of=/dev/disk1 bs=1m
&lt;/code>&lt;/pre>
&lt;p>ubuntu 官网针对上一条命令可能出现的两种错误提示给出了解决办法：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>If you see the error dd: Invalid number &amp;lsquo;1m&amp;rsquo;, you are using GNU dd. Use the same command but replace bs=1m with bs=1M.&lt;/p></description></item></channel></rss>