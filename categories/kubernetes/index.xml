<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kubernetes on The Context Works</title><link>https://sund.site/categories/kubernetes/</link><description>Recent content in Kubernetes on The Context Works</description><generator>Hugo</generator><language>en</language><copyright>Copyright Â© 2024, Steve Sun; all rights reserved.</copyright><lastBuildDate>Mon, 08 Aug 2022 20:04:00 +0800</lastBuildDate><atom:link href="https://sund.site/categories/kubernetes/index.xml" rel="self" type="application/rss+xml"/><item><title>3 Ways to Access Host System in a Docker Container</title><link>https://sund.site/posts/2022/3_ways_to_access_host_system_in_container/</link><pubDate>Mon, 08 Aug 2022 20:04:00 +0800</pubDate><guid>https://sund.site/posts/2022/3_ways_to_access_host_system_in_container/</guid><description>&lt;p>When we are using Docker, we always access the host system by mounting the host folders as a volume. But sometimes we can not do that due to deployment reasons or security limits.&lt;/p>
&lt;p>There are three workaround ways to access the host system.&lt;/p>
&lt;h2 id="1-mount-dockersocks-into-container">1. Mount &lt;code>docker.socks&lt;/code> into container&lt;/h2>
&lt;p>&lt;code>docker.socks&lt;/code> is a Unix socket that Docker Engine API listens on. You can mount &lt;code>/var/run/docker.socks&lt;/code> file to your container and call Docker Engine API through this socket.&lt;/p></description></item></channel></rss>