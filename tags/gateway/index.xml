<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>gateway on Steve Sun</title><link>https://sund.site/tags/gateway/</link><description>Recent content in gateway on Steve Sun</description><generator>Hugo -- gohugo.io</generator><language>En</language><lastBuildDate>Fri, 23 Jun 2023 10:36:36 +0800</lastBuildDate><atom:link href="https://sund.site/tags/gateway/index.xml" rel="self" type="application/rss+xml"/><item><title>Kong网关极简入门</title><link>https://sund.site/posts/2023/kong-gateway/</link><pubDate>Fri, 23 Jun 2023 10:36:36 +0800</pubDate><guid>https://sund.site/posts/2023/kong-gateway/</guid><description>&lt;h2 id="基本概念">基本概念&lt;/h2>
&lt;blockquote>
&lt;p>Kong Gateway is a Lua application running in Nginx. Kong Gateway is distributed along with OpenResty, which is a bundle of modules that extend the lua-nginx-module.&lt;/p>
&lt;/blockquote>
&lt;p>Kong 是一个基于 Nginx 上运行的 Lua 程序。它改善了 Nginx 基于静态配置的缺点，可以动态添加插件和热部署。&lt;/p>
&lt;p>&lt;img src="https://sund.site/images/kong-gateway/Kong.png" alt="">&lt;/p>
&lt;h2 id="kong-的基础模块">Kong 的基础模块&lt;/h2>
&lt;p>&lt;strong>Service&lt;/strong>是后端服务的抽象。&lt;/p>
&lt;p>&lt;strong>Routes&lt;/strong>是 client 到后端服务的路由规则的抽象。如，为不同的 client 设置不同的认证规则。&lt;/p>
&lt;p>Kong 的 routes 有两种模式 &lt;code>traditional_compat&lt;/code> 和 &lt;code>expressions&lt;/code> 。&lt;/p>
&lt;ul>
&lt;li>&lt;code>traditional_compat&lt;/code> ：旧的基于通配符等匹配优先级的模式。&lt;/li>
&lt;li>&lt;code>expressions&lt;/code> ：新的基于表达式的匹配模式。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Upstreams&lt;/strong>是一个运维对象，在 Services 和真正的后台 API 服务之间，用来负载均衡。&lt;/p>
&lt;p>&lt;strong>Plugins&lt;/strong>是用 lua 或 go 编写的插件，分为 Kong 官方提供的插件和第三方插件。&lt;/p>
&lt;h2 id="kong-的工作原理">Kong 的工作原理&lt;/h2>
&lt;p>Kong 支持三类协议：HTTP/HTTPS，TCL/TLS 和 GRPC/GRPCS。每种协议由不同的参数组成：&lt;/p>
&lt;ul>
&lt;li>&lt;code>http&lt;/code>: &lt;code>methods&lt;/code>, &lt;code>hosts&lt;/code>, &lt;code>headers&lt;/code>, &lt;code>paths&lt;/code> (and &lt;code>snis&lt;/code>, if &lt;code>https&lt;/code>)&lt;/li>
&lt;li>&lt;code>tcp&lt;/code>: &lt;code>sources&lt;/code>, &lt;code>destinations&lt;/code> (and &lt;code>snis&lt;/code>, if &lt;code>tls&lt;/code>)&lt;/li>
&lt;li>&lt;code>grpc&lt;/code>: &lt;code>hosts&lt;/code>, &lt;code>headers&lt;/code>, &lt;code>paths&lt;/code> (and &lt;code>snis&lt;/code>, if &lt;code>grpcs&lt;/code>)&lt;/li>
&lt;/ul>
&lt;p>Kong 支持按 HTTP header、URL、method、源地址、目标地址、&lt;a href="https://en.wikipedia.org/wiki/Server_Name_Indication">Server Name Indication&lt;/a> 来路由请求。&lt;/p>
&lt;p>Kong 默认以&lt;a href="https://tools.ietf.org/html/rfc3986">RFC 3986&lt;/a>协议对请求的路径处理。&lt;/p>
&lt;h3 id="kong-匹配规则的优先级">Kong 匹配规则的优先级&lt;/h3>
&lt;p>按最多匹配的规则来路由。&lt;/p>
&lt;blockquote>
&lt;p>The rule is: &lt;strong>when evaluating a request, Kong Gateway first tries to match the
routes with the most rules&lt;/strong>.&lt;/p>
&lt;/blockquote>
&lt;p>当所有匹配规则检查完，Kong 会通过下层的 Nginx 模块发送请求。Response 返回之后，Kong 再经过&lt;code>header_filter&lt;/code>和&lt;code>body_filter&lt;/code>两个 hook 来修改 response header 和 body。&lt;/p>
&lt;h3 id="对-websocket-的支持">对 WebSocket 的支持&lt;/h3>
&lt;p>有两种配置方式来路由 wss 请求：&lt;/p>
&lt;ul>
&lt;li>HTTP(S) services and routes：把 wss 流量当作不透明的字节流。&lt;/li>
&lt;li>WS(S) services and routes (&lt;strong>企业版功能&lt;/strong>)：可以更好的用 websocket 插件控制流量。&lt;/li>
&lt;/ul>
&lt;h3 id="负载均衡">负载均衡&lt;/h3>
&lt;p>Kong 支持两类负载均衡方式&lt;/p>
&lt;ul>
&lt;li>基于 DNS （服务注册和发现是静态的）&lt;/li>
&lt;li>基于哈希环的动态负载均衡（服务注册发现由 Kong 管理，可以动态增删）&lt;/li>
&lt;/ul>
&lt;p>这部分跟 Nginx 类似。&lt;/p>
&lt;h3 id="健康检查">健康检查&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>active checks&lt;/strong>（心跳检查）&lt;/li>
&lt;li>&lt;strong>passive checks&lt;/strong>（被动检查，即断路器，根据流量检查）&lt;/li>
&lt;/ul></description></item></channel></rss>